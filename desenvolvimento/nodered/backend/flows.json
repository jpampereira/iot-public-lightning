[
    {
        "id": "8813ec2835daae18",
        "type": "tab",
        "label": "Get sensors data",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7f5557aca01f4737",
        "type": "tab",
        "label": "/devices/measures",
        "disabled": false,
        "info": ""
    },
    {
        "id": "4a674aaa9e667dd6",
        "type": "tab",
        "label": "/devices/info",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e27b09cd4ecd866a",
        "type": "tab",
        "label": "/devices/actions",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7bfe80d199363eac",
        "type": "tab",
        "label": "Historic table",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a716829fd201f4fd",
        "type": "tab",
        "label": "Problem alarms",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1ce1485ad608bc7a",
        "type": "tab",
        "label": "Clear alarms",
        "disabled": false,
        "info": ""
    },
    {
        "id": "bab6ffe5b7ae3a28",
        "type": "subflow",
        "name": "Database",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 100,
                "wires": [
                    {
                        "id": "2dc46f9c24f9eb35"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 100,
                "wires": [
                    {
                        "id": "dcf9a148a61be9fc",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "185bd0a8b5a4b916",
        "type": "subflow",
        "name": "Database Redis",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 166,
                "wires": [
                    {
                        "id": "3c546124752a49f4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 1623,
                "wires": [
                    {
                        "id": "adc4c59772c6298c",
                        "port": 0
                    }
                ]
            },
            {
                "x": 120,
                "y": 1700,
                "wires": [
                    {
                        "id": "ab7425eb7c0d4676",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "df4bdf4be0d4150f",
        "type": "mqtt-broker",
        "name": "Local MQTT Broker",
        "broker": "broker_mqtt",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "21c629e3be9268f3",
        "type": "mydbConfig",
        "name": "postgres@db:5432/PGC",
        "host": "db",
        "port": "5432",
        "database": "PGC",
        "ssl": false,
        "rejectUnauthorized": false,
        "ca": "",
        "key": "",
        "cert": "",
        "max": "10",
        "min": "1",
        "idle": "1000"
    },
    {
        "id": "a7cb2a42ddfd0d99",
        "type": "redis-config",
        "name": "Redis",
        "options": "{\"host\":\"db_redis\"}",
        "cluster": false,
        "optionsType": "json"
    },
    {
        "id": "1278b67130dc94fa",
        "type": "mqtt-broker",
        "name": "MQTT Mosquitto",
        "broker": "test.mosquitto.org",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "2dc46f9c24f9eb35",
        "type": "function",
        "z": "bab6ffe5b7ae3a28",
        "name": "Set Query",
        "func": "msg.query = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 100,
        "wires": [
            [
                "bb3a8d2b7854dccb"
            ]
        ]
    },
    {
        "id": "dcf9a148a61be9fc",
        "type": "function",
        "z": "bab6ffe5b7ae3a28",
        "name": "Get Query Response",
        "func": "const query_response = msg.payload.rows;\n\ndelete msg.query;\n\nmsg.payload = query_response;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "bb3a8d2b7854dccb",
        "type": "mydb",
        "z": "bab6ffe5b7ae3a28",
        "name": "Execute Query",
        "style": "mustache",
        "substEnvVars": false,
        "query": "{{{ msg.query }}};",
        "mydbConfig": "21c629e3be9268f3",
        "x": 360,
        "y": 100,
        "wires": [
            [
                "dcf9a148a61be9fc"
            ]
        ]
    },
    {
        "id": "8b614dd0c4e7ecd6",
        "type": "mqtt in",
        "z": "8813ec2835daae18",
        "name": "Sensors Output Local",
        "topic": "pgc_ufabc/devices/measures",
        "qos": "0",
        "datatype": "json",
        "broker": "df4bdf4be0d4150f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 140,
        "y": 116,
        "wires": [
            [
                "96803667e593d0dc"
            ]
        ]
    },
    {
        "id": "80a46d82ca4455ee",
        "type": "catch",
        "z": "8813ec2835daae18",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 101,
        "y": 416,
        "wires": [
            [
                "4fed0b38fbbe8ae3"
            ]
        ]
    },
    {
        "id": "27e7cc799e913f9c",
        "type": "comment",
        "z": "8813ec2835daae18",
        "name": "########## Exceptions Treatment",
        "info": "",
        "x": 180,
        "y": 355,
        "wires": []
    },
    {
        "id": "4fed0b38fbbe8ae3",
        "type": "debug",
        "z": "8813ec2835daae18",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 251,
        "y": 416,
        "wires": []
    },
    {
        "id": "96803667e593d0dc",
        "type": "function",
        "z": "8813ec2835daae18",
        "name": "Set query",
        "func": "const measures = msg.payload;\n\nmsg.payload = `INSERT \n               INTO SENSORS_DATA_REAL_TIME (DEVICE_ID, VOLTAGE, CURRENT, LIGHTNESS, RELE_STATE) \n               VALUES (${measures.device_id}, ${measures.voltage}, ${measures.current}, ${measures.lightness}, '${measures.rele_state}')`;\n\nmsg.measures = measures;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 147,
        "wires": [
            [
                "fea15522f7bc9730"
            ]
        ]
    },
    {
        "id": "fea15522f7bc9730",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "8813ec2835daae18",
        "name": "",
        "env": [],
        "x": 480,
        "y": 147,
        "wires": [
            [
                "8885c9540ad9bf99"
            ]
        ]
    },
    {
        "id": "8885c9540ad9bf99",
        "type": "debug",
        "z": "8813ec2835daae18",
        "name": "[EXIT] Receive and store sensors measures",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 147,
        "wires": []
    },
    {
        "id": "6c14b6de93cba404",
        "type": "comment",
        "z": "8813ec2835daae18",
        "name": "########## Receive and store sensors measures",
        "info": "",
        "x": 230,
        "y": 55,
        "wires": []
    },
    {
        "id": "4ac549b1969b0168",
        "type": "catch",
        "z": "7f5557aca01f4737",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 776,
        "wires": [
            [
                "a961e1ec20451721"
            ]
        ]
    },
    {
        "id": "fca56cd6fe289503",
        "type": "comment",
        "z": "7f5557aca01f4737",
        "name": "########## Exceptions Treatment",
        "info": "",
        "x": 180,
        "y": 715,
        "wires": []
    },
    {
        "id": "1705d89c23ac2369",
        "type": "debug",
        "z": "7f5557aca01f4737",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 776,
        "wires": []
    },
    {
        "id": "ad7a04302aa7d2a5",
        "type": "inject",
        "z": "7bfe80d199363eac",
        "name": "[TRIGGER] Execute every 1 hour",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "0 0-23 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 205,
        "y": 115,
        "wires": [
            [
                "321102acad131081"
            ]
        ]
    },
    {
        "id": "c1d56661b93bc251",
        "type": "comment",
        "z": "7bfe80d199363eac",
        "name": "########## Merge dataset of last 1 hour",
        "info": "",
        "x": 200,
        "y": 56,
        "wires": []
    },
    {
        "id": "65af7ad57593057d",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7bfe80d199363eac",
        "name": "",
        "x": 1180,
        "y": 115,
        "wires": [
            [
                "b5f99fa633c93197"
            ]
        ]
    },
    {
        "id": "9563eb3f5af48c81",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Get active devices",
        "func": "msg.payload = `SELECT ID FROM DEVICES WHERE STATUS = '1'`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 196,
        "wires": [
            [
                "5591169f8bdc17c3"
            ]
        ]
    },
    {
        "id": "595d6b6ee38f20b2",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Delete sensors data from more than a hour",
        "func": "const timestamp = msg.timestamp;\n\nconst date = new Date(timestamp);\ndate.setSeconds(0);\ndate.setMilliseconds(0);\n\nconst year = date.getFullYear();\nconst mon  = `0${date.getMonth()+1}`.slice(-2);\nconst day  = `0${date.getDate()}`.slice(-2);\nconst hour = `0${date.getHours()}`.slice(-2);\nconst min  = `0${date.getMinutes()}`.slice(-2);\nconst sec  = `0${date.getSeconds()}`.slice(-2);\n\nconst format_date = `${year}-${mon}-${day} ${hour}:${min}:${sec}`;\n\nmsg.payload = `DELETE\n               FROM SENSORS_DATA_REAL_TIME\n               WHERE (INSERTION_TIME AT TIME ZONE 'CST') < (TO_TIMESTAMP('${format_date}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST') - INTERVAL '1 hour'`;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 115,
        "wires": [
            [
                "65af7ad57593057d"
            ]
        ]
    },
    {
        "id": "b5f99fa633c93197",
        "type": "link out",
        "z": "7bfe80d199363eac",
        "name": "OUT (1) Merge dataset of last 1 hour",
        "links": [
            "332a597c5d4b37eb"
        ],
        "x": 1275,
        "y": 115,
        "wires": []
    },
    {
        "id": "332a597c5d4b37eb",
        "type": "link in",
        "z": "7bfe80d199363eac",
        "name": "IN (1) Merge dataset of last 1 hour",
        "links": [
            "b5f99fa633c93197"
        ],
        "x": 55,
        "y": 196,
        "wires": [
            [
                "9563eb3f5af48c81"
            ]
        ]
    },
    {
        "id": "5591169f8bdc17c3",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7bfe80d199363eac",
        "name": "",
        "x": 360,
        "y": 196,
        "wires": [
            [
                "beecc4814c6aae9f"
            ]
        ]
    },
    {
        "id": "beecc4814c6aae9f",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Get devices id",
        "func": "const active_devices = msg.payload;\n\nconst devices_id = active_devices.map(row => row.id);\n\nmsg.payload = devices_id;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 196,
        "wires": [
            [
                "ed99fca3c09600af"
            ]
        ]
    },
    {
        "id": "ed99fca3c09600af",
        "type": "split",
        "z": "7bfe80d199363eac",
        "name": "Split devices",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 196,
        "wires": [
            [
                "693d574d15cb8f85"
            ]
        ]
    },
    {
        "id": "eac004593bcd4e52",
        "type": "catch",
        "z": "7bfe80d199363eac",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 616,
        "wires": [
            [
                "2917f36263955a9a"
            ]
        ]
    },
    {
        "id": "9371aee991e4b665",
        "type": "comment",
        "z": "7bfe80d199363eac",
        "name": "########## Exceptions Treatment",
        "info": "",
        "x": 179,
        "y": 555,
        "wires": []
    },
    {
        "id": "2917f36263955a9a",
        "type": "debug",
        "z": "7bfe80d199363eac",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 616,
        "wires": []
    },
    {
        "id": "693d574d15cb8f85",
        "type": "link out",
        "z": "7bfe80d199363eac",
        "name": "OUT (2) Merge dataset of last 1 hour",
        "links": [
            "8d1428957fa20719"
        ],
        "x": 795,
        "y": 196,
        "wires": []
    },
    {
        "id": "8d1428957fa20719",
        "type": "link in",
        "z": "7bfe80d199363eac",
        "name": "IN (2) Merge dataset of last 1 hour",
        "links": [
            "693d574d15cb8f85"
        ],
        "x": 55,
        "y": 295,
        "wires": [
            [
                "0f771eab714c377a"
            ]
        ]
    },
    {
        "id": "0f771eab714c377a",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Get sensors data from last 1 hour",
        "func": "function format_date(timestamp) {\n    const year = timestamp.getFullYear();\n    const mon  = `0${timestamp.getMonth()+1}`.slice(-2);\n    const day  = `0${timestamp.getDate()}`.slice(-2);\n    const hour = `0${timestamp.getHours()}`.slice(-2);\n    const min  = `0${timestamp.getMinutes()}`.slice(-2);\n    const sec  = `0${timestamp.getSeconds()}`.slice(-2);\n    \n    return `${year}-${mon}-${day} ${hour}:${min}:${sec}`;\n}\n\nconst device_id = msg.payload;\nconst timestamp = msg.timestamp;\n\nconst date = new Date(timestamp);\ndate.setSeconds(0);\ndate.setMilliseconds(0);\n\nconst end = format_date(date);\n\ndate.setMinutes(date.getMinutes()-60);\n\nconst begin = format_date(date);\n\nmsg.payload = `SELECT VOLTAGE, CURRENT, LIGHTNESS, RELE_STATE, INSERTION_TIME\n               FROM SENSORS_DATA_REAL_TIME\n               WHERE DEVICE_ID = ${device_id}\n               AND (INSERTION_TIME AT TIME ZONE 'CST') >= (TO_TIMESTAMP('${begin}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST')\n               AND (INSERTION_TIME AT TIME ZONE 'CST') < (TO_TIMESTAMP('${end}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST')\n               ORDER BY INSERTION_TIME`;\n               \nmsg.device_id = device_id;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 295,
        "wires": [
            [
                "03af6adb8219152a"
            ]
        ]
    },
    {
        "id": "03af6adb8219152a",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7bfe80d199363eac",
        "name": "",
        "x": 460,
        "y": 295,
        "wires": [
            [
                "bc47812a82cb85c3"
            ]
        ]
    },
    {
        "id": "6c62112a5cd8d179",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Calculate powers",
        "func": "let dataset = msg.payload;\n\ndataset = dataset.map(data => {\n    data.power = Math.round(data.voltage * data.current);\n    return data;\n});\n\nmsg.payload = dataset;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 276,
        "wires": [
            [
                "78cd9ac0cd2c0ec3"
            ]
        ]
    },
    {
        "id": "78cd9ac0cd2c0ec3",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Calculate max, min and avg",
        "func": "const dataset = msg.payload;\n\n// Functions\nconst min = dataset => Math.min(...dataset);\nconst max = dataset => Math.max(...dataset);\nconst avg = dataset => (dataset.reduce((acc, cur) => acc + cur, 0) / dataset.length);\n\n// Get data from a specific measure\nconst voltages  = dataset.map(data => data.voltage);\nconst currents  = dataset.map(data => data.current); \nconst lightness = dataset.map(data => data.lightness);\nconst powers    = dataset.map(data => data.power);\n\nconst results = {\n    voltage:   { min: min(voltages),  max: max(voltages),  avg: Math.round(avg(voltages))            },\n    current:   { min: min(currents),  max: max(currents),  avg: parseFloat(avg(currents).toFixed(2)) },\n    lightness: { min: min(lightness), max: max(lightness), avg: Math.round(avg(lightness))           },\n    power:     { min: min(powers),    max: max(powers),    avg: Math.round(avg(powers))              }\n}\n\nmsg.dataset = dataset;\nmsg.results = results;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 276,
        "wires": [
            [
                "a6f8cbe1cf99fbb7"
            ]
        ]
    },
    {
        "id": "bc47812a82cb85c3",
        "type": "switch",
        "z": "7bfe80d199363eac",
        "name": "Found data?",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 295,
        "wires": [
            [
                "6c62112a5cd8d179"
            ],
            [
                "8d3e52ed971b346e"
            ]
        ]
    },
    {
        "id": "a6f8cbe1cf99fbb7",
        "type": "link out",
        "z": "7bfe80d199363eac",
        "name": "OUT (3) Merge dataset of last 1 hour",
        "links": [
            "3648289a20e9cc5d"
        ],
        "x": 1195,
        "y": 276,
        "wires": []
    },
    {
        "id": "3648289a20e9cc5d",
        "type": "link in",
        "z": "7bfe80d199363eac",
        "name": "IN (3) Merge dataset of last 1 hour",
        "links": [
            "a6f8cbe1cf99fbb7"
        ],
        "x": 55,
        "y": 396,
        "wires": [
            [
                "2233a99dd3d33b7e"
            ]
        ]
    },
    {
        "id": "acbdd010515a12d1",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Insert results in database",
        "func": "function format_date(timestamp) {\n    const year = timestamp.getFullYear();\n    const mon  = `0${timestamp.getMonth()+1}`.slice(-2);\n    const day  = `0${timestamp.getDate()}`.slice(-2);\n    const hour = `0${timestamp.getHours()}`.slice(-2);\n    const min  = `0${timestamp.getMinutes()}`.slice(-2);\n    const sec  = `0${timestamp.getSeconds()}`.slice(-2);\n    \n    return `${year}-${mon}-${day} ${hour}:${min}:${sec}`;\n}\n\nconst device_id = msg.device_id;\nconst results   = msg.results;\nconst dataset   = msg.dataset;\nconst timestamp = msg.timestamp;\n\nconst date = new Date(timestamp);\ndate.setSeconds(0);\ndate.setMilliseconds(0);\n\nconst insertion_time = format_date(date);\n\nconst voltage   = results.voltage;\nconst current   = results.current;\nconst lightness = results.lightness;\nconst power     = results.power;\n\nmsg.payload = `INSERT\n               INTO SENSORS_DATA_INTERVAL\n               (DEVICE_ID, VOLTAGE_MIN, VOLTAGE_MAX, VOLTAGE_AVG, CURRENT_MIN, CURRENT_MAX, CURRENT_AVG, LIGHTNESS_MIN, LIGHTNESS_MAX, LIGHTNESS_AVG, POWER_MIN, POWER_MAX, POWER_AVG, POWER_EXPEND, INSERTION_TIME, NUM_REGISTRIES)\n               VALUES\n               (${device_id}, ${voltage.min}, ${voltage.max}, ${voltage.avg}, ${current.min}, ${current.max}, ${current.avg}, ${lightness.min}, ${lightness.max}, ${lightness.avg}, ${power.min}, ${power.max}, ${power.avg}, ${results.power_expend}, '${insertion_time}', ${dataset.length})`;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 396,
        "wires": [
            [
                "a7f85d37f23ca51c",
                "0e031983ba29c66c"
            ]
        ]
    },
    {
        "id": "a7f85d37f23ca51c",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7bfe80d199363eac",
        "name": "",
        "x": 641,
        "y": 396,
        "wires": [
            []
        ]
    },
    {
        "id": "0e031983ba29c66c",
        "type": "debug",
        "z": "7bfe80d199363eac",
        "name": "[EXIT 2] Merge dataset of last 1 hour",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 396,
        "wires": []
    },
    {
        "id": "2233a99dd3d33b7e",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Calculate power expend",
        "func": "const dataset = msg.dataset;\n\nlet sum = 0;\n\nlet i, j;\n\nfor (i = 0; i < dataset.length; i++) {\n    if (dataset[i].rele_state === true) {\n        for (j = i+1; j < dataset.length && dataset[j].rele_state === true; j++);\n\n        const interval = dataset.slice(i, j);\n        \n        const begin = new Date(interval[0].insertion_time);\n        const final = new Date(interval[interval.length-1].insertion_time);\n        \n        const time_diff = (final-begin)/(1000*60*60); // milliseconds * seconds * minutes\n        \n        const voltage_avg = interval.reduce((acc, cur) => acc + cur.voltage, 0) / interval.length;\n        const current_avg = interval.reduce((acc, cur) => acc + cur.current, 0) / interval.length;\n        \n        sum += (((voltage_avg * current_avg) / 1000) * time_diff);\n        \n        i = j-1;\n    }\n}\n\nmsg.results.power_expend = parseFloat(sum.toFixed(2)); // in kW/h\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 396,
        "wires": [
            [
                "acbdd010515a12d1"
            ]
        ]
    },
    {
        "id": "1c9633d021328e7c",
        "type": "http in",
        "z": "7f5557aca01f4737",
        "name": "",
        "url": "/devices/measures/interval",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 171,
        "y": 335,
        "wires": [
            [
                "96bdf6630c129c17"
            ]
        ]
    },
    {
        "id": "ddca169b2eed6b38",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set query",
        "func": "// Get data from last 24 hours or week\n\nfunction format_date (timestamp) {\n    const year = timestamp.getFullYear();\n    const mon  = `0${timestamp.getMonth()+1}`.slice(-2);\n    const day  = `0${timestamp.getDate()}`.slice(-2);\n    const hour = `0${timestamp.getHours()}`.slice(-2);\n    const min  = `0${timestamp.getMinutes()}`.slice(-2);\n    const sec  = `0${timestamp.getSeconds()}`.slice(-2);\n    \n    return `${year}-${mon}-${day} ${hour}:${min}:${sec}`;\n}\n\nconst threshold   = msg.threshold;\nconst interval    = msg.interval;\nconst device_name = msg.device_name;\n\nconst end   = format_date(threshold);\nconst begin = format_date(new Date(threshold - 1000 * 60 * interval));\n\nmsg.payload = `SELECT SDI.VOLTAGE_MIN, SDI.VOLTAGE_MAX, SDI.VOLTAGE_AVG, SDI.CURRENT_MIN, SDI.CURRENT_MAX, SDI.CURRENT_AVG, SDI.LIGHTNESS_MIN, SDI.LIGHTNESS_MAX, SDI.LIGHTNESS_AVG, SDI.POWER_MIN, SDI.POWER_MAX, SDI.POWER_AVG, SDI.POWER_EXPEND, SDI.NUM_REGISTRIES, SDI.INSERTION_TIME\n               FROM SENSORS_DATA_INTERVAL AS SDI \n               JOIN DEVICES AS D ON SDI.DEVICE_ID = D.ID \n               WHERE D.NAME = '${device_name}'\n               AND (SDI.INSERTION_TIME AT TIME ZONE 'CST') > (TO_TIMESTAMP('${begin}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST') \n               AND (SDI.INSERTION_TIME AT TIME ZONE 'CST') <= (TO_TIMESTAMP('${end}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST')\n               ORDER BY SDI.INSERTION_TIME`;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 314,
        "wires": [
            [
                "6ec488a047717083"
            ]
        ]
    },
    {
        "id": "47e86d41591c2ef2",
        "type": "http response",
        "z": "7f5557aca01f4737",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 540,
        "y": 555,
        "wires": []
    },
    {
        "id": "6ec488a047717083",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7f5557aca01f4737",
        "name": "",
        "x": 1180,
        "y": 314,
        "wires": [
            [
                "7cdff54cf4f12948"
            ]
        ]
    },
    {
        "id": "dc71772a94af1a6d",
        "type": "debug",
        "z": "7f5557aca01f4737",
        "name": "[EXIT] Get measures of a device in a specific interval",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 555,
        "wires": []
    },
    {
        "id": "1a6d28956a0d6589",
        "type": "switch",
        "z": "7f5557aca01f4737",
        "name": "What's the interval?",
        "property": "interval",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "60",
                "vt": "num"
            },
            {
                "t": "lt",
                "v": "44640",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 830,
        "y": 314,
        "wires": [
            [
                "57ce85e61299af4e"
            ],
            [
                "ddca169b2eed6b38"
            ],
            [
                "9e05e185a3257074"
            ]
        ]
    },
    {
        "id": "57ce85e61299af4e",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set query",
        "func": "// Get data from last hour\n\nfunction format_date (timestamp) {\n    const year = timestamp.getFullYear();\n    const mon  = `0${timestamp.getMonth()+1}`.slice(-2);\n    const day  = `0${timestamp.getDate()}`.slice(-2);\n    const hour = `0${timestamp.getHours()}`.slice(-2);\n    const min  = `0${timestamp.getMinutes()}`.slice(-2);\n    const sec  = `0${timestamp.getSeconds()}`.slice(-2);\n    \n    return `${year}-${mon}-${day} ${hour}:${min}:${sec}`;\n}\n\nconst threshold   = msg.threshold;\nconst interval    = msg.interval;\nconst device_name = msg.device_name;\n\nconst end   = format_date(threshold);\nconst begin = format_date(new Date(threshold - 1000 * 60 * interval));\n\nmsg.payload = `SELECT SDRT.VOLTAGE, SDRT.CURRENT, SDRT.LIGHTNESS, SDRT.RELE_STATE, SDRT.INSERTION_TIME\n               FROM SENSORS_DATA_REAL_TIME AS SDRT \n               JOIN DEVICES AS D ON SDRT.DEVICE_ID = D.ID \n               WHERE D.NAME = '${device_name}'\n               AND (SDRT.INSERTION_TIME AT TIME ZONE 'CST') >= (TO_TIMESTAMP('${begin}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST') \n               AND (SDRT.INSERTION_TIME AT TIME ZONE 'CST') < (TO_TIMESTAMP('${end}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST')\n               ORDER BY SDRT.INSERTION_TIME`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 276,
        "wires": [
            [
                "6ec488a047717083"
            ]
        ]
    },
    {
        "id": "1bb825e2928759bb",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Calculate powers",
        "func": "let dataset = msg.payload;\n\ndataset = dataset.map(data => {\n    data.power = Math.round(data.voltage * data.current);\n    return data;\n});\n\nmsg.payload = dataset;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 435,
        "wires": [
            [
                "97320d78a0801902"
            ]
        ]
    },
    {
        "id": "f37dd2752270a5c8",
        "type": "switch",
        "z": "7f5557aca01f4737",
        "name": "What's the interval?",
        "property": "interval",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "60",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 457,
        "wires": [
            [
                "1bb825e2928759bb"
            ],
            [
                "6cf164c9f164c150"
            ]
        ]
    },
    {
        "id": "2d413cccf4985d24",
        "type": "link in",
        "z": "7f5557aca01f4737",
        "name": "IN (1) Get measures of a device in a specific interval",
        "links": [
            "7cdff54cf4f12948"
        ],
        "x": 55,
        "y": 457,
        "wires": [
            [
                "f37dd2752270a5c8"
            ]
        ]
    },
    {
        "id": "7cdff54cf4f12948",
        "type": "link out",
        "z": "7f5557aca01f4737",
        "name": "OUT (1) Get measures of a device in a specific interval",
        "links": [
            "2d413cccf4985d24"
        ],
        "x": 1275,
        "y": 314,
        "wires": []
    },
    {
        "id": "d998e00625e40a86",
        "type": "link out",
        "z": "7f5557aca01f4737",
        "name": "OUT (3) Get measures of a device in a specific interval",
        "links": [
            "6383f89379246b18"
        ],
        "x": 715,
        "y": 478,
        "wires": []
    },
    {
        "id": "6b6db413a491a12d",
        "type": "link out",
        "z": "7f5557aca01f4737",
        "name": "OUT (2) Get measures of a device in a specific interval",
        "links": [
            "6383f89379246b18"
        ],
        "x": 695,
        "y": 435,
        "wires": []
    },
    {
        "id": "6383f89379246b18",
        "type": "link in",
        "z": "7f5557aca01f4737",
        "name": "IN (2) Get measures of a device in a specific interval",
        "links": [
            "6b6db413a491a12d",
            "d998e00625e40a86"
        ],
        "x": 55,
        "y": 555,
        "wires": [
            [
                "5f90a25a42bb5326"
            ]
        ]
    },
    {
        "id": "97320d78a0801902",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Group data",
        "func": "const dataset   = msg.payload;\nconst threshold = msg.threshold;\nconst n_groups  = msg.interval;\nconst hop       = 1000 * 60;\n\n// Create groups\n\nlet i;\nlet groups = [];\n\nfor (i = n_groups; i > 0; i--) {\n    const timestamp = new Date(threshold - hop * i);\n    const measures  = [];\n    \n    groups.push({ timestamp, measures, records: 0 });\n}\n\n// Group data\n\ni = 1;\n\ndataset.forEach(data => {\n    const timestamp = new Date(data.insertion_time);\n    \n    for (i; i < groups.length && timestamp >= groups[i].timestamp; i++);\n\n    groups[i-1].measures.push(data);\n    groups[i-1].records++;\n});\n\n// Sum measures\n\nconst avg = dataset => (dataset.reduce((acc, cur) => acc + cur, 0) / dataset.length) || 0;\n\ngroups = groups.map(group => {\n    const voltage   = group.measures.map(data => data.voltage);\n    const current   = group.measures.map(data => data.current);\n    const lightness = group.measures.map(data => data.lightness);\n    const powers    = group.measures.map(data => data.power);\n    \n    const voltage_avg   = Math.round(avg(voltage));\n    const current_avg   = parseFloat((avg(current)).toFixed(2));\n    const lightness_avg = Math.round(avg(lightness));\n    const powers_avg    = Math.round(avg(powers));\n    \n    group.measures = {\n        voltage:   voltage_avg,\n        current:   current_avg,\n        lightness: lightness_avg,\n        power:     powers_avg\n    }\n    \n    return group;\n});\n\nmsg.dataset = groups;\nmsg.hop     = hop;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 435,
        "wires": [
            [
                "6b6db413a491a12d"
            ]
        ]
    },
    {
        "id": "7287a934bad43292",
        "type": "http in",
        "z": "7f5557aca01f4737",
        "name": "",
        "url": "/devices/measures/last",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 115,
        "wires": [
            [
                "a59199192f78dcc7"
            ]
        ]
    },
    {
        "id": "659446935b848402",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set query",
        "func": "const device_name = msg.device_name;\n\nmsg.payload = `SELECT SDRT.VOLTAGE, SDRT.CURRENT, SDRT.LIGHTNESS, SDRT.RELE_STATE\n               FROM SENSORS_DATA_REAL_TIME AS SDRT \n               JOIN DEVICES AS D ON SDRT.DEVICE_ID = D.ID\n               WHERE D.NAME = '${device_name}'\n               AND (SDRT.INSERTION_TIME AT TIME ZONE 'CST') > (CURRENT_TIMESTAMP AT TIME ZONE 'CST') - INTERVAL '1 min'\n               ORDER BY SDRT.INSERTION_TIME DESC\n               LIMIT 1;`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 115,
        "wires": [
            [
                "bc421cbbfbd8aa49"
            ]
        ]
    },
    {
        "id": "bc421cbbfbd8aa49",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7f5557aca01f4737",
        "name": "",
        "env": [],
        "x": 700,
        "y": 115,
        "wires": [
            [
                "269b6f17aa90ca43"
            ]
        ]
    },
    {
        "id": "269b6f17aa90ca43",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Calculate power",
        "func": "let dataset = msg.payload;\n\nif (dataset.length > 0) {\n    dataset = dataset.map(data => {\n        // Calculate power\n        data.power = Math.round(data.voltage * data.current);\n        \n        // Convert rele_state\n        data.rele_state = data.rele_state ? 1 : 0;\n        \n        return data;\n    });\n    \n    msg.payload = dataset;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 115,
        "wires": [
            [
                "9853d4fc5f5b1ebf",
                "270828bcb3beacf1"
            ]
        ]
    },
    {
        "id": "270828bcb3beacf1",
        "type": "http response",
        "z": "7f5557aca01f4737",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 1040,
        "y": 115,
        "wires": []
    },
    {
        "id": "9853d4fc5f5b1ebf",
        "type": "debug",
        "z": "7f5557aca01f4737",
        "name": "[EXIT] Get last measures of a device",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1290,
        "y": 116,
        "wires": []
    },
    {
        "id": "96bdf6630c129c17",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Parse request body",
        "func": "msg.device_name = msg.payload.device_name;\nmsg.interval    = parseInt(msg.payload.interval); // in minutes\n\nconst allowed_intervals = [60, 1440, 10080, 44640];\n\nif (allowed_intervals.includes(msg.interval)) {\n    return [msg, null];\n}\n\nmsg.payload = 'Intervalo não permitido.';\n\nreturn [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 335,
        "wires": [
            [
                "ddeb66f0f282da2c"
            ],
            [
                "4e293f940e64d152"
            ]
        ]
    },
    {
        "id": "ddeb66f0f282da2c",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Define thresholds",
        "func": "const interval = msg.interval;\n\nconst threshold = new Date();\nthreshold.setSeconds(0);\nthreshold.setMilliseconds(0);\n\nif (interval > 60) {\n    threshold.setMinutes(0);\n    \n    if (interval > 1440) {\n        const hour = threshold.getHours();\n        \n        if (hour > 18) { // Hour between 18:01 and 23:59\n            threshold.setHours(18);\n        } else if (hour > 6) { // Hour between 06:01 and 17:59\n            threshold.setHours(6);\n        } else if (hour < 6) { // Hour between 00:00 and 05:59\n            threshold.setDate(threshold.getDate()-1);\n            threshold.setHours(18);\n        }\n    }\n}\n\nmsg.threshold = threshold;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 314,
        "wires": [
            [
                "1a6d28956a0d6589"
            ]
        ]
    },
    {
        "id": "a59199192f78dcc7",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Parse request body",
        "func": "msg.device_name = msg.payload.device_name;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 115,
        "wires": [
            [
                "659446935b848402"
            ]
        ]
    },
    {
        "id": "8d3e52ed971b346e",
        "type": "debug",
        "z": "7bfe80d199363eac",
        "name": "[EXIT 1] Merge dataset of last 1 hour",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 316,
        "wires": []
    },
    {
        "id": "0b5d0e0c0b5c98b1",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Group data",
        "func": "const dataset   = msg.payload;\nconst threshold = msg.threshold;\nconst n_groups  = msg.n_groups;\nconst hop       = msg.hop;\nconst interval  = msg.interval;\n\n// Create groups\n\nlet i;\nlet groups = [];\n\nfor (i = n_groups; i > 0; i--) {\n    const timestamp = new Date(threshold - hop * i);\n    const measures  = [];\n    \n    groups.push({ timestamp, measures, records: 0 });\n}\n\n// Group data\n\ni = 1;\n\ndataset.forEach(data => {\n    const timestamp = new Date(data.insertion_time);\n    \n    for (i; i < groups.length && timestamp > groups[i].timestamp; i++);\n\n    groups[i-1].measures.push(data);\n    groups[i-1].records += data.num_registries;\n});\n\n// Sum values\n\nconst min = dataset => Math.min(...dataset) !==  Infinity ? Math.min(...dataset) : 0;\nconst max = dataset => Math.max(...dataset) !== -Infinity ? Math.max(...dataset) : 0;\nconst avg = dataset => (dataset.reduce((acc, cur) => acc + cur, 0) / dataset.length) || 0;\n\ngroups = groups.map(group => {\n    voltage_min   = min(group.measures.map(data => data.voltage_min));\n    voltage_max   = max(group.measures.map(data => data.voltage_max));\n    voltage_avg   = Math.round(avg(group.measures.map(data => data.voltage_avg)));\n    current_min   = min(group.measures.map(data => data.current_min)).toFixed(2);\n    current_max   = max(group.measures.map(data => data.current_max)).toFixed(2);\n    current_avg   = parseFloat((avg(group.measures.map(data => data.current_avg))).toFixed(2));\n    lightness_min = min(group.measures.map(data => data.lightness_min));\n    lightness_max = max(group.measures.map(data => data.lightness_max));\n    lightness_avg = Math.round(avg(group.measures.map(data => data.lightness_avg)));\n    power_min     = min(group.measures.map(data => data.power_min));\n    power_max     = max(group.measures.map(data => data.power_max));\n    power_avg     = Math.round(avg(group.measures.map(data => data.power_avg)));\n    power_expend  = group.measures.reduce((acc, cur) => acc + cur.power_expend, 0);\n    \n    group.measures = {\n        voltage_min,\n        voltage_max,\n        voltage_avg,\n        current_min,\n        current_max,\n        current_avg,\n        lightness_min,\n        lightness_max,\n        lightness_avg,\n        power_min,\n        power_max,\n        power_avg,\n        power_expend\n    }\n    \n    return group;\n});\n\nmsg.dataset = groups;\nmsg.hop     = hop;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 478,
        "wires": [
            [
                "d998e00625e40a86"
            ]
        ]
    },
    {
        "id": "5f90a25a42bb5326",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Create labels",
        "func": "function format_date(timestamp, interval) {\n    const hour = `0${timestamp.getHours()}`.slice(-2);\n    const min  = `0${timestamp.getMinutes()}`.slice(-2);\n    \n    if (interval === 60) {\n        return `${hour}:${min}`;\n    } else {\n        const day  = `0${timestamp.getDate()}`.slice(-2);\n        const mon  = `0${timestamp.getMonth()+1}`.slice(-2);\n        \n        return `${hour}:${min} ${day}/${mon}`;\n    }\n}\n\nconst interval = msg.interval;\nconst hop      = msg.hop;\n\nlet dataset = msg.dataset;\n\ndataset = dataset.map((data, i) => {\n    const timestamp = data.timestamp;\n    \n    const begin = format_date(timestamp, interval);\n    \n    if (interval === 60) {\n        data.label = `${begin} (Número de Registros: ${data.records})`;\n    } else {\n        timestamp.setTime(timestamp.getTime() + hop);\n        const final = format_date(timestamp, interval);\n        \n        data.label = `${begin} à ${final} (Número de Registros: ${data.records})`;\n    }\n    \n    delete data.timestamp;\n    \n    return data;\n});\n\nmsg.dataset = dataset;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 555,
        "wires": [
            [
                "3d4b27a94f96d759"
            ]
        ]
    },
    {
        "id": "3d4b27a94f96d759",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Prepare response",
        "func": "const dataset  = msg.dataset;\nconst interval = msg.interval;\n\nconst labels = dataset.map(data => data.label);\n\nlet values;\n\nif (interval === 60) {\n    values = {\n        voltage:   dataset.map(data => data.measures.voltage),\n        current:   dataset.map(data => data.measures.current),\n        lightness: dataset.map(data => data.measures.lightness),\n        power:     dataset.map(data => data.measures.power)\n    }\n} else {\n    values = {\n        voltage: {\n            min: dataset.map(data => data.measures.voltage_min),\n            max: dataset.map(data => data.measures.voltage_max),\n            avg: dataset.map(data => data.measures.voltage_avg)\n        },\n        current: {\n            min: dataset.map(data => data.measures.current_min),\n            max: dataset.map(data => data.measures.current_max),\n            avg: dataset.map(data => data.measures.current_avg)       \n        },\n        lightness: {\n            min: dataset.map(data => data.measures.lightness_min),\n            max: dataset.map(data => data.measures.lightness_max),\n            avg: dataset.map(data => data.measures.lightness_avg)      \n        },\n        power: {\n            min: dataset.map(data => data.measures.power_min),\n            max: dataset.map(data => data.measures.power_max),\n            avg: dataset.map(data => data.measures.power_avg)          \n        },\n        power_expend: dataset.map((data, i) => {\n            const value    = data.measures.power_expend;\n            const sum_prev = dataset.slice(0, i).reduce((acc, cur) => acc + cur.measures.power_expend, 0);\n    \n            return (value + sum_prev).toFixed(2);\n        })\n    }\n}\n\nmsg.payload = { labels, values };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 555,
        "wires": [
            [
                "dc71772a94af1a6d",
                "47e86d41591c2ef2"
            ]
        ]
    },
    {
        "id": "321102acad131081",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Get current minute",
        "func": "const timestamp = msg.timestamp;\nconst date      = new Date(timestamp);\n\nmsg.payload = date.getMinutes();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 115,
        "wires": [
            [
                "19d3181cd080c2b0"
            ]
        ]
    },
    {
        "id": "19d3181cd080c2b0",
        "type": "switch",
        "z": "7bfe80d199363eac",
        "name": "Execute flow?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 660,
        "y": 115,
        "wires": [
            [
                "595d6b6ee38f20b2"
            ]
        ]
    },
    {
        "id": "9e05e185a3257074",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set query",
        "func": "// Get data from current month\n\nfunction format_date (timestamp) {\n    const year = timestamp.getFullYear();\n    const mon  = `0${timestamp.getMonth()+1}`.slice(-2);\n    const day  = `0${timestamp.getDate()}`.slice(-2);\n    const hour = `0${timestamp.getHours()}`.slice(-2);\n    const min  = `0${timestamp.getMinutes()}`.slice(-2);\n    const sec  = `0${timestamp.getSeconds()}`.slice(-2);\n    \n    return `${year}-${mon}-${day} ${hour}:${min}:${sec}`;\n}\n\nconst threshold   = msg.threshold;\nconst device_name = msg.device_name;\n\nconst end = format_date(threshold);\n\nlet begin = new Date(threshold);\nbegin.setDate(1);\nbegin = format_date(begin);\n\nmsg.payload = `SELECT SDI.VOLTAGE_MIN, SDI.VOLTAGE_MAX, SDI.VOLTAGE_AVG, SDI.CURRENT_MIN, SDI.CURRENT_MAX, SDI.CURRENT_AVG, SDI.LIGHTNESS_MIN, SDI.LIGHTNESS_MAX, SDI.LIGHTNESS_AVG, SDI.POWER_MIN, SDI.POWER_MAX, SDI.POWER_AVG, SDI.POWER_EXPEND, SDI.NUM_REGISTRIES, SDI.INSERTION_TIME\n               FROM SENSORS_DATA_INTERVAL AS SDI \n               JOIN DEVICES AS D ON SDI.DEVICE_ID = D.ID\n               WHERE D.NAME = '${device_name}'\n               AND (SDI.INSERTION_TIME AT TIME ZONE 'CST') > (TO_TIMESTAMP('${begin}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST') \n               AND (SDI.INSERTION_TIME AT TIME ZONE 'CST') <= (TO_TIMESTAMP('${end}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST')\n               ORDER BY SDI.INSERTION_TIME`;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1019.75,
        "y": 352.25,
        "wires": [
            [
                "6ec488a047717083"
            ]
        ]
    },
    {
        "id": "6cf164c9f164c150",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set n_groups and hop",
        "func": "const interval = msg.interval;\n\nlet n_groups;\nlet hop;\n\nswitch (interval) {\n    case 1440:\n        n_groups = 24;\n        hop = 1000 * 60 * 60 * 1; // 1 hour (millseconds * seconds * minutes * hours)\n        break;\n    case 10080:\n        n_groups = 14;\n        hop = 1000 * 60 * 60 * 12; // 12 hours\n        break;\n    case 44640:\n        n_groups = (new Date(msg.threshold)).getDate() * 2 - 1;\n        hop = 1000 * 60 * 60 * 12; // 12 hours\n        break;\n}\n\nmsg.n_groups = n_groups;\nmsg.hop      = hop;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 478,
        "wires": [
            [
                "0b5d0e0c0b5c98b1"
            ]
        ]
    },
    {
        "id": "4e293f940e64d152",
        "type": "http response",
        "z": "7f5557aca01f4737",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 620,
        "y": 357,
        "wires": []
    },
    {
        "id": "12e3a1e4cfa30cb1",
        "type": "http in",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "url": "/devices/info/byDevice",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 116,
        "wires": [
            [
                "2116903aa8e9d3cb"
            ]
        ]
    },
    {
        "id": "359f6bc0088d38e8",
        "type": "comment",
        "z": "4a674aaa9e667dd6",
        "name": "########## Get informations of a device",
        "info": "",
        "x": 200,
        "y": 55,
        "wires": []
    },
    {
        "id": "b6c255d661228eb9",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "env": [],
        "x": 920,
        "y": 115,
        "wires": [
            [
                "2a5cf022f2e39e0b"
            ]
        ]
    },
    {
        "id": "09d4870160f6b21e",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Set query",
        "func": "const endpoint = msg.endpoint;\nconst params = msg.params;\n\nmsg.payload = `SELECT D.ID, D.NAME, D.COORDINATES, D.STREET, Z.ZONE, DI.DISTRICT, D.INTERVAL, D.STATUS\n               FROM DEVICES AS D\n               JOIN DISTRICTS AS DI ON D.DISTRICT_ID = DI.ID\n               JOIN ZONES AS Z ON DI.ZONE_ID = Z.ID`;\n               \nif (endpoint === 'byDevice') {\n    if (params.device_name !== '') {\n        msg.payload += ` WHERE D.NAME = '${params.device_name}'`;\n    } else {\n        msg.payload += ` WHERE D.ID = '${params.device_id}'`;\n    }\n} else if (endpoint === 'byLocation') {\n    msg.payload += ` WHERE Z.ZONE = '${params.zone}' AND DI.DISTRICT = '${params.district}'`;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 115,
        "wires": [
            [
                "b6c255d661228eb9"
            ]
        ]
    },
    {
        "id": "5e01cf1a6a9c08e8",
        "type": "http response",
        "z": "4a674aaa9e667dd6",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 1240,
        "y": 115,
        "wires": []
    },
    {
        "id": "b6232749331caf9b",
        "type": "http in",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "url": "/devices/info/locations",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 976,
        "wires": [
            [
                "c25aa9a97958c4e6"
            ]
        ]
    },
    {
        "id": "b5500c0de884707c",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "env": [],
        "x": 740,
        "y": 976,
        "wires": [
            [
                "86ba935683dc8e83"
            ]
        ]
    },
    {
        "id": "06c4b1f1c64bcda3",
        "type": "http response",
        "z": "4a674aaa9e667dd6",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 1060,
        "y": 976,
        "wires": []
    },
    {
        "id": "3f76da596363637a",
        "type": "debug",
        "z": "4a674aaa9e667dd6",
        "name": "[EXIT] Get geographic info",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 976,
        "wires": []
    },
    {
        "id": "bb96314b45690cfe",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Search for zones",
        "func": "msg.type = msg.payload.type;\n\nmsg.payload = `SELECT ZONE FROM ZONES ORDER BY ZONE`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 955,
        "wires": [
            [
                "b5500c0de884707c"
            ]
        ]
    },
    {
        "id": "86ba935683dc8e83",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Parse result",
        "func": "const rows = msg.payload;\nconst type = msg.type;\n\nmsg.payload = rows.map(row => row[type]);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 976,
        "wires": [
            [
                "3f76da596363637a",
                "06c4b1f1c64bcda3"
            ]
        ]
    },
    {
        "id": "c25aa9a97958c4e6",
        "type": "switch",
        "z": "4a674aaa9e667dd6",
        "name": "Search type",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "zone",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "district",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 976,
        "wires": [
            [
                "bb96314b45690cfe"
            ],
            [
                "55e3cd0f4e73b20b"
            ]
        ]
    },
    {
        "id": "55e3cd0f4e73b20b",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Search for districts",
        "func": "const type = msg.payload.type;\nconst zone = msg.payload.zone;\n\nmsg.payload = `SELECT D.DISTRICT\n               FROM DISTRICTS AS D\n               JOIN ZONES AS Z ON D.ZONE_ID = Z.ID\n               WHERE Z.ZONE = '${zone}'\n               ORDER BY D.DISTRICT`;\n\nmsg.type = type;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 998,
        "wires": [
            [
                "b5500c0de884707c"
            ]
        ]
    },
    {
        "id": "60e6d0d8edb94b2f",
        "type": "http in",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "url": "/devices/info",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 332,
        "wires": [
            [
                "0ff29a6d6ef0912d"
            ]
        ]
    },
    {
        "id": "0ff29a6d6ef0912d",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Search for device",
        "func": "const device_info = msg.payload.params;\n\nmsg.payload = `SELECT COUNT(*) \n               FROM DEVICES \n               WHERE NAME = '${device_info.name}'`;\n               \nmsg.device_info = device_info;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 332,
        "wires": [
            [
                "3e0f2d19e87fc036"
            ]
        ]
    },
    {
        "id": "3e0f2d19e87fc036",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "env": [],
        "x": 500,
        "y": 332,
        "wires": [
            [
                "cd9beedcf7c41e7a"
            ]
        ]
    },
    {
        "id": "fbc2757470ae0533",
        "type": "debug",
        "z": "4a674aaa9e667dd6",
        "name": "[EXIT 1] Insert a new device",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 353,
        "wires": []
    },
    {
        "id": "cd9beedcf7c41e7a",
        "type": "switch",
        "z": "4a674aaa9e667dd6",
        "name": "Found device?",
        "property": "payload[0].count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 660,
        "y": 332,
        "wires": [
            [
                "354d74e276ba97cd"
            ],
            [
                "283bdf50951c97cd"
            ]
        ]
    },
    {
        "id": "283bdf50951c97cd",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Prepare response",
        "func": "msg.payload = 'Já existe um dispositivo cadastrado com o mesmo nome.';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 353,
        "wires": [
            [
                "45059aa775477247",
                "fbc2757470ae0533"
            ]
        ]
    },
    {
        "id": "45059aa775477247",
        "type": "http response",
        "z": "4a674aaa9e667dd6",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 1060,
        "y": 353,
        "wires": []
    },
    {
        "id": "1dd4dac7de48fd07",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Insert device",
        "func": "const device = msg.device_info;\n\nconst name        = device.name;\nconst coordinates = device.coordinates;\nconst street      = device.street;\nconst district    = device.district;\nconst interval    = device.interval;\nconst status      = device.status === 'OPERACIONAL' ? true : false;\n\nmsg.payload = `INSERT\n               INTO DEVICES (NAME, COORDINATES, STREET, DISTRICT_ID, INTERVAL, STATUS)\n               VALUES ('${name}', '${coordinates}', '${street}', (SELECT ID FROM DISTRICTS WHERE DISTRICT = '${district}'), ${interval}, ${status})\n               RETURNING ID`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 436,
        "wires": [
            [
                "583ec79d0b612605"
            ]
        ]
    },
    {
        "id": "ea840e0e78c36329",
        "type": "debug",
        "z": "4a674aaa9e667dd6",
        "name": "[EXIT 2] Insert a new device",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 436,
        "wires": []
    },
    {
        "id": "583ec79d0b612605",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "env": [],
        "x": 320,
        "y": 436,
        "wires": [
            [
                "7ace7937a50e561f"
            ]
        ]
    },
    {
        "id": "7ace7937a50e561f",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Prepare response",
        "func": "const device_id = msg.payload[0].id;\n\nmsg.payload = `Dispositivo inserido com sucesso com o ID ${device_id}.`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 436,
        "wires": [
            [
                "ea840e0e78c36329",
                "4ea1758dc69fc48a"
            ]
        ]
    },
    {
        "id": "4ea1758dc69fc48a",
        "type": "http response",
        "z": "4a674aaa9e667dd6",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 680,
        "y": 436,
        "wires": []
    },
    {
        "id": "354d74e276ba97cd",
        "type": "link out",
        "z": "4a674aaa9e667dd6",
        "name": "OUT (1) Insert a new device",
        "links": [
            "42357eb93017ae22"
        ],
        "x": 795,
        "y": 316,
        "wires": []
    },
    {
        "id": "42357eb93017ae22",
        "type": "link in",
        "z": "4a674aaa9e667dd6",
        "name": "IN (1) Insert a new device",
        "links": [
            "354d74e276ba97cd"
        ],
        "x": 55,
        "y": 436,
        "wires": [
            [
                "1dd4dac7de48fd07"
            ]
        ]
    },
    {
        "id": "2baad984afc85eae",
        "type": "mqtt out",
        "z": "e27b09cd4ecd866a",
        "name": "Sensors Input Local",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "df4bdf4be0d4150f",
        "x": 1120,
        "y": 216,
        "wires": []
    },
    {
        "id": "a27f823e0f59d886",
        "type": "http in",
        "z": "e27b09cd4ecd866a",
        "name": "",
        "url": "/devices/actions/on-off",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 151,
        "wires": [
            [
                "49692ea51cb1817f"
            ]
        ]
    },
    {
        "id": "2a89e07262bccc41",
        "type": "function",
        "z": "e27b09cd4ecd866a",
        "name": "Parse request body",
        "func": "const device_id = msg.payload[0].id;\nconst action    = msg.action;\n\nmsg.topic = `pgc_ufabc/devices/actions/change_state/${device_id}`;\nmsg.payload = action;\n\nmsg.device_id = device_id;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 151,
        "wires": [
            [
                "100673d3690931d5",
                "9daeb4c690348a8b"
            ]
        ]
    },
    {
        "id": "c27ef97c2e856f6f",
        "type": "http response",
        "z": "e27b09cd4ecd866a",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 1080,
        "y": 116,
        "wires": []
    },
    {
        "id": "100673d3690931d5",
        "type": "function",
        "z": "e27b09cd4ecd866a",
        "name": "Prepare response",
        "func": "msg.payload = 'OK';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 116,
        "wires": [
            [
                "76d3eecb7c2eb2bc",
                "c27ef97c2e856f6f"
            ]
        ]
    },
    {
        "id": "158d45c1123bc5e5",
        "type": "comment",
        "z": "e27b09cd4ecd866a",
        "name": "########## Turn on/off lights remotely",
        "info": "",
        "x": 190,
        "y": 56,
        "wires": []
    },
    {
        "id": "49692ea51cb1817f",
        "type": "function",
        "z": "e27b09cd4ecd866a",
        "name": "Get device id",
        "func": "const action      = msg.payload.action;\nconst device_name = msg.payload.device_name;\n\nmsg.payload = `SELECT ID FROM DEVICES WHERE NAME = '${device_name}'`;\n\nmsg.action      = action;\nmsg.device_name = device_name;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 151,
        "wires": [
            [
                "394e42416b908028"
            ]
        ]
    },
    {
        "id": "394e42416b908028",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "e27b09cd4ecd866a",
        "name": "",
        "env": [],
        "x": 500,
        "y": 151,
        "wires": [
            [
                "2a89e07262bccc41"
            ]
        ]
    },
    {
        "id": "76d3eecb7c2eb2bc",
        "type": "debug",
        "z": "e27b09cd4ecd866a",
        "name": "[EXIT] Turn on/off lights remotely",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 116,
        "wires": []
    },
    {
        "id": "ef6371934f5fd5b0",
        "type": "catch",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 1416,
        "wires": [
            [
                "d1e16d213602f942"
            ]
        ]
    },
    {
        "id": "9d48e59a4de836b7",
        "type": "comment",
        "z": "4a674aaa9e667dd6",
        "name": "########## Exceptions Treatment",
        "info": "",
        "x": 180,
        "y": 1355,
        "wires": []
    },
    {
        "id": "ae3acdea4e84f4b4",
        "type": "debug",
        "z": "4a674aaa9e667dd6",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 1416,
        "wires": []
    },
    {
        "id": "8213a585916b7e9c",
        "type": "catch",
        "z": "e27b09cd4ecd866a",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 696,
        "wires": [
            [
                "54d530db04013318"
            ]
        ]
    },
    {
        "id": "00bcdd2e25f2fd75",
        "type": "comment",
        "z": "e27b09cd4ecd866a",
        "name": "########## Exceptions Treatment",
        "info": "",
        "x": 180,
        "y": 636,
        "wires": []
    },
    {
        "id": "783d881f4f37ed3b",
        "type": "debug",
        "z": "e27b09cd4ecd866a",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 696,
        "wires": []
    },
    {
        "id": "c6a52803fbced1d1",
        "type": "comment",
        "z": "7f5557aca01f4737",
        "name": "########## Get last measures of a device",
        "info": "",
        "x": 200,
        "y": 56,
        "wires": []
    },
    {
        "id": "44f5978e0ca7c32c",
        "type": "comment",
        "z": "7f5557aca01f4737",
        "name": "########## Get measures of a device in a specific interval",
        "info": "",
        "x": 250,
        "y": 216,
        "wires": []
    },
    {
        "id": "11d5b3d462d5d92e",
        "type": "comment",
        "z": "4a674aaa9e667dd6",
        "name": "########## Insert a new device",
        "info": "",
        "x": 170,
        "y": 255,
        "wires": []
    },
    {
        "id": "8503a624b3fd578e",
        "type": "comment",
        "z": "4a674aaa9e667dd6",
        "name": "########## Get geographic info",
        "info": "",
        "x": 170,
        "y": 895,
        "wires": []
    },
    {
        "id": "d1e16d213602f942",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Prepare response",
        "func": "msg.payload = 'Houve uma falha durante o processamento da sua requisição.';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1416,
        "wires": [
            [
                "ae3acdea4e84f4b4",
                "55abf6149b998fb7"
            ]
        ]
    },
    {
        "id": "55abf6149b998fb7",
        "type": "http response",
        "z": "4a674aaa9e667dd6",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 460,
        "y": 1416,
        "wires": []
    },
    {
        "id": "a961e1ec20451721",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Prepare response",
        "func": "msg.payload = 'Houve uma falha durante o processamento da sua requisição. Por favor, tente mais tarde.';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 776,
        "wires": [
            [
                "1705d89c23ac2369",
                "1410340333327f6f"
            ]
        ]
    },
    {
        "id": "1410340333327f6f",
        "type": "http response",
        "z": "7f5557aca01f4737",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 460,
        "y": 776,
        "wires": []
    },
    {
        "id": "54d530db04013318",
        "type": "function",
        "z": "e27b09cd4ecd866a",
        "name": "Prepare response",
        "func": "msg.payload = 'Houve uma falha durante o processamento da sua requisição. Por favor, tente mais tarde.';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 696,
        "wires": [
            [
                "783d881f4f37ed3b",
                "577586bde1b10999"
            ]
        ]
    },
    {
        "id": "577586bde1b10999",
        "type": "http response",
        "z": "e27b09cd4ecd866a",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 460,
        "y": 696,
        "wires": []
    },
    {
        "id": "3f850bd264ddaf01",
        "type": "http in",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "url": "/devices/info",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 616,
        "wires": [
            [
                "4b16be6b6b2b1e3b"
            ]
        ]
    },
    {
        "id": "1e992e859189a567",
        "type": "comment",
        "z": "4a674aaa9e667dd6",
        "name": "########## Update a device",
        "info": "",
        "x": 160,
        "y": 536,
        "wires": []
    },
    {
        "id": "4b16be6b6b2b1e3b",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Search for device",
        "func": "const device_info = msg.payload.params;\n\nmsg.payload = `SELECT COUNT(*) \n               FROM DEVICES \n               WHERE NAME = '${device_info.name}'`;\n               \nmsg.device_info = device_info;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 616,
        "wires": [
            [
                "936642715f14669a"
            ]
        ]
    },
    {
        "id": "936642715f14669a",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "env": [],
        "x": 480,
        "y": 616,
        "wires": [
            [
                "122724bf96a147d7"
            ]
        ]
    },
    {
        "id": "122724bf96a147d7",
        "type": "switch",
        "z": "4a674aaa9e667dd6",
        "name": "Found device?",
        "property": "payload[0].count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 640,
        "y": 616,
        "wires": [
            [
                "3fd0be4cc0f3bdbc"
            ],
            [
                "b4e2da8341c30780"
            ]
        ]
    },
    {
        "id": "2748f59101ff8cd3",
        "type": "debug",
        "z": "4a674aaa9e667dd6",
        "name": "[EXIT 1] Update a device",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 637,
        "wires": []
    },
    {
        "id": "b4e2da8341c30780",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Prepare response",
        "func": "msg.payload = 'Não é possível a edição de um dispositivo que não encontra-se cadastrado.';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 637,
        "wires": [
            [
                "2101839e3edcbd88",
                "2748f59101ff8cd3"
            ]
        ]
    },
    {
        "id": "2101839e3edcbd88",
        "type": "http response",
        "z": "4a674aaa9e667dd6",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 1040,
        "y": 637,
        "wires": []
    },
    {
        "id": "3fd0be4cc0f3bdbc",
        "type": "link out",
        "z": "4a674aaa9e667dd6",
        "name": "OUT (1) Update a device",
        "links": [
            "bca9421ea3162cbe"
        ],
        "x": 775,
        "y": 594,
        "wires": []
    },
    {
        "id": "7d354790d19477dd",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Update device",
        "func": "const device = msg.device_info;\n\nconst name        = device.name;\nconst coordinates = device.coordinates;\nconst street      = device.street;\nconst district    = device.district;\nconst interval    = device.interval;\nconst status      = device.status === 'OPERACIONAL' ? true : false;\n\nmsg.payload = `UPDATE DEVICES\n               SET COORDINATES = '${coordinates}',\n                   STREET = '${street}',\n                   DISTRICT_ID = (SELECT ID FROM DISTRICTS WHERE DISTRICT = '${district}'),\n                   INTERVAL = ${interval},\n                   STATUS = ${status},\n                   LAST_UPDATE_TIME = CURRENT_TIMESTAMP\n               WHERE NAME = '${name}'`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 756,
        "wires": [
            [
                "a7a9fdad92d0bee0"
            ]
        ]
    },
    {
        "id": "bca9421ea3162cbe",
        "type": "link in",
        "z": "4a674aaa9e667dd6",
        "name": "IN (1) Update a device",
        "links": [
            "3fd0be4cc0f3bdbc"
        ],
        "x": 55,
        "y": 756,
        "wires": [
            [
                "7d354790d19477dd"
            ]
        ]
    },
    {
        "id": "a7a9fdad92d0bee0",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "env": [],
        "x": 340,
        "y": 756,
        "wires": [
            [
                "5e444f6f03c677da"
            ]
        ]
    },
    {
        "id": "f1ec79581a0d0359",
        "type": "debug",
        "z": "4a674aaa9e667dd6",
        "name": "[EXIT 2] Update a device",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 796,
        "wires": []
    },
    {
        "id": "5e444f6f03c677da",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Prepare response",
        "func": "msg.payload = 'Dispositivo atualizado com sucesso.';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 756,
        "wires": [
            [
                "f1ec79581a0d0359",
                "428c91e378be6650",
                "f9f8c81bf4bd0380"
            ]
        ]
    },
    {
        "id": "f9f8c81bf4bd0380",
        "type": "http response",
        "z": "4a674aaa9e667dd6",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 720,
        "y": 756,
        "wires": []
    },
    {
        "id": "428c91e378be6650",
        "type": "link out",
        "z": "4a674aaa9e667dd6",
        "name": "OUT (2) Update a device",
        "links": [
            "e94d04fcb7ddddd9"
        ],
        "x": 655,
        "y": 716,
        "wires": []
    },
    {
        "id": "e94d04fcb7ddddd9",
        "type": "link in",
        "z": "e27b09cd4ecd866a",
        "name": "BEGIN Update messages interval",
        "links": [
            "428c91e378be6650"
        ],
        "x": 55,
        "y": 442,
        "wires": [
            [
                "d6c15f789150113c"
            ]
        ]
    },
    {
        "id": "e38621aa38a6a1c2",
        "type": "comment",
        "z": "e27b09cd4ecd866a",
        "name": "########## Update messages interval",
        "info": "",
        "x": 190,
        "y": 316,
        "wires": []
    },
    {
        "id": "d6c15f789150113c",
        "type": "function",
        "z": "e27b09cd4ecd866a",
        "name": "Get device info",
        "func": "const device_name = msg.device_info.name;\n\nmsg.payload = `SELECT ID, INTERVAL FROM DEVICES WHERE NAME = '${device_name}'`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 442,
        "wires": [
            [
                "e3504661b768ac18"
            ]
        ]
    },
    {
        "id": "e3504661b768ac18",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "e27b09cd4ecd866a",
        "name": "",
        "env": [],
        "x": 340,
        "y": 442,
        "wires": [
            [
                "4f29d941c74707a5"
            ]
        ]
    },
    {
        "id": "4f29d941c74707a5",
        "type": "function",
        "z": "e27b09cd4ecd866a",
        "name": "Prepare message",
        "func": "const device_id = msg.payload[0].id;\nconst interval  = msg.payload[0].interval;\n\nmsg.topic = `pgc_ufabc/devices/actions/change_interval/${device_id}`;\nmsg.payload = interval;\n\nmsg.device_id = device_id;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 442,
        "wires": [
            [
                "8424f1c292375f5a",
                "b644f813a9b949c7"
            ]
        ]
    },
    {
        "id": "4bc37b961a472284",
        "type": "mqtt out",
        "z": "e27b09cd4ecd866a",
        "name": "Sensors Input Local",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "df4bdf4be0d4150f",
        "x": 960,
        "y": 429,
        "wires": []
    },
    {
        "id": "b644f813a9b949c7",
        "type": "debug",
        "z": "e27b09cd4ecd866a",
        "name": "[EXIT] Update messages interval",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 482,
        "wires": []
    },
    {
        "id": "ecc7ac797f1dc40c",
        "type": "http in",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "url": "/devices/info/byLocation",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 156,
        "wires": [
            [
                "2116903aa8e9d3cb"
            ]
        ]
    },
    {
        "id": "2116903aa8e9d3cb",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Parse request body",
        "func": "msg.endpoint = msg.req.url.match(/\\/devices\\/info\\/(\\S+)\\?/)[1];\n\nmsg.params = {};\n\nif (msg.endpoint === 'byDevice') {\n    msg.params.device_id = msg.payload.device_id || '';\n    msg.params.device_name = msg.payload.device_name || '';\n    \n    msg.payload = msg.params.device_id !== '' || msg.params.device_name !== '';\n} else if (msg.endpoint === 'byLocation') {\n    msg.params.zone = msg.payload.zone || '';\n    msg.params.district = msg.payload.district || '';\n    \n    msg.payload = msg.params.zone !== '' && msg.params.district !== '';\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 136,
        "wires": [
            [
                "2138915b86627862"
            ]
        ]
    },
    {
        "id": "2138915b86627862",
        "type": "switch",
        "z": "4a674aaa9e667dd6",
        "name": "Has all params?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 136,
        "wires": [
            [
                "09d4870160f6b21e"
            ],
            [
                "61e85828ad1e2fa0"
            ]
        ]
    },
    {
        "id": "61e85828ad1e2fa0",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Prepare response",
        "func": "msg.payload = 'Parâmetros incompletos.';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 158,
        "wires": [
            [
                "179903881b85ff1d",
                "2de0d96376549d84"
            ]
        ]
    },
    {
        "id": "179903881b85ff1d",
        "type": "http response",
        "z": "4a674aaa9e667dd6",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 1000,
        "y": 158,
        "wires": []
    },
    {
        "id": "cb6bcc25b4569647",
        "type": "debug",
        "z": "4a674aaa9e667dd6",
        "name": "[EXIT 1] Get informations of a device",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1490,
        "y": 115,
        "wires": []
    },
    {
        "id": "2de0d96376549d84",
        "type": "debug",
        "z": "4a674aaa9e667dd6",
        "name": "[EXIT 2] Get informations of a device",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 158,
        "wires": []
    },
    {
        "id": "2a5cf022f2e39e0b",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Parse result",
        "func": "let devices = msg.payload;\n\ndevices = devices.map(device => {\n    device.status = device.status ? 'OPERACIONAL' : 'NÃO OPERACIONAL';\n    return device;\n});\n\nmsg.payload = devices;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 115,
        "wires": [
            [
                "cb6bcc25b4569647",
                "5e01cf1a6a9c08e8"
            ]
        ]
    },
    {
        "id": "18495940653614df",
        "type": "comment",
        "z": "a716829fd201f4fd",
        "name": "########## Search for alarms in devices",
        "info": "",
        "x": 200,
        "y": 56,
        "wires": []
    },
    {
        "id": "37b2f5a492430da8",
        "type": "inject",
        "z": "a716829fd201f4fd",
        "name": "Every 10 minutes",
        "props": [
            {
                "p": "interval",
                "v": "10",
                "vt": "num"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "300",
        "topic": "",
        "payloadType": "str",
        "x": 155,
        "y": 116,
        "wires": [
            [
                "4b2a8433fa7736ec"
            ]
        ]
    },
    {
        "id": "d1975b068b43eea0",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Get devices",
        "func": "msg.payload = 'SELECT ID, STATUS FROM DEVICES ORDER BY ID ASC';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 196,
        "wires": [
            [
                "f36fc7a2fd7bde3d"
            ]
        ]
    },
    {
        "id": "f36fc7a2fd7bde3d",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "a716829fd201f4fd",
        "name": "",
        "x": 320,
        "y": 196,
        "wires": [
            [
                "9f98e10fd5d8cbf4"
            ]
        ]
    },
    {
        "id": "2521dfd35a42d570",
        "type": "split",
        "z": "a716829fd201f4fd",
        "name": "Split devices",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 330,
        "y": 355,
        "wires": [
            [
                "5a96f9382e52a5bb"
            ]
        ]
    },
    {
        "id": "4b2a8433fa7736ec",
        "type": "link out",
        "z": "a716829fd201f4fd",
        "name": "OUT (1) Search for alarms in devices",
        "links": [
            "514bfb4539d7fcbc"
        ],
        "x": 295,
        "y": 116,
        "wires": []
    },
    {
        "id": "514bfb4539d7fcbc",
        "type": "link in",
        "z": "a716829fd201f4fd",
        "name": "IN (1) Search for alarms in devices",
        "links": [
            "4b2a8433fa7736ec"
        ],
        "x": 55,
        "y": 196,
        "wires": [
            [
                "d1975b068b43eea0"
            ]
        ]
    },
    {
        "id": "9f98e10fd5d8cbf4",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Get measures from devices",
        "func": "msg.devices = msg.payload;\n\nmsg.payload = `SELECT DEVICE_ID, VOLTAGE, CURRENT, LIGHTNESS, RELE_STATE, INSERTION_TIME\n               FROM SENSORS_DATA_REAL_TIME\n               WHERE (INSERTION_TIME AT TIME ZONE 'CST') > (CURRENT_TIMESTAMP AT TIME ZONE 'CST') - INTERVAL '${msg.interval} min'\n               ORDER BY DEVICE_ID ASC, INSERTION_TIME ASC`;\n               \ndelete msg.interval;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 196,
        "wires": [
            [
                "90c21e9840686283"
            ]
        ]
    },
    {
        "id": "90c21e9840686283",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "a716829fd201f4fd",
        "name": "",
        "x": 720,
        "y": 196,
        "wires": [
            [
                "bfa141f4777b4d9b"
            ]
        ]
    },
    {
        "id": "bfa141f4777b4d9b",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Parse results",
        "func": "const devices = msg.devices;\nconst measures = msg.payload;\n\nlet result = [];\n\n// Map device id by array position\ndevices.forEach(device => result[device.id-1] = { id: device.id, status: device.status, measures: [] });\n\n// Group device info and measures\nmeasures.forEach(measure => result[measure.device_id-1].measures.push(measure));\n\n// Filter undefined array positions\nresult = result.filter(device => device !== undefined);\n\nmsg.devices = result;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 196,
        "wires": [
            [
                "5a4b5eba1eec0cdb"
            ]
        ]
    },
    {
        "id": "5a4b5eba1eec0cdb",
        "type": "link out",
        "z": "a716829fd201f4fd",
        "name": "OUT (2) Search for alarms in devices",
        "links": [
            "893a79912c343403"
        ],
        "x": 975,
        "y": 196,
        "wires": []
    },
    {
        "id": "893a79912c343403",
        "type": "link in",
        "z": "a716829fd201f4fd",
        "name": "IN (2) Search for alarms in devices",
        "links": [
            "5a4b5eba1eec0cdb"
        ],
        "x": 55,
        "y": 275,
        "wires": [
            [
                "cf67aacc68164b4f"
            ]
        ]
    },
    {
        "id": "478979063431a377",
        "type": "link out",
        "z": "a716829fd201f4fd",
        "name": "OUT (3) Search for alarms in devices",
        "links": [
            "4c9496c77ae27cce"
        ],
        "x": 615,
        "y": 275,
        "wires": []
    },
    {
        "id": "4c9496c77ae27cce",
        "type": "link in",
        "z": "a716829fd201f4fd",
        "name": "IN (3) Search for alarms in devices",
        "links": [
            "478979063431a377"
        ],
        "x": 55,
        "y": 355,
        "wires": [
            [
                "37b3a4bb5c17bd3c"
            ]
        ]
    },
    {
        "id": "37b3a4bb5c17bd3c",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Prepare split",
        "func": "msg.payload = msg.devices;\n\ndelete msg.devices;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 355,
        "wires": [
            [
                "2521dfd35a42d570"
            ]
        ]
    },
    {
        "id": "5a96f9382e52a5bb",
        "type": "link out",
        "z": "a716829fd201f4fd",
        "name": "OUT (4) Search for alarms in devices",
        "links": [
            "d8251d505af5a2da"
        ],
        "x": 435,
        "y": 355,
        "wires": []
    },
    {
        "id": "d8251d505af5a2da",
        "type": "link in",
        "z": "a716829fd201f4fd",
        "name": "IN (4) Search for alarms in devices",
        "links": [
            "5a96f9382e52a5bb"
        ],
        "x": 55,
        "y": 457,
        "wires": [
            [
                "d81860da08798b7c"
            ]
        ]
    },
    {
        "id": "696d0fb157da1421",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Search for failures",
        "func": "const device = msg.payload;\nconst measures = device.measures;\nconst status = device.status;\n\nconst failures = msg.failures;\nfailures.shift();\n\nconst matches = failures.filter(failure => {\n    const measuresCheck = measures.every(measure => {\n        return msg.checkMeasures(failure.voltage, measure.voltage)\n            && msg.checkMeasures(failure.current, measure.current)\n            && msg.checkMeasures(failure.lightness, measure.lightness)\n            && msg.checkReleState(failure.rele_state, measure)\n    });\n    \n    const statusCheck = msg.checkStatus(failure.status, status);\n    \n    return measuresCheck && statusCheck;\n});\n\n\nmsg.device = device;\nmsg.device.failures = matches;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 435,
        "wires": [
            [
                "949e3ad118b2d007"
            ]
        ]
    },
    {
        "id": "af9f059a00f28668",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Define check functions",
        "func": "// If attribute value is null in failure rule, it can be ignored\n\nmsg.checkMeasures = function (failure, measure) {\n    return failure !== null ? failure === measure : true;\n}\n\nmsg.checkReleState = function (failure, measure) {\n    if (failure !== null) {\n        const value = failure.value === measure.rele_state;\n        \n        const date = new Date(measure.insertion_time);\n        const time = date.getHours() * 3600 + date.getMinutes() * 60 + date.getSeconds(); // In seconds\n        \n        const begin = failure.threshold.begin;\n        const end = failure.threshold.end;\n\n        let threshold;\n        \n        if (begin < end) {\n            threshold = time >= begin && time < end;    \n        } else {\n            threshold = time >= begin || time < end;\n        }\n        \n        return value && threshold;\n    }\n    \n    return true;\n}\n\nmsg.checkStatus = function (failure, status) {\n    return failure !== null ? failure === status : true;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 435,
        "wires": [
            [
                "696d0fb157da1421"
            ]
        ]
    },
    {
        "id": "949e3ad118b2d007",
        "type": "link out",
        "z": "a716829fd201f4fd",
        "name": "OUT (5) Search for alarms in devices",
        "links": [
            "5e5889d8cc8207b3"
        ],
        "x": 915,
        "y": 435,
        "wires": []
    },
    {
        "id": "dd9e59380195cf1b",
        "type": "comment",
        "z": "a716829fd201f4fd",
        "name": "########## Create/Update alarms",
        "info": "",
        "x": 180,
        "y": 696,
        "wires": []
    },
    {
        "id": "c4e15d35d382fe70",
        "type": "link in",
        "z": "a716829fd201f4fd",
        "name": "IN (1) Create/Update alarms",
        "links": [
            "b6c70f793086c1ba"
        ],
        "x": 55,
        "y": 778,
        "wires": [
            [
                "3effaa9a67ae8e30"
            ]
        ]
    },
    {
        "id": "d81860da08798b7c",
        "type": "switch",
        "z": "a716829fd201f4fd",
        "name": "Device collected measures in last interval?",
        "property": "payload.measures.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 270,
        "y": 457,
        "wires": [
            [
                "af9f059a00f28668"
            ],
            [
                "ac446ab6680e70d0"
            ]
        ]
    },
    {
        "id": "ac446ab6680e70d0",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Search for failures",
        "func": "msg.device = msg.payload;\nmsg.device.failures = [];\n\nif (msg.device.status) {\n    msg.device.failures.push(msg.failures[0]);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 479,
        "wires": [
            [
                "7afa5ad05baa9170"
            ]
        ]
    },
    {
        "id": "7afa5ad05baa9170",
        "type": "link out",
        "z": "a716829fd201f4fd",
        "name": "OUT (6) Search for alarms in devices",
        "links": [
            "5e5889d8cc8207b3"
        ],
        "x": 695,
        "y": 479,
        "wires": []
    },
    {
        "id": "5e5889d8cc8207b3",
        "type": "link in",
        "z": "a716829fd201f4fd",
        "name": "IN (5) Search for alarms in devices",
        "links": [
            "949e3ad118b2d007",
            "7afa5ad05baa9170"
        ],
        "x": 55,
        "y": 576,
        "wires": [
            [
                "a7cfaca3b35c39c7"
            ]
        ]
    },
    {
        "id": "a7cfaca3b35c39c7",
        "type": "switch",
        "z": "a716829fd201f4fd",
        "name": "Found alarms?",
        "property": "device.failures.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 180,
        "y": 576,
        "wires": [
            [
                "b6c70f793086c1ba"
            ],
            [
                "becfcf373fa8d8b7"
            ]
        ]
    },
    {
        "id": "b6c70f793086c1ba",
        "type": "link out",
        "z": "a716829fd201f4fd",
        "name": "OUT (7) Search for alarms in devices",
        "links": [
            "c4e15d35d382fe70",
            "349c4baee3ab3c32"
        ],
        "x": 315,
        "y": 555,
        "wires": []
    },
    {
        "id": "becfcf373fa8d8b7",
        "type": "debug",
        "z": "a716829fd201f4fd",
        "name": "[EXIT 1] Search for alarms in devices",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 597,
        "wires": []
    },
    {
        "id": "bc681d11264c5aad",
        "type": "comment",
        "z": "1ce1485ad608bc7a",
        "name": "########## Search for resolved alarms in devices",
        "info": "",
        "x": 230,
        "y": 56,
        "wires": []
    },
    {
        "id": "84dc9f59d2922e6e",
        "type": "inject",
        "z": "1ce1485ad608bc7a",
        "name": "Every 10 minutes",
        "props": [
            {
                "p": "interval",
                "v": "10",
                "vt": "num"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "600",
        "topic": "",
        "payloadType": "str",
        "x": 156,
        "y": 115,
        "wires": [
            [
                "ec1033c39f7f27f1"
            ]
        ]
    },
    {
        "id": "cd5bad6c42c19d4a",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Get devices",
        "func": "msg.payload = 'SELECT ID, STATUS FROM DEVICES ORDER BY ID ASC';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 171,
        "y": 195,
        "wires": [
            [
                "26f3ed1630dcde2b"
            ]
        ]
    },
    {
        "id": "26f3ed1630dcde2b",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "1ce1485ad608bc7a",
        "name": "",
        "x": 321,
        "y": 195,
        "wires": [
            [
                "2183ebb71f3624a5"
            ]
        ]
    },
    {
        "id": "af432404de98c6bd",
        "type": "split",
        "z": "1ce1485ad608bc7a",
        "name": "Split devices",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 331,
        "y": 354,
        "wires": [
            [
                "7113b90b7c788d2b"
            ]
        ]
    },
    {
        "id": "ec1033c39f7f27f1",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (1) Search for resolved alarms in devices",
        "links": [
            "2f44cc3e12e0aee8"
        ],
        "x": 296,
        "y": 115,
        "wires": []
    },
    {
        "id": "2f44cc3e12e0aee8",
        "type": "link in",
        "z": "1ce1485ad608bc7a",
        "name": "IN (1) Search for resolved alarms in devices",
        "links": [
            "ec1033c39f7f27f1"
        ],
        "x": 56,
        "y": 195,
        "wires": [
            [
                "cd5bad6c42c19d4a"
            ]
        ]
    },
    {
        "id": "2183ebb71f3624a5",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Get measures from devices",
        "func": "msg.devices = msg.payload;\n\nmsg.payload = `SELECT DEVICE_ID, VOLTAGE, CURRENT, LIGHTNESS, RELE_STATE, INSERTION_TIME\n               FROM SENSORS_DATA_REAL_TIME\n               WHERE (INSERTION_TIME AT TIME ZONE 'CST') > (CURRENT_TIMESTAMP AT TIME ZONE 'CST') - INTERVAL '${msg.interval} min'\n               ORDER BY DEVICE_ID ASC, INSERTION_TIME ASC`;\n               \ndelete msg.interval;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 521,
        "y": 195,
        "wires": [
            [
                "f37af9bf65800bf7"
            ]
        ]
    },
    {
        "id": "f37af9bf65800bf7",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "1ce1485ad608bc7a",
        "name": "",
        "x": 721,
        "y": 195,
        "wires": [
            [
                "9c90adade13bdeb6"
            ]
        ]
    },
    {
        "id": "9c90adade13bdeb6",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Parse results",
        "func": "const devices = msg.devices;\nconst measures = msg.payload;\n\nlet result = [];\n\n// Map device id by array position\ndevices.forEach(device => result[device.id-1] = { id: device.id, status: device.status, measures: [] });\n\n// Group device info and measures\nmeasures.forEach(measure => result[measure.device_id-1].measures.push(measure));\n\n// Filter undefined array positions\nresult = result.filter(device => device !== undefined);\n\nmsg.devices = result;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 871,
        "y": 195,
        "wires": [
            [
                "3c9e9e1e65d0d901"
            ]
        ]
    },
    {
        "id": "3c9e9e1e65d0d901",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (2) Search for resolved alarms in devices",
        "links": [
            "cf15ea460869433a"
        ],
        "x": 976,
        "y": 195,
        "wires": []
    },
    {
        "id": "cf15ea460869433a",
        "type": "link in",
        "z": "1ce1485ad608bc7a",
        "name": "IN (2) Search for resolved alarms in devices",
        "links": [
            "3c9e9e1e65d0d901"
        ],
        "x": 56,
        "y": 274,
        "wires": [
            [
                "a778e665bd2949fd"
            ]
        ]
    },
    {
        "id": "f6a2e4e634b990fa",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (3) Search for resolved alarms in devices",
        "links": [
            "0b94a133b665070e"
        ],
        "x": 616,
        "y": 274,
        "wires": []
    },
    {
        "id": "0b94a133b665070e",
        "type": "link in",
        "z": "1ce1485ad608bc7a",
        "name": "IN (3) Search for resolved alarms in devices",
        "links": [
            "f6a2e4e634b990fa"
        ],
        "x": 56,
        "y": 354,
        "wires": [
            [
                "a0ef1ebf2e534430"
            ]
        ]
    },
    {
        "id": "a0ef1ebf2e534430",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Prepare split",
        "func": "msg.payload = msg.devices;\n\ndelete msg.devices;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 171,
        "y": 354,
        "wires": [
            [
                "af432404de98c6bd"
            ]
        ]
    },
    {
        "id": "7113b90b7c788d2b",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (4) Search for resolved alarms in devices",
        "links": [
            "a0acc6aa48221e6d"
        ],
        "x": 436,
        "y": 354,
        "wires": []
    },
    {
        "id": "a0acc6aa48221e6d",
        "type": "link in",
        "z": "1ce1485ad608bc7a",
        "name": "IN (4) Search for resolved alarms in devices",
        "links": [
            "7113b90b7c788d2b"
        ],
        "x": 56,
        "y": 456,
        "wires": [
            [
                "712f89822e9704e4"
            ]
        ]
    },
    {
        "id": "e0eb4a72e78bddc5",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Search for failures",
        "func": "const device = msg.payload;\nconst measures = device.measures;\nconst status = device.status;\n\nconst failures = msg.failures;\nfailures.pop();\n\nconst matches = failures.filter(failure => {\n    const measuresCheck = measures.every(measure => {\n        return msg.checkMeasures(failure.voltage, measure.voltage)\n            && msg.checkMeasures(failure.current, measure.current)\n            && msg.checkMeasures(failure.lightness, measure.lightness)\n            && msg.checkReleState(failure.rele_state, measure)\n    });\n    \n    const statusCheck = msg.checkStatus(failure.status, status);\n    \n    return measuresCheck && statusCheck;\n});\n\nmsg.device = device;\nmsg.device.failures = matches;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 791,
        "y": 434,
        "wires": [
            [
                "91dbe620484423ae"
            ]
        ]
    },
    {
        "id": "91a2bbfa87df85bc",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Define check functions",
        "func": "// If attribute value is null in failure rule, it can be ignored\n\nmsg.checkMeasures = function (failure, measure) {\n    return failure !== null ? failure !== measure : true;\n}\n\nmsg.checkReleState = function (failure, measure) {\n    if (failure !== null) {\n        const value = failure.value !== measure.rele_state;\n        \n        const date = new Date(measure.insertion_time);\n        const time = date.getHours() * 3600 + date.getMinutes() * 60 + date.getSeconds(); // In seconds\n        \n        const begin = failure.threshold.begin;\n        const end = failure.threshold.end;\n\n        let threshold;\n        \n        if (begin < end) {\n            threshold = time >= begin && time < end;    \n        } else {\n            threshold = time >= begin || time < end;\n        }\n        \n        return (value && threshold) || !threshold;\n    }\n    \n    return true;\n}\n\nmsg.checkStatus = function (failure, status) {\n    return failure !== null ? failure === status : true;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 581,
        "y": 434,
        "wires": [
            [
                "e0eb4a72e78bddc5"
            ]
        ]
    },
    {
        "id": "91dbe620484423ae",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (5) Search for resolved alarms in devices",
        "links": [
            "8b725e75f38013b9"
        ],
        "x": 916,
        "y": 434,
        "wires": []
    },
    {
        "id": "712f89822e9704e4",
        "type": "switch",
        "z": "1ce1485ad608bc7a",
        "name": "Device collected measures in last interval?",
        "property": "payload.measures.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 271,
        "y": 456,
        "wires": [
            [
                "91a2bbfa87df85bc"
            ],
            [
                "437e5391745a7043"
            ]
        ]
    },
    {
        "id": "8b725e75f38013b9",
        "type": "link in",
        "z": "1ce1485ad608bc7a",
        "name": "IN (5) Search for resolved alarms in devices",
        "links": [
            "91dbe620484423ae",
            "142761bd553ef531"
        ],
        "x": 55,
        "y": 576,
        "wires": [
            [
                "92e4d72c9fcd39d0"
            ]
        ]
    },
    {
        "id": "92e4d72c9fcd39d0",
        "type": "switch",
        "z": "1ce1485ad608bc7a",
        "name": "Found alarms?",
        "property": "device.failures.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 180,
        "y": 576,
        "wires": [
            [
                "548c9048fafa7ef1"
            ],
            [
                "c43efe82c097e2a2"
            ]
        ]
    },
    {
        "id": "548c9048fafa7ef1",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (7) Search for resolved alarms in devices",
        "links": [
            "ac3ecc4059ed3108"
        ],
        "x": 315,
        "y": 555,
        "wires": []
    },
    {
        "id": "c43efe82c097e2a2",
        "type": "debug",
        "z": "1ce1485ad608bc7a",
        "name": "[EXIT 2] Search for resolved alarms in devices",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 597,
        "wires": []
    },
    {
        "id": "49ea81661e9662a6",
        "type": "comment",
        "z": "1ce1485ad608bc7a",
        "name": "########## Increment resolve counter",
        "info": "",
        "x": 190,
        "y": 696,
        "wires": []
    },
    {
        "id": "ac3ecc4059ed3108",
        "type": "link in",
        "z": "1ce1485ad608bc7a",
        "name": "IN (1) Increment resolve counter",
        "links": [
            "548c9048fafa7ef1"
        ],
        "x": 55,
        "y": 778,
        "wires": [
            [
                "c3bed0f8b3cbb43e"
            ]
        ]
    },
    {
        "id": "437e5391745a7043",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Search for failures",
        "func": "msg.device = msg.payload;\nmsg.device.failures = [];\n\nif (!msg.device.status) {\n    msg.device.failures.push(msg.failures[6]);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 477,
        "wires": [
            [
                "142761bd553ef531"
            ]
        ]
    },
    {
        "id": "142761bd553ef531",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (6) Search for resolved alarms in devices",
        "links": [
            "8b725e75f38013b9"
        ],
        "x": 695,
        "y": 477,
        "wires": []
    },
    {
        "id": "62efccd00ae19dbf",
        "type": "redis-command",
        "z": "185bd0a8b5a4b916",
        "server": "a7cb2a42ddfd0d99",
        "command": "JSON.SET",
        "name": "JSON.INSERT",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 360,
        "y": 755,
        "wires": [
            [
                "bfbff7d80bac8776"
            ]
        ]
    },
    {
        "id": "8309511dc52a3b6b",
        "type": "redis-command",
        "z": "185bd0a8b5a4b916",
        "server": "a7cb2a42ddfd0d99",
        "command": "JSON.GET",
        "name": "JSON.GET",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 350,
        "y": 715,
        "wires": [
            [
                "14a4f1ea68611679"
            ]
        ]
    },
    {
        "id": "70d4f99473093739",
        "type": "switch",
        "z": "185bd0a8b5a4b916",
        "name": "What action?",
        "property": "query.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "JSON.GET",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "JSON.INSERT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "JSON.UPDATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "KEYS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "JSON.ARRAPPEND",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "JSON.ARRPOP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "LRANGE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "LPOP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "LPUSH",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 9,
        "x": 170,
        "y": 395,
        "wires": [
            [
                "a5646b720d61e23d"
            ],
            [
                "a712429cd9c00fb9"
            ],
            [
                "09579b2768fd57ec"
            ],
            [
                "91256a108cc22c6f"
            ],
            [
                "470e03096c22a255"
            ],
            [
                "016be0caa78e3d3d"
            ],
            [
                "56b75208d0310c61"
            ],
            [
                "895dd012bf236bdc"
            ],
            [
                "0fe26b1a3204ee94"
            ]
        ]
    },
    {
        "id": "1169e102e4d222c2",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN JSON.INSERT",
        "links": [
            "7cdfb2af0af8ec92",
            "a712429cd9c00fb9"
        ],
        "x": 55,
        "y": 755,
        "wires": [
            [
                "df7ff42e19db4df7"
            ]
        ]
    },
    {
        "id": "f4032c3893645be0",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN JSON.GET",
        "links": [
            "a5646b720d61e23d",
            "38cd626f498d07a0"
        ],
        "x": 55,
        "y": 715,
        "wires": [
            [
                "95fbf9069438666b"
            ]
        ]
    },
    {
        "id": "a712429cd9c00fb9",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO JSON.INSERT",
        "links": [
            "1169e102e4d222c2"
        ],
        "x": 335,
        "y": 275,
        "wires": []
    },
    {
        "id": "a5646b720d61e23d",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO JSON.GET",
        "links": [
            "f4032c3893645be0"
        ],
        "x": 335,
        "y": 235,
        "wires": []
    },
    {
        "id": "df7ff42e19db4df7",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Prepare query",
        "func": "const counter = msg.counter;\nconst params = msg.query.params[counter];\n\nmsg.payload = [params.key, \".\", JSON.stringify(params.values)];\n\nmsg.counter = counter+1;\nmsg.action = 2;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 755,
        "wires": [
            [
                "62efccd00ae19dbf"
            ]
        ]
    },
    {
        "id": "95fbf9069438666b",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Prepare query",
        "func": "const counter = msg.counter;\nconst params = msg.query.params[counter];\n\nmsg.payload = [params.key];\n\nif (params.values !== undefined) {\n    msg.payload.push(params.values);    \n}\n\nmsg.counter = counter+1;\nmsg.action = 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 715,
        "wires": [
            [
                "8309511dc52a3b6b"
            ]
        ]
    },
    {
        "id": "bfbff7d80bac8776",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT JSON.INSERT",
        "links": [
            "0aad452318b271e8"
        ],
        "x": 475,
        "y": 755,
        "wires": []
    },
    {
        "id": "14a4f1ea68611679",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT JSON.GET",
        "links": [
            "0aad452318b271e8"
        ],
        "x": 455,
        "y": 715,
        "wires": []
    },
    {
        "id": "451464678bbc3d93",
        "type": "catch",
        "z": "185bd0a8b5a4b916",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 1916,
        "wires": [
            [
                "5db875bc9d533019"
            ]
        ]
    },
    {
        "id": "fbc7b5775bf09c5d",
        "type": "comment",
        "z": "185bd0a8b5a4b916",
        "name": "###### Exceptions Treatment",
        "info": "",
        "x": 159,
        "y": 1856,
        "wires": []
    },
    {
        "id": "3466a7f65bed9eac",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN (1) End",
        "links": [
            "e13e3ccd568107d2"
        ],
        "x": 55,
        "y": 1617,
        "wires": [
            [
                "48b1a57359cc9abd"
            ]
        ]
    },
    {
        "id": "ab7425eb7c0d4676",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN (2) End",
        "links": [
            "5db875bc9d533019"
        ],
        "x": 55,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "cba301d7724bd39b",
        "type": "comment",
        "z": "185bd0a8b5a4b916",
        "name": "Success",
        "info": "",
        "x": 1140,
        "y": 1623,
        "wires": []
    },
    {
        "id": "dd6277508180fb7c",
        "type": "comment",
        "z": "185bd0a8b5a4b916",
        "name": "Insuccess",
        "info": "",
        "x": 220,
        "y": 1700,
        "wires": []
    },
    {
        "id": "5db875bc9d533019",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT Exceptions Treatment",
        "links": [
            "ab7425eb7c0d4676"
        ],
        "x": 195,
        "y": 1916,
        "wires": []
    },
    {
        "id": "09225a407ea571dc",
        "type": "redis-command",
        "z": "185bd0a8b5a4b916",
        "server": "a7cb2a42ddfd0d99",
        "command": "MULTI",
        "name": "MULTI",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 770,
        "y": 144,
        "wires": [
            [
                "7a1c9d83a3613f33"
            ]
        ]
    },
    {
        "id": "4c30f53bc0b8f715",
        "type": "redis-command",
        "z": "185bd0a8b5a4b916",
        "server": "a7cb2a42ddfd0d99",
        "command": "EXEC",
        "name": "EXEC",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 550,
        "y": 1595,
        "wires": [
            [
                "071eddf0112438e8"
            ]
        ]
    },
    {
        "id": "adc4c59772c6298c",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Prepare result",
        "func": "delete msg.query;\ndelete msg.action;\ndelete msg.counter;\ndelete msg.counterMax;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1623,
        "wires": [
            []
        ]
    },
    {
        "id": "d739577f0282bcd8",
        "type": "comment",
        "z": "185bd0a8b5a4b916",
        "name": "##### Begin",
        "info": "",
        "x": 110,
        "y": 56,
        "wires": []
    },
    {
        "id": "49e5e7b7d2a08001",
        "type": "comment",
        "z": "185bd0a8b5a4b916",
        "name": "##### Functions",
        "info": "",
        "x": 120,
        "y": 656,
        "wires": []
    },
    {
        "id": "4f69d0a79d62082f",
        "type": "comment",
        "z": "185bd0a8b5a4b916",
        "name": "##### End",
        "info": "",
        "x": 100,
        "y": 1536,
        "wires": []
    },
    {
        "id": "7a1c9d83a3613f33",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Set counter",
        "func": "msg.counter    = 0;\nmsg.counterMax = msg.query.params.length\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 173,
        "wires": [
            [
                "67b41fa2bf4d76bc"
            ]
        ]
    },
    {
        "id": "2b42e25c9acdcf26",
        "type": "switch",
        "z": "185bd0a8b5a4b916",
        "name": "Execute again?",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "counterMax",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 180,
        "y": 1320,
        "wires": [
            [
                "79fd20871dc7a136"
            ],
            [
                "e13e3ccd568107d2"
            ]
        ]
    },
    {
        "id": "0aad452318b271e8",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN (1) Functions",
        "links": [
            "14a4f1ea68611679",
            "bfbff7d80bac8776",
            "a02f6fb69be119eb",
            "fe2af213e574e51f",
            "42c060b70aeae32d",
            "ea7cfcf3d063512b",
            "90a4dd5d76046d0d",
            "d667c0f05dc6ad3c",
            "cef2b3bc69d40282"
        ],
        "x": 55,
        "y": 1320,
        "wires": [
            [
                "2b42e25c9acdcf26"
            ]
        ]
    },
    {
        "id": "79fd20871dc7a136",
        "type": "switch",
        "z": "185bd0a8b5a4b916",
        "name": "What action?",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "7",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "8",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "9",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 9,
        "x": 370,
        "y": 1274,
        "wires": [
            [
                "38cd626f498d07a0"
            ],
            [
                "7cdfb2af0af8ec92"
            ],
            [
                "b066144a02a0bbf7"
            ],
            [
                "560829592f1ac023"
            ],
            [
                "16f13f2b46c404e0"
            ],
            [
                "d147bd3a65c12089"
            ],
            [
                "7ad34e5d27148c67"
            ],
            [
                "37b4c09b1e66ed9b"
            ],
            [
                "a12addbfa2b2247b"
            ]
        ]
    },
    {
        "id": "e13e3ccd568107d2",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT (3) Functions",
        "links": [
            "3466a7f65bed9eac"
        ],
        "x": 315,
        "y": 1366,
        "wires": []
    },
    {
        "id": "38cd626f498d07a0",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO JSON.GET",
        "links": [
            "f4032c3893645be0"
        ],
        "x": 535,
        "y": 1115,
        "wires": []
    },
    {
        "id": "7cdfb2af0af8ec92",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO JSON.INSERT",
        "links": [
            "1169e102e4d222c2"
        ],
        "x": 535,
        "y": 1155,
        "wires": []
    },
    {
        "id": "94a4714c3a3969b8",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Prepare query",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1595,
        "wires": [
            [
                "4c30f53bc0b8f715"
            ]
        ]
    },
    {
        "id": "16d60375c4a1414f",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Enabled MULTI mode",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 144,
        "wires": [
            [
                "09225a407ea571dc"
            ]
        ]
    },
    {
        "id": "09579b2768fd57ec",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO JSON.UPDATE",
        "links": [
            "779dad188b169279"
        ],
        "x": 335,
        "y": 315,
        "wires": []
    },
    {
        "id": "071eddf0112438e8",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Map result with key",
        "func": "function isJSON (string) {\n    try {\n        JSON.parse(string);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\nlet results = [].concat(msg.payload);\nlet keys    = msg.query.params.map(param => param.key);\n\nresults = results.map((result, i) => {\n    return {\n        key:    keys[i] || '',\n        result: isJSON(result) ? JSON.parse(result) : result\n    }        \n});\n\nmsg.payload = results;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1623,
        "wires": [
            [
                "adc4c59772c6298c"
            ]
        ]
    },
    {
        "id": "a302f13da39b1f7c",
        "type": "redis-command",
        "z": "185bd0a8b5a4b916",
        "server": "a7cb2a42ddfd0d99",
        "command": "JSON.SET",
        "name": "JSON.UPDATE",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 360,
        "y": 796,
        "wires": [
            [
                "a02f6fb69be119eb"
            ]
        ]
    },
    {
        "id": "779dad188b169279",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN JSON.UPDATE",
        "links": [
            "b066144a02a0bbf7",
            "09579b2768fd57ec"
        ],
        "x": 55,
        "y": 796,
        "wires": [
            [
                "477bd67677dbe6bb"
            ]
        ]
    },
    {
        "id": "477bd67677dbe6bb",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Prepare query",
        "func": "const counter = msg.counter;\nconst params = msg.query.params[counter];\n\nconst attr = params.values.attr;\nconst newValue = params.values.value;\n\nmsg.payload = [params.key, attr, newValue];\n\nmsg.counter = counter+1;\nmsg.action = 3;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 796,
        "wires": [
            [
                "a302f13da39b1f7c"
            ]
        ]
    },
    {
        "id": "a02f6fb69be119eb",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT JSON.UPDATE",
        "links": [
            "0aad452318b271e8"
        ],
        "x": 475,
        "y": 796,
        "wires": []
    },
    {
        "id": "b066144a02a0bbf7",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO JSON.UPDATE",
        "links": [
            "779dad188b169279"
        ],
        "x": 535,
        "y": 1193,
        "wires": []
    },
    {
        "id": "3c546124752a49f4",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Parse params",
        "func": "msg.query = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 166,
        "wires": [
            [
                "bb3f3b5c78d45598"
            ]
        ]
    },
    {
        "id": "bb3f3b5c78d45598",
        "type": "switch",
        "z": "185bd0a8b5a4b916",
        "name": "Multiples querys?",
        "property": "query.params.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 166,
        "wires": [
            [
                "16d60375c4a1414f"
            ],
            [
                "7a1c9d83a3613f33"
            ]
        ]
    },
    {
        "id": "48b1a57359cc9abd",
        "type": "switch",
        "z": "185bd0a8b5a4b916",
        "name": "Multiples querys?",
        "property": "query.params.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 1617,
        "wires": [
            [
                "94a4714c3a3969b8"
            ],
            [
                "071eddf0112438e8"
            ]
        ]
    },
    {
        "id": "91256a108cc22c6f",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO KEYS",
        "links": [
            "4766e4737d4ab82a"
        ],
        "x": 335,
        "y": 355,
        "wires": []
    },
    {
        "id": "18fb4272c1434516",
        "type": "redis-command",
        "z": "185bd0a8b5a4b916",
        "server": "a7cb2a42ddfd0d99",
        "command": "KEYS",
        "name": "KEYS",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 330,
        "y": 836,
        "wires": [
            [
                "fe2af213e574e51f"
            ]
        ]
    },
    {
        "id": "4766e4737d4ab82a",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN KEYS",
        "links": [
            "91256a108cc22c6f",
            "560829592f1ac023"
        ],
        "x": 55,
        "y": 836,
        "wires": [
            [
                "a8cb1707b0683a56"
            ]
        ]
    },
    {
        "id": "a8cb1707b0683a56",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Prepare query",
        "func": "const counter = msg.counter;\nconst params = msg.query.params[counter];\n\nmsg.payload = [params.values];\n\nmsg.counter = counter+1;\nmsg.action = 4;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 836,
        "wires": [
            [
                "18fb4272c1434516"
            ]
        ]
    },
    {
        "id": "fe2af213e574e51f",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT KEYS",
        "links": [
            "0aad452318b271e8"
        ],
        "x": 415,
        "y": 836,
        "wires": []
    },
    {
        "id": "560829592f1ac023",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO KEYS",
        "links": [
            "4766e4737d4ab82a"
        ],
        "x": 535,
        "y": 1235,
        "wires": []
    },
    {
        "id": "67b41fa2bf4d76bc",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT (1) Begin",
        "links": [
            "7dd90b75f23df424"
        ],
        "x": 1035,
        "y": 173,
        "wires": []
    },
    {
        "id": "470e03096c22a255",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO JSON.ARRAPPEND",
        "links": [
            "44311aec488997d1"
        ],
        "x": 335,
        "y": 395,
        "wires": []
    },
    {
        "id": "7dd90b75f23df424",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN (1) Begin",
        "links": [
            "67b41fa2bf4d76bc"
        ],
        "x": 55,
        "y": 395,
        "wires": [
            [
                "70d4f99473093739"
            ]
        ]
    },
    {
        "id": "cfcd806421fa3d3e",
        "type": "redis-command",
        "z": "185bd0a8b5a4b916",
        "server": "a7cb2a42ddfd0d99",
        "command": "JSON.ARRAPPEND",
        "name": "JSON.ARRAPPEND",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 380,
        "y": 876,
        "wires": [
            [
                "42c060b70aeae32d"
            ]
        ]
    },
    {
        "id": "5ba5be911a160c86",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Prepare query",
        "func": "const counter = msg.counter;\nconst params = msg.query.params[counter];\n\nconst key = params.key;\nconst array = params.values.array;\nconst value = params.values.value;\n\nmsg.payload = [key, array, value];\n\nmsg.counter = counter+1;\nmsg.action = 5;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 876,
        "wires": [
            [
                "cfcd806421fa3d3e"
            ]
        ]
    },
    {
        "id": "44311aec488997d1",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN JSON.ARRAPPEND",
        "links": [
            "16f13f2b46c404e0",
            "470e03096c22a255"
        ],
        "x": 55,
        "y": 876,
        "wires": [
            [
                "5ba5be911a160c86"
            ]
        ]
    },
    {
        "id": "42c060b70aeae32d",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT JSON.ARRAPPEND",
        "links": [
            "0aad452318b271e8"
        ],
        "x": 515,
        "y": 876,
        "wires": []
    },
    {
        "id": "16f13f2b46c404e0",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO JSON.ARRAPPEND",
        "links": [
            "44311aec488997d1"
        ],
        "x": 535,
        "y": 1275,
        "wires": []
    },
    {
        "id": "e702a62e3341bf9a",
        "type": "redis-command",
        "z": "185bd0a8b5a4b916",
        "server": "a7cb2a42ddfd0d99",
        "command": "JSON.ARRPOP",
        "name": "JSON.ARRPOP",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 360,
        "y": 916,
        "wires": [
            [
                "ea7cfcf3d063512b"
            ]
        ]
    },
    {
        "id": "5b8fb422e2151359",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Prepare query",
        "func": "const counter = msg.counter;\nconst params = msg.query.params[counter];\n\nconst key = params.key;\nconst array = params.values.array;\nconst index = params.values.index;\n\nif (index !== undefined) {\n    msg.payload = [key, array, index];\n} else {\n    msg.payload = [key, array];\n}\n\nmsg.counter = counter+1;\nmsg.action = 6;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 916,
        "wires": [
            [
                "e702a62e3341bf9a"
            ]
        ]
    },
    {
        "id": "6843c5c9bf74c0c2",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN JSON.ARRPOP",
        "links": [
            "016be0caa78e3d3d",
            "d147bd3a65c12089"
        ],
        "x": 55,
        "y": 916,
        "wires": [
            [
                "5b8fb422e2151359"
            ]
        ]
    },
    {
        "id": "ea7cfcf3d063512b",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT JSON.ARRPOP",
        "links": [
            "0aad452318b271e8"
        ],
        "x": 475,
        "y": 916,
        "wires": []
    },
    {
        "id": "016be0caa78e3d3d",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO JSON.ARRPOP",
        "links": [
            "6843c5c9bf74c0c2"
        ],
        "x": 335,
        "y": 435,
        "wires": []
    },
    {
        "id": "d147bd3a65c12089",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO JSON.ARRPOP",
        "links": [
            "6843c5c9bf74c0c2"
        ],
        "x": 535,
        "y": 1315,
        "wires": []
    },
    {
        "id": "56b75208d0310c61",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO LRANGE",
        "links": [
            "2eb5c5ab95ca241f"
        ],
        "x": 335,
        "y": 475,
        "wires": []
    },
    {
        "id": "895dd012bf236bdc",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO LPOP",
        "links": [
            "9afca3569a87daee"
        ],
        "x": 335,
        "y": 515,
        "wires": []
    },
    {
        "id": "7ad34e5d27148c67",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO LRANGE",
        "links": [
            "2eb5c5ab95ca241f"
        ],
        "x": 535,
        "y": 1355,
        "wires": []
    },
    {
        "id": "37b4c09b1e66ed9b",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO LPOP",
        "links": [
            "9afca3569a87daee"
        ],
        "x": 535,
        "y": 1395,
        "wires": []
    },
    {
        "id": "9b9042615074e921",
        "type": "redis-command",
        "z": "185bd0a8b5a4b916",
        "server": "a7cb2a42ddfd0d99",
        "command": "LRANGE",
        "name": "LRANGE",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 340,
        "y": 956,
        "wires": [
            [
                "90a4dd5d76046d0d"
            ]
        ]
    },
    {
        "id": "4be7ba18277b216b",
        "type": "redis-command",
        "z": "185bd0a8b5a4b916",
        "server": "a7cb2a42ddfd0d99",
        "command": "LPOP",
        "name": "LPOP",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 330,
        "y": 996,
        "wires": [
            [
                "d667c0f05dc6ad3c"
            ]
        ]
    },
    {
        "id": "8344925557244649",
        "type": "redis-command",
        "z": "185bd0a8b5a4b916",
        "server": "a7cb2a42ddfd0d99",
        "command": "LPUSH",
        "name": "LPUSH",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 340,
        "y": 1036,
        "wires": [
            [
                "cef2b3bc69d40282"
            ]
        ]
    },
    {
        "id": "90a4dd5d76046d0d",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT LRANGE",
        "links": [
            "0aad452318b271e8"
        ],
        "x": 435,
        "y": 956,
        "wires": []
    },
    {
        "id": "d667c0f05dc6ad3c",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT LPOP",
        "links": [
            "0aad452318b271e8"
        ],
        "x": 415,
        "y": 996,
        "wires": []
    },
    {
        "id": "cef2b3bc69d40282",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT LPUSH",
        "links": [
            "0aad452318b271e8"
        ],
        "x": 435,
        "y": 1036,
        "wires": []
    },
    {
        "id": "0fe26b1a3204ee94",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO LPUSH",
        "links": [
            "de7e9dd7af166b90"
        ],
        "x": 335,
        "y": 555,
        "wires": []
    },
    {
        "id": "a12addbfa2b2247b",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO LPUSH",
        "links": [
            "de7e9dd7af166b90"
        ],
        "x": 535,
        "y": 1434,
        "wires": []
    },
    {
        "id": "2eb5c5ab95ca241f",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN LRANGE",
        "links": [
            "56b75208d0310c61",
            "7ad34e5d27148c67"
        ],
        "x": 55,
        "y": 956,
        "wires": [
            [
                "b8a030ada5f55f7a"
            ]
        ]
    },
    {
        "id": "9afca3569a87daee",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN LPOP",
        "links": [
            "895dd012bf236bdc",
            "37b4c09b1e66ed9b"
        ],
        "x": 55,
        "y": 996,
        "wires": [
            [
                "783dd74b7b1d78f2"
            ]
        ]
    },
    {
        "id": "de7e9dd7af166b90",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN LPUSH",
        "links": [
            "a12addbfa2b2247b",
            "0fe26b1a3204ee94"
        ],
        "x": 55,
        "y": 1036,
        "wires": [
            [
                "b3d8d93452720140"
            ]
        ]
    },
    {
        "id": "b8a030ada5f55f7a",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Prepare query",
        "func": "const counter = msg.counter;\nconst params = msg.query.params[counter];\n\nconst key = params.key;\nconst start = params.values.start;\nconst stop = params.values.stop;\n\nmsg.payload = [key, start, stop];\n\nmsg.counter = counter+1;\nmsg.action = 7;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 956,
        "wires": [
            [
                "9b9042615074e921"
            ]
        ]
    },
    {
        "id": "783dd74b7b1d78f2",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Prepare query",
        "func": "const counter = msg.counter;\nconst params = msg.query.params[counter];\n\nconst key = params.key;\nconst total = params.values;\n\nmsg.payload = [key, total];\n\nmsg.counter = counter+1;\nmsg.action = 8;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 996,
        "wires": [
            [
                "4be7ba18277b216b"
            ]
        ]
    },
    {
        "id": "b3d8d93452720140",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Prepare query",
        "func": "const counter = msg.counter;\nconst params = msg.query.params[counter];\n\nconst key = params.key;\nconst values = params.values;\n\nmsg.payload = [key].concat(values);\n\nmsg.counter = counter+1;\nmsg.action = 9;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 1036,
        "wires": [
            [
                "8344925557244649"
            ]
        ]
    },
    {
        "id": "3effaa9a67ae8e30",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Get current alarms of device",
        "func": "msg.payload = {\n    action: 'LRANGE',\n    params: [{\n        key: msg.device.id,\n        values: {\n            start: 0,\n            stop: -1\n        }\n    }]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 778,
        "wires": [
            [
                "5536e6d31bd99553"
            ]
        ]
    },
    {
        "id": "5536e6d31bd99553",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "a716829fd201f4fd",
        "name": "",
        "x": 440,
        "y": 778,
        "wires": [
            [
                "77f61339ce8b0282"
            ],
            [
                "5f17cf3b80e41476"
            ]
        ]
    },
    {
        "id": "5f17cf3b80e41476",
        "type": "debug",
        "z": "a716829fd201f4fd",
        "name": "[EXIT 1] Create/Update alarms",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 800,
        "wires": []
    },
    {
        "id": "77f61339ce8b0282",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Update problem counters",
        "func": "const currentAlarms = msg.payload.map(alarm => alarm.result);\nconst failures = msg.device.failures;\n\nconst newAlarms = [];\n\nfailures.forEach(failure => {\n    const find = currentAlarms.find(alarm => alarm.type === failure.id);\n\n    if (find === undefined) {\n        newAlarms.push(failure);\n    } else {\n        find.problem_counter++;\n        find.resolve_counter = 0;\n    }\n});\n\nmsg.currentAlarms = currentAlarms;\nmsg.newAlarms = newAlarms;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 756,
        "wires": [
            [
                "2689c430be5bfd2f"
            ]
        ]
    },
    {
        "id": "2689c430be5bfd2f",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Create new alarms",
        "func": "const currentAlarms = msg.currentAlarms;\n\nconst newAlarms = msg.newAlarms.map(failure => {\n    const date = new Date();\n    \n    const alarm = {\n        id:              '',\n        type:            failure.id,\n        name:            failure.name,\n        device_id:       msg.device.id,\n        creation_time:   Math.round(date.getTime()/1000),\n        problem_counter: 1,\n        resolve_counter: 0\n    }\n    \n    return alarm;\n});\n\nmsg.total = msg.currentAlarms.length;\nmsg.alarms = currentAlarms.concat(newAlarms);\n\ndelete msg.currentAlarms;\ndelete msg.newAlarms;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 756,
        "wires": [
            [
                "92227d472ca09548"
            ]
        ]
    },
    {
        "id": "c203209893b251ca",
        "type": "link in",
        "z": "a716829fd201f4fd",
        "name": "IN (1) Insert alarms in historic table",
        "links": [
            "92227d472ca09548"
        ],
        "x": 55,
        "y": 978,
        "wires": [
            [
                "b8af597118fc26c2"
            ]
        ]
    },
    {
        "id": "92227d472ca09548",
        "type": "link out",
        "z": "a716829fd201f4fd",
        "name": "OUT (1) Create/Update alarms",
        "links": [
            "c203209893b251ca"
        ],
        "x": 1015,
        "y": 756,
        "wires": []
    },
    {
        "id": "58fdfd40528ebb59",
        "type": "comment",
        "z": "a716829fd201f4fd",
        "name": "########## Insert alarms in historic table (problem_counter === 3)",
        "info": "",
        "x": 280,
        "y": 896,
        "wires": []
    },
    {
        "id": "b8af597118fc26c2",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Search for alarms to insert in historic table",
        "func": "const alarms = msg.alarms;\n\nconst toHistoric = [];\nconst others = [];\n\nalarms.forEach(alarm => {\n    if (alarm.problem_counter === 3) {\n        toHistoric.push(alarm);\n    } else {\n        others.push(alarm);\n    }\n});\n\nmsg.toHistoric = toHistoric;\nmsg.others = others;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 978,
        "wires": [
            [
                "bd6010cb506c3b1a"
            ]
        ]
    },
    {
        "id": "bd6010cb506c3b1a",
        "type": "switch",
        "z": "a716829fd201f4fd",
        "name": "Found alarms?",
        "property": "toHistoric.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 520,
        "y": 978,
        "wires": [
            [
                "c32ede3e5ceef202"
            ],
            [
                "11f845e8fe894f62"
            ]
        ]
    },
    {
        "id": "c32ede3e5ceef202",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Insert alarms in historic table",
        "func": "const toHistoric = msg.toHistoric;\n\nconst insertValues = toHistoric.map(alarm => {\n    return `(${alarm.type}, ${alarm.device_id}, TO_TIMESTAMP(${alarm.creation_time}))`;\n}).join(',');\n\nmsg.payload = `INSERT INTO \n               ALARMS (TYPE, DEVICE_ID, CREATION_TIME)\n               VALUES\n               ${insertValues}\n               RETURNING ID, TYPE`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 956,
        "wires": [
            [
                "9b3a281ae90f46f8"
            ]
        ]
    },
    {
        "id": "9b3a281ae90f46f8",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "a716829fd201f4fd",
        "name": "",
        "x": 960,
        "y": 956,
        "wires": [
            [
                "958e2afc99d9a189"
            ]
        ]
    },
    {
        "id": "958e2afc99d9a189",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Map serials to alarms",
        "func": "const alarms = msg.toHistoric.concat(msg.others);\nconst insertedRows = msg.payload;\n\ninsertedRows.forEach(row => {\n    const find = alarms.find(alarm => alarm.type === row.type);\n    find.id = row.id;\n});\n\nmsg.alarms = alarms;\n\ndelete msg.toHistoric;\ndelete msg.others;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 956,
        "wires": [
            [
                "d44a003dbf52554f"
            ]
        ]
    },
    {
        "id": "dd35e1c4df8eaf15",
        "type": "debug",
        "z": "a716829fd201f4fd",
        "name": "[EXIT 1] Update alarms list",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 1221,
        "wires": []
    },
    {
        "id": "d44a003dbf52554f",
        "type": "link out",
        "z": "a716829fd201f4fd",
        "name": "OUT (1) Insert alarms in historic table",
        "links": [
            "6921ce91d6a40a93"
        ],
        "x": 1275,
        "y": 956,
        "wires": []
    },
    {
        "id": "6921ce91d6a40a93",
        "type": "link in",
        "z": "a716829fd201f4fd",
        "name": "IN (1) Update alarms list",
        "links": [
            "d44a003dbf52554f",
            "11f845e8fe894f62"
        ],
        "x": 55,
        "y": 1200,
        "wires": [
            [
                "fc4a441c5601ed69"
            ]
        ]
    },
    {
        "id": "312afdbfaee80119",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Insert new alarms list",
        "func": "const alarms = msg.alarms.map(alarm => JSON.stringify(alarm));\n\nmsg.payload = {\n    action: 'LPUSH',\n    params: [{\n        key: msg.device.id,\n        values: alarms\n    }]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1178,
        "wires": [
            [
                "f90b3ecdc5a39cba"
            ]
        ]
    },
    {
        "id": "f90b3ecdc5a39cba",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "a716829fd201f4fd",
        "name": "",
        "x": 840,
        "y": 1178,
        "wires": [
            [
                "95d679959715f7c9"
            ],
            [
                "da8d352cb855c2c5"
            ]
        ]
    },
    {
        "id": "da8d352cb855c2c5",
        "type": "debug",
        "z": "a716829fd201f4fd",
        "name": "[EXIT 3] Update alarms list",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 1199,
        "wires": []
    },
    {
        "id": "95d679959715f7c9",
        "type": "debug",
        "z": "a716829fd201f4fd",
        "name": "[EXIT 2] Update alarms list",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 1156,
        "wires": []
    },
    {
        "id": "d7109afd07efa46e",
        "type": "catch",
        "z": "a716829fd201f4fd",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 1437,
        "wires": [
            [
                "aba8a80fa672c520"
            ]
        ]
    },
    {
        "id": "75af3e7b5fc63593",
        "type": "comment",
        "z": "a716829fd201f4fd",
        "name": "########## Exceptions Treatment",
        "info": "",
        "x": 179,
        "y": 1376,
        "wires": []
    },
    {
        "id": "aba8a80fa672c520",
        "type": "debug",
        "z": "a716829fd201f4fd",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 1437,
        "wires": []
    },
    {
        "id": "71255050788bf980",
        "type": "comment",
        "z": "a716829fd201f4fd",
        "name": "########## Update alarms list",
        "info": "",
        "x": 170,
        "y": 1096,
        "wires": []
    },
    {
        "id": "11f845e8fe894f62",
        "type": "link out",
        "z": "a716829fd201f4fd",
        "name": "OUT (2) Insert alarms in historic table",
        "links": [
            "6921ce91d6a40a93"
        ],
        "x": 655,
        "y": 1000,
        "wires": []
    },
    {
        "id": "95099afba89a6ad6",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "a716829fd201f4fd",
        "name": "",
        "x": 420,
        "y": 1200,
        "wires": [
            [
                "312afdbfaee80119"
            ],
            [
                "dd35e1c4df8eaf15"
            ]
        ]
    },
    {
        "id": "fc4a441c5601ed69",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Delete current alarms list",
        "func": "msg.payload = {\n    action: 'LPOP',\n    params: [{\n        key: msg.device.id,\n        values: msg.total\n    }]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1200,
        "wires": [
            [
                "95099afba89a6ad6"
            ]
        ]
    },
    {
        "id": "c3bed0f8b3cbb43e",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Get current alarms of device",
        "func": "msg.payload = {\n    action: 'LRANGE',\n    params: [{\n        key: msg.device.id,\n        values: {\n            start: 0,\n            stop: -1\n        }\n    }]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 778,
        "wires": [
            [
                "2d9791bcbb2f7c87"
            ]
        ]
    },
    {
        "id": "2d9791bcbb2f7c87",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "1ce1485ad608bc7a",
        "name": "",
        "x": 440,
        "y": 778,
        "wires": [
            [
                "2722d781c3aa55d9"
            ],
            [
                "c9dbd9e3a5a46643"
            ]
        ]
    },
    {
        "id": "c9dbd9e3a5a46643",
        "type": "debug",
        "z": "1ce1485ad608bc7a",
        "name": "[EXIT 1] Create/Update alarms",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 690,
        "y": 800,
        "wires": []
    },
    {
        "id": "2722d781c3aa55d9",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Update resolve counters",
        "func": "const alarms = msg.payload.map(alarm => alarm.result);\nconst failures = msg.device.failures;\n\nfailures.forEach(failure => {\n    const find = alarms.find(alarm => alarm.type === failure.id);\n\n    if (find !== undefined) {\n        find.resolve_counter++;\n    }\n});\n\nmsg.total = alarms.length;\nmsg.alarms = alarms;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 756,
        "wires": [
            [
                "84b917302ce31758"
            ]
        ]
    },
    {
        "id": "84b917302ce31758",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (1) Increment resolve counter",
        "links": [
            "c87aff05d514e788"
        ],
        "x": 815,
        "y": 756,
        "wires": []
    },
    {
        "id": "c87aff05d514e788",
        "type": "link in",
        "z": "1ce1485ad608bc7a",
        "name": "IN (1) Update alarms in historic table",
        "links": [
            "84b917302ce31758"
        ],
        "x": 55,
        "y": 978,
        "wires": [
            [
                "eaa5c40d914f8f5a"
            ]
        ]
    },
    {
        "id": "f088a50fbcf52cfc",
        "type": "comment",
        "z": "1ce1485ad608bc7a",
        "name": "########## Update alarms in historic table (resolve_counter === 3)",
        "info": "",
        "x": 280,
        "y": 896,
        "wires": []
    },
    {
        "id": "eaa5c40d914f8f5a",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Search for resolved alarms with historic",
        "func": "const alarms = msg.alarms;\n\nconst clear = [];\nconst problem = [];\n\nalarms.forEach(alarm => {\n    if (alarm.resolve_counter === 3) {\n        if (alarm.problem_counter >= 3) {\n            clear.push(alarm);\n        }\n    } else {\n        problem.push(alarm);\n    }\n});\n\nmsg.clear = clear;\nmsg.alarms = problem;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 978,
        "wires": [
            [
                "a984131ddc862c3e"
            ]
        ]
    },
    {
        "id": "a984131ddc862c3e",
        "type": "switch",
        "z": "1ce1485ad608bc7a",
        "name": "Found alarms?",
        "property": "clear.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 520,
        "y": 978,
        "wires": [
            [
                "f21b90b43a031e9a"
            ],
            [
                "e0d43ea5683417d0"
            ]
        ]
    },
    {
        "id": "f21b90b43a031e9a",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Set clear time in resolved alarms",
        "func": "const alarms = msg.clear;\n\nconst ids = alarms.map(alarm => alarm.id).filter(id => id !== '').join(',');\n\nconst currentDate = new Date();\nconst timestamp = Math.round(currentDate.getTime()/1000);\n\nmsg.payload = `UPDATE ALARMS\n               SET CLEAR_TIME = TO_TIMESTAMP(${timestamp})\n               WHERE ID IN (${ids})`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 956,
        "wires": [
            [
                "fb0863bb8377f03c"
            ]
        ]
    },
    {
        "id": "fb0863bb8377f03c",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "1ce1485ad608bc7a",
        "name": "",
        "x": 980,
        "y": 956,
        "wires": [
            [
                "e786deccc89bf279"
            ]
        ]
    },
    {
        "id": "e786deccc89bf279",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (1) Update alarms in historic table",
        "links": [
            "d9aee65cde3b444d"
        ],
        "x": 1075,
        "y": 956,
        "wires": []
    },
    {
        "id": "e0d43ea5683417d0",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (2) Update alarms in historic table",
        "links": [
            "d9aee65cde3b444d"
        ],
        "x": 655,
        "y": 1000,
        "wires": []
    },
    {
        "id": "46bbec51c1845bc2",
        "type": "debug",
        "z": "1ce1485ad608bc7a",
        "name": "[EXIT 1] Update alarms list",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 1198,
        "wires": []
    },
    {
        "id": "d9aee65cde3b444d",
        "type": "link in",
        "z": "1ce1485ad608bc7a",
        "name": "IN (1) Update alarms list",
        "links": [
            "e0d43ea5683417d0",
            "e786deccc89bf279"
        ],
        "x": 55,
        "y": 1177,
        "wires": [
            [
                "b89e1b2327a1279f"
            ]
        ]
    },
    {
        "id": "3d38d1e54993ad8c",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Insert new alarms list",
        "func": "const alarms = msg.alarms.map(alarm => JSON.stringify(alarm));\n\nmsg.payload = {\n    action: 'LPUSH',\n    params: [{\n        key: msg.device.id,\n        values: alarms\n    }]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1298,
        "wires": [
            [
                "88976d8bdbdeccfb"
            ]
        ]
    },
    {
        "id": "88976d8bdbdeccfb",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "1ce1485ad608bc7a",
        "name": "",
        "x": 580,
        "y": 1298,
        "wires": [
            [
                "830b2b3e664aecbd"
            ],
            [
                "1f85e78821b1c53e"
            ]
        ]
    },
    {
        "id": "1f85e78821b1c53e",
        "type": "debug",
        "z": "1ce1485ad608bc7a",
        "name": "[EXIT 4] Update alarms list",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1319,
        "wires": []
    },
    {
        "id": "830b2b3e664aecbd",
        "type": "debug",
        "z": "1ce1485ad608bc7a",
        "name": "[EXIT 3] Update alarms list",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1276,
        "wires": []
    },
    {
        "id": "117b30d7dd9e4667",
        "type": "catch",
        "z": "1ce1485ad608bc7a",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 1556,
        "wires": [
            [
                "20e2bb4192bab23f"
            ]
        ]
    },
    {
        "id": "14ca10eb1390baa4",
        "type": "comment",
        "z": "1ce1485ad608bc7a",
        "name": "########## Exceptions Treatment",
        "info": "",
        "x": 179,
        "y": 1495,
        "wires": []
    },
    {
        "id": "20e2bb4192bab23f",
        "type": "debug",
        "z": "1ce1485ad608bc7a",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 1556,
        "wires": []
    },
    {
        "id": "fb8994c311d75eb2",
        "type": "comment",
        "z": "1ce1485ad608bc7a",
        "name": "########## Update alarms list",
        "info": "",
        "x": 170,
        "y": 1095,
        "wires": []
    },
    {
        "id": "2112cb721aef7fa5",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "1ce1485ad608bc7a",
        "name": "",
        "x": 420,
        "y": 1177,
        "wires": [
            [
                "8c16d74e5c87fa44"
            ],
            [
                "46bbec51c1845bc2"
            ]
        ]
    },
    {
        "id": "b89e1b2327a1279f",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Delete current alarms list",
        "func": "msg.payload = {\n    action: 'LPOP',\n    params: [{\n        key: msg.device.id,\n        values: msg.total\n    }]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1177,
        "wires": [
            [
                "2112cb721aef7fa5"
            ]
        ]
    },
    {
        "id": "cf67aacc68164b4f",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Get failures rules",
        "func": "msg.payload = 'SELECT * FROM ALARMS_LIST';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 275,
        "wires": [
            [
                "0e4b70d0dd4314d2"
            ]
        ]
    },
    {
        "id": "0e4b70d0dd4314d2",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "a716829fd201f4fd",
        "name": "",
        "x": 360,
        "y": 275,
        "wires": [
            [
                "d0a5b16d59230622"
            ]
        ]
    },
    {
        "id": "d0a5b16d59230622",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Parse result",
        "func": "let failures = msg.payload;\n\nfailures = failures.map(failure => {\n    if (failure.rele_state !== null) {\n        const state = {};\n        \n        state.value = failure.rele_state;\n        state.threshold = { begin: failure.interval_begin , end: failure.interval_end };\n        \n        failure.rele_state = state;\n    }\n    \n    if (failure.look_for !== null) {\n        failure.look_for = failure.look_for.split(',').map(id => parseInt(id));\n    } else {\n        failure.look_for = [];\n    }\n    \n    delete failure.interval_begin;\n    delete failure.interval_end;\n    \n    return failure;\n});\n\nmsg.failures = failures;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 275,
        "wires": [
            [
                "478979063431a377"
            ]
        ]
    },
    {
        "id": "a778e665bd2949fd",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Get failures rules",
        "func": "msg.payload = 'SELECT * FROM ALARMS_LIST';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 274,
        "wires": [
            [
                "7bce9583437a84ac"
            ]
        ]
    },
    {
        "id": "7bce9583437a84ac",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "1ce1485ad608bc7a",
        "name": "",
        "x": 360,
        "y": 274,
        "wires": [
            [
                "93b5025afe6c3209"
            ]
        ]
    },
    {
        "id": "93b5025afe6c3209",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Parse result",
        "func": "let failures = msg.payload;\n\nfailures = failures.map(failure => {\n    if (failure.rele_state !== null) {\n        const state = {};\n        \n        state.value = failure.rele_state;\n        state.threshold = { begin: failure.interval_begin , end: failure.interval_end };\n        \n        failure.rele_state = state;\n    }\n    \n    if (failure.look_for !== null) {\n        failure.look_for = failure.look_for.split(',').map(id => parseInt(id));\n    } else {\n        failure.look_for = [];\n    }\n    \n    delete failure.interval_begin;\n    delete failure.interval_end;\n    \n    return failure;\n});\n\nmsg.failures = failures;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 274,
        "wires": [
            [
                "f6a2e4e634b990fa"
            ]
        ]
    },
    {
        "id": "14075ea953c0fac3",
        "type": "switch",
        "z": "1ce1485ad608bc7a",
        "name": "Left alarms?",
        "property": "alarms.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 1319,
        "wires": [
            [
                "3d38d1e54993ad8c"
            ],
            [
                "e349c6da73052ef9"
            ]
        ]
    },
    {
        "id": "e349c6da73052ef9",
        "type": "debug",
        "z": "1ce1485ad608bc7a",
        "name": "[EXIT 2] Update alarms list",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 1341,
        "wires": []
    },
    {
        "id": "8c16d74e5c87fa44",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (2) Update alarms list",
        "links": [
            "71887d69ecbccb90"
        ],
        "x": 555,
        "y": 1156,
        "wires": []
    },
    {
        "id": "71887d69ecbccb90",
        "type": "link in",
        "z": "1ce1485ad608bc7a",
        "name": "IN (2) Update alarms list",
        "links": [
            "8c16d74e5c87fa44"
        ],
        "x": 55,
        "y": 1319,
        "wires": [
            [
                "14075ea953c0fac3"
            ]
        ]
    },
    {
        "id": "0ebb6748382350a1",
        "type": "comment",
        "z": "4a674aaa9e667dd6",
        "name": "########## Get alarms of device",
        "info": "",
        "x": 170,
        "y": 1096,
        "wires": []
    },
    {
        "id": "ac7d4375f61cbffc",
        "type": "http in",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "url": "/devices/info/alarms",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1177,
        "wires": [
            [
                "73ec4cc75728f245"
            ]
        ]
    },
    {
        "id": "73ec4cc75728f245",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Search for alarms",
        "func": "const device_id = msg.payload.device_id;\n\nmsg.payload = {\n    action: 'LRANGE',\n    params: [{\n        key: device_id,\n        values: {\n            start: 0,\n            stop: -1\n        }\n    }]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1177,
        "wires": [
            [
                "909d876e8a218e4f"
            ]
        ]
    },
    {
        "id": "909d876e8a218e4f",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "x": 560,
        "y": 1177,
        "wires": [
            [
                "dc283aa3dce143dc"
            ],
            [
                "501a634f773ab915"
            ]
        ]
    },
    {
        "id": "501a634f773ab915",
        "type": "debug",
        "z": "4a674aaa9e667dd6",
        "name": "[EXIT 1] Get alarms of device",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 1199,
        "wires": []
    },
    {
        "id": "070dae8fb52096d4",
        "type": "debug",
        "z": "4a674aaa9e667dd6",
        "name": "[EXIT 2] Get alarms of device",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1156,
        "wires": []
    },
    {
        "id": "dc283aa3dce143dc",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Parse result",
        "func": "function formatDate (timestamp) {\n    const date = new Date(timestamp * 1000);\n    \n    const day   = `0${date.getDate()}`.slice(-2); \n    const month = `0${date.getMonth()+1}`.slice(-2);\n    const year  = date.getFullYear();\n    const hour  = `0${date.getHours()}`.slice(-2);\n    const min   = `0${date.getMinutes()}`.slice(-2);\n    const sec   = `0${date.getSeconds()}`.slice(-2);\n    \n    return `${day}/${month}/${year} ${hour}:${min}:${sec}`;\n}\n\nlet alarms = msg.payload;\n\nalarms = alarms.map(alarm => {\n    alarm = alarm.result;\n    \n    alarm.creation_time = formatDate(alarm.creation_time);\n    \n    delete alarm.type;\n    delete alarm.device_id;\n    delete alarm.problem_counter;\n    delete alarm.resolve_counter;\n    \n    return alarm;\n});\n\nalarms = alarms.filter(alarm => alarm.id !== '');\n\nmsg.payload = alarms;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1155,
        "wires": [
            [
                "070dae8fb52096d4",
                "cf05803867f3abd4"
            ]
        ]
    },
    {
        "id": "cf05803867f3abd4",
        "type": "http response",
        "z": "4a674aaa9e667dd6",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 920,
        "y": 1155,
        "wires": []
    },
    {
        "id": "85a48ca071771654",
        "type": "mqtt in",
        "z": "8813ec2835daae18",
        "name": "Sensors Output Public",
        "topic": "pgc_ufabc/devices/measures",
        "qos": "0",
        "datatype": "json",
        "broker": "1278b67130dc94fa",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 140,
        "y": 176,
        "wires": [
            [
                "96803667e593d0dc"
            ]
        ]
    },
    {
        "id": "9daeb4c690348a8b",
        "type": "switch",
        "z": "e27b09cd4ecd866a",
        "name": "What is device ID?",
        "property": "device_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 190,
        "wires": [
            [
                "7ada6d2a89919aee"
            ],
            [
                "2baad984afc85eae"
            ]
        ]
    },
    {
        "id": "8424f1c292375f5a",
        "type": "switch",
        "z": "e27b09cd4ecd866a",
        "name": "What is device ID?",
        "property": "device_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 402,
        "wires": [
            [
                "10b9534d381f31d9"
            ],
            [
                "4bc37b961a472284"
            ]
        ]
    },
    {
        "id": "10b9534d381f31d9",
        "type": "mqtt out",
        "z": "e27b09cd4ecd866a",
        "name": "Sensors Input Public",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "1278b67130dc94fa",
        "x": 960,
        "y": 375,
        "wires": []
    },
    {
        "id": "7ada6d2a89919aee",
        "type": "mqtt out",
        "z": "e27b09cd4ecd866a",
        "name": "Sensors Input Public",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "1278b67130dc94fa",
        "x": 1120,
        "y": 163,
        "wires": []
    }
]