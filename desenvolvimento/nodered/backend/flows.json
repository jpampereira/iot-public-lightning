[
    {
        "id": "8813ec2835daae18",
        "type": "tab",
        "label": "Get Sensors Data",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7f5557aca01f4737",
        "type": "tab",
        "label": "Endpoints",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7bfe80d199363eac",
        "type": "tab",
        "label": "Populate historic table",
        "disabled": false,
        "info": ""
    },
    {
        "id": "bab6ffe5b7ae3a28",
        "type": "subflow",
        "name": "Database",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 100,
                "wires": [
                    {
                        "id": "2dc46f9c24f9eb35"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 100,
                "wires": [
                    {
                        "id": "dcf9a148a61be9fc",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "df4bdf4be0d4150f",
        "type": "mqtt-broker",
        "name": "MQTT Mosquitto",
        "broker": "test.mosquitto.org",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "21c629e3be9268f3",
        "type": "mydbConfig",
        "name": "postgres@db:5432/PGC",
        "host": "db",
        "port": "5432",
        "database": "PGC",
        "ssl": false,
        "rejectUnauthorized": false,
        "ca": "",
        "key": "",
        "cert": "",
        "max": "10",
        "min": "1",
        "idle": "1000"
    },
    {
        "id": "2dc46f9c24f9eb35",
        "type": "function",
        "z": "bab6ffe5b7ae3a28",
        "name": "Set Query",
        "func": "msg.query = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 100,
        "wires": [
            [
                "bb3a8d2b7854dccb"
            ]
        ]
    },
    {
        "id": "dcf9a148a61be9fc",
        "type": "function",
        "z": "bab6ffe5b7ae3a28",
        "name": "Get Query Response",
        "func": "const query_response = msg.payload.rows;\n\ndelete msg.query;\n\nmsg.payload = query_response;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "bb3a8d2b7854dccb",
        "type": "mydb",
        "z": "bab6ffe5b7ae3a28",
        "name": "Execute Query",
        "style": "mustache",
        "substEnvVars": false,
        "query": "{{{ msg.query }}};",
        "mydbConfig": "21c629e3be9268f3",
        "x": 360,
        "y": 100,
        "wires": [
            [
                "dcf9a148a61be9fc"
            ]
        ]
    },
    {
        "id": "8b614dd0c4e7ecd6",
        "type": "mqtt in",
        "z": "8813ec2835daae18",
        "name": "Sensors Output",
        "topic": "pgc_ufabc/devices/measures",
        "qos": "0",
        "datatype": "json",
        "broker": "df4bdf4be0d4150f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 120,
        "y": 117,
        "wires": [
            [
                "187acea3920b5c2c"
            ]
        ]
    },
    {
        "id": "80a46d82ca4455ee",
        "type": "catch",
        "z": "8813ec2835daae18",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 101,
        "y": 496,
        "wires": [
            [
                "4fed0b38fbbe8ae3"
            ]
        ]
    },
    {
        "id": "27e7cc799e913f9c",
        "type": "comment",
        "z": "8813ec2835daae18",
        "name": "Exceptions Treatment",
        "info": "",
        "x": 140,
        "y": 435,
        "wires": []
    },
    {
        "id": "4fed0b38fbbe8ae3",
        "type": "debug",
        "z": "8813ec2835daae18",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 251,
        "y": 496,
        "wires": []
    },
    {
        "id": "187acea3920b5c2c",
        "type": "function",
        "z": "8813ec2835daae18",
        "name": "Parse output",
        "func": "msg.sensor_output = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 117,
        "wires": [
            [
                "42c1b1a281ba72f5"
            ]
        ]
    },
    {
        "id": "d5ce424ec67d4654",
        "type": "comment",
        "z": "8813ec2835daae18",
        "name": "Store sensors data",
        "info": "",
        "x": 130,
        "y": 235,
        "wires": []
    },
    {
        "id": "4f84135b11c27312",
        "type": "link out",
        "z": "8813ec2835daae18",
        "name": "OUT (1) Receive sensors data",
        "links": [
            "88a5b57865658712"
        ],
        "x": 975,
        "y": 95,
        "wires": []
    },
    {
        "id": "88a5b57865658712",
        "type": "link in",
        "z": "8813ec2835daae18",
        "name": "IN (1) Store sensors data",
        "links": [
            "4f84135b11c27312"
        ],
        "x": 55,
        "y": 275,
        "wires": [
            [
                "96803667e593d0dc"
            ]
        ]
    },
    {
        "id": "96803667e593d0dc",
        "type": "function",
        "z": "8813ec2835daae18",
        "name": "Set query",
        "func": "const sensor_output = msg.sensor_output;\n\nmsg.payload = `INSERT \n               INTO SENSORS_DATA_REAL_TIME (DEVICE_ID, VOLTAGE, CURRENT, LIGHTNESS, RELE_STATE) \n               VALUES (${sensor_output.device_id}, ${sensor_output.voltage}, ${sensor_output.current}, ${sensor_output.lightness}, '${sensor_output.rele_state}')`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 275,
        "wires": [
            [
                "fea15522f7bc9730"
            ]
        ]
    },
    {
        "id": "fea15522f7bc9730",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "8813ec2835daae18",
        "name": "",
        "env": [],
        "x": 300,
        "y": 275,
        "wires": [
            [
                "8885c9540ad9bf99"
            ]
        ]
    },
    {
        "id": "8885c9540ad9bf99",
        "type": "debug",
        "z": "8813ec2835daae18",
        "name": "[EXIT] Store sensors data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 490,
        "y": 275,
        "wires": []
    },
    {
        "id": "6c14b6de93cba404",
        "type": "comment",
        "z": "8813ec2835daae18",
        "name": "Receive sensors data",
        "info": "",
        "x": 140,
        "y": 55,
        "wires": []
    },
    {
        "id": "4ac549b1969b0168",
        "type": "catch",
        "z": "7f5557aca01f4737",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 1036,
        "wires": [
            [
                "1705d89c23ac2369"
            ]
        ]
    },
    {
        "id": "fca56cd6fe289503",
        "type": "comment",
        "z": "7f5557aca01f4737",
        "name": "Exceptions Treatment",
        "info": "",
        "x": 140,
        "y": 995,
        "wires": []
    },
    {
        "id": "1705d89c23ac2369",
        "type": "debug",
        "z": "7f5557aca01f4737",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 1036,
        "wires": []
    },
    {
        "id": "c6a98241887037fd",
        "type": "mqtt out",
        "z": "7f5557aca01f4737",
        "name": "Sensors Input",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "df4bdf4be0d4150f",
        "x": 1040,
        "y": 816,
        "wires": []
    },
    {
        "id": "e0b9c1eff2e18be5",
        "type": "comment",
        "z": "7f5557aca01f4737",
        "name": "##### Devices actions [/devices/actions] #####",
        "info": "",
        "x": 220,
        "y": 735,
        "wires": []
    },
    {
        "id": "ec0b2b7b6c301d78",
        "type": "http in",
        "z": "7f5557aca01f4737",
        "name": "",
        "url": "/devices/actions/on-off",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 310,
        "y": 796,
        "wires": [
            [
                "9303e5e1209fd13a"
            ]
        ]
    },
    {
        "id": "2ea58b854874e1f9",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Parse request body",
        "func": "const device_id = msg.payload[0].id;\nconst action    = msg.action;\n\nmsg.topic = `pgc_ufabc/devices/actions/${device_id}`;\nmsg.payload = action;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 796,
        "wires": [
            [
                "d72bcdcd084b8be6",
                "c6a98241887037fd"
            ]
        ]
    },
    {
        "id": "aecf27c4524c85ed",
        "type": "http response",
        "z": "7f5557aca01f4737",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 1240,
        "y": 776,
        "wires": []
    },
    {
        "id": "bf3565fe998b3d15",
        "type": "http in",
        "z": "7f5557aca01f4737",
        "name": "",
        "url": "/devices/info",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 556,
        "wires": [
            [
                "4a2f6b921cc7b9aa"
            ]
        ]
    },
    {
        "id": "28915e0493ef6a3f",
        "type": "comment",
        "z": "7f5557aca01f4737",
        "name": "##### Get devices informations [/devices/info] #####",
        "info": "",
        "x": 230,
        "y": 515,
        "wires": []
    },
    {
        "id": "ede3351d6c899062",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7f5557aca01f4737",
        "name": "",
        "env": [],
        "x": 620,
        "y": 556,
        "wires": [
            [
                "94a44686fd3a0972"
            ]
        ]
    },
    {
        "id": "4eb5c88f1b01827b",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set query",
        "func": "const device_name = msg.device_name;\n\nmsg.payload = `SELECT DI.COORDINATES, DI.STREET, D.DISTRICT, Z.ZONE, DI.INTERVAL, DI.STATUS\n               FROM DEVICES_INVENTORY AS DI JOIN DISTRICTS AS D ON DI.DISTRICT_ID = D.ID\n               JOIN ZONES AS Z ON D.ZONE_ID = Z.ID\n               WHERE DEVICE_NAME = '${device_name}'`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 556,
        "wires": [
            [
                "ede3351d6c899062"
            ]
        ]
    },
    {
        "id": "fd5c74c4ecda2310",
        "type": "http response",
        "z": "7f5557aca01f4737",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 940,
        "y": 556,
        "wires": []
    },
    {
        "id": "ad7a04302aa7d2a5",
        "type": "inject",
        "z": "7bfe80d199363eac",
        "name": "[TRIGGER] Execute every 1 hour",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "0 0-23 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 205,
        "y": 95,
        "wires": [
            [
                "321102acad131081"
            ]
        ]
    },
    {
        "id": "c1d56661b93bc251",
        "type": "comment",
        "z": "7bfe80d199363eac",
        "name": "Merge dataset of last 1 hour",
        "info": "",
        "x": 160,
        "y": 56,
        "wires": []
    },
    {
        "id": "65af7ad57593057d",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7bfe80d199363eac",
        "name": "",
        "x": 1180,
        "y": 95,
        "wires": [
            [
                "b5f99fa633c93197"
            ]
        ]
    },
    {
        "id": "9563eb3f5af48c81",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Get active devices",
        "func": "msg.payload = `SELECT ID FROM DEVICES_INVENTORY WHERE STATUS = '1'`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 156,
        "wires": [
            [
                "5591169f8bdc17c3"
            ]
        ]
    },
    {
        "id": "595d6b6ee38f20b2",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Delete sensors data from more than a hour",
        "func": "const timestamp = msg.timestamp;\n\nconst date = new Date(timestamp);\ndate.setSeconds(0);\ndate.setMilliseconds(0);\n\nconst year = date.getFullYear();\nconst mon  = `0${date.getMonth()+1}`.slice(-2);\nconst day  = `0${date.getDate()}`.slice(-2);\nconst hour = `0${date.getHours()}`.slice(-2);\nconst min  = `0${date.getMinutes()}`.slice(-2);\nconst sec  = `0${date.getSeconds()}`.slice(-2);\n\nconst format_date = `${year}-${mon}-${day} ${hour}:${min}:${sec}`;\n\nmsg.payload = `DELETE\n               FROM SENSORS_DATA_REAL_TIME\n               WHERE (INSERTION_TIME AT TIME ZONE 'CST') < (TO_TIMESTAMP('${format_date}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST') - INTERVAL '1 hour'`;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 95,
        "wires": [
            [
                "65af7ad57593057d"
            ]
        ]
    },
    {
        "id": "b5f99fa633c93197",
        "type": "link out",
        "z": "7bfe80d199363eac",
        "name": "OUT (1) Merge dataset of last 1 hour",
        "links": [
            "332a597c5d4b37eb"
        ],
        "x": 1275,
        "y": 95,
        "wires": []
    },
    {
        "id": "332a597c5d4b37eb",
        "type": "link in",
        "z": "7bfe80d199363eac",
        "name": "IN (1) Merge dataset of last 1 hour",
        "links": [
            "b5f99fa633c93197"
        ],
        "x": 55,
        "y": 156,
        "wires": [
            [
                "9563eb3f5af48c81"
            ]
        ]
    },
    {
        "id": "5591169f8bdc17c3",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7bfe80d199363eac",
        "name": "",
        "x": 360,
        "y": 156,
        "wires": [
            [
                "beecc4814c6aae9f"
            ]
        ]
    },
    {
        "id": "beecc4814c6aae9f",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Get devices id",
        "func": "const active_devices = msg.payload;\n\nconst devices_id = active_devices.map(row => row.id);\n\nmsg.payload = devices_id;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 156,
        "wires": [
            [
                "ed99fca3c09600af"
            ]
        ]
    },
    {
        "id": "ed99fca3c09600af",
        "type": "split",
        "z": "7bfe80d199363eac",
        "name": "Split devices",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 156,
        "wires": [
            [
                "693d574d15cb8f85"
            ]
        ]
    },
    {
        "id": "eac004593bcd4e52",
        "type": "catch",
        "z": "7bfe80d199363eac",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 536,
        "wires": [
            [
                "2917f36263955a9a"
            ]
        ]
    },
    {
        "id": "9371aee991e4b665",
        "type": "comment",
        "z": "7bfe80d199363eac",
        "name": "Exceptions Treatment",
        "info": "",
        "x": 139,
        "y": 475,
        "wires": []
    },
    {
        "id": "2917f36263955a9a",
        "type": "debug",
        "z": "7bfe80d199363eac",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 536,
        "wires": []
    },
    {
        "id": "693d574d15cb8f85",
        "type": "link out",
        "z": "7bfe80d199363eac",
        "name": "OUT (2) Merge dataset of last 1 hour",
        "links": [
            "8d1428957fa20719"
        ],
        "x": 795,
        "y": 156,
        "wires": []
    },
    {
        "id": "8d1428957fa20719",
        "type": "link in",
        "z": "7bfe80d199363eac",
        "name": "IN (2) Merge dataset of last 1 hour",
        "links": [
            "693d574d15cb8f85"
        ],
        "x": 55,
        "y": 235,
        "wires": [
            [
                "0f771eab714c377a"
            ]
        ]
    },
    {
        "id": "0f771eab714c377a",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Get sensors data from last 1 hour",
        "func": "function format_date(timestamp) {\n    const year = timestamp.getFullYear();\n    const mon  = `0${timestamp.getMonth()+1}`.slice(-2);\n    const day  = `0${timestamp.getDate()}`.slice(-2);\n    const hour = `0${timestamp.getHours()}`.slice(-2);\n    const min  = `0${timestamp.getMinutes()}`.slice(-2);\n    const sec  = `0${timestamp.getSeconds()}`.slice(-2);\n    \n    return `${year}-${mon}-${day} ${hour}:${min}:${sec}`;\n}\n\nconst device_id = msg.payload;\nconst timestamp = msg.timestamp;\n\nconst date = new Date(timestamp);\ndate.setSeconds(0);\ndate.setMilliseconds(0);\n\nconst end = format_date(date);\n\ndate.setMinutes(date.getMinutes()-60);\n\nconst begin = format_date(date);\n\nmsg.payload = `SELECT VOLTAGE, CURRENT, LIGHTNESS, RELE_STATE, INSERTION_TIME\n               FROM SENSORS_DATA_REAL_TIME\n               WHERE DEVICE_ID = ${device_id}\n               AND (INSERTION_TIME AT TIME ZONE 'CST') >= (TO_TIMESTAMP('${begin}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST')\n               AND (INSERTION_TIME AT TIME ZONE 'CST') < (TO_TIMESTAMP('${end}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST')\n               ORDER BY INSERTION_TIME`;\n               \nmsg.device_id = device_id;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 235,
        "wires": [
            [
                "03af6adb8219152a"
            ]
        ]
    },
    {
        "id": "03af6adb8219152a",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7bfe80d199363eac",
        "name": "",
        "x": 460,
        "y": 235,
        "wires": [
            [
                "bc47812a82cb85c3"
            ]
        ]
    },
    {
        "id": "6c62112a5cd8d179",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Calculate powers",
        "func": "let dataset = msg.payload;\n\ndataset = dataset.map(data => {\n    data.power = Math.round(data.voltage * data.current);\n    return data;\n});\n\nmsg.payload = dataset;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 216,
        "wires": [
            [
                "78cd9ac0cd2c0ec3"
            ]
        ]
    },
    {
        "id": "78cd9ac0cd2c0ec3",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Calculate max, min and avg",
        "func": "const dataset = msg.payload;\n\n// Functions\nconst min = dataset => Math.min(...dataset);\nconst max = dataset => Math.max(...dataset);\nconst avg = dataset => (dataset.reduce((acc, cur) => acc + cur, 0) / dataset.length);\n\n// Get data from a specific measure\nconst voltages  = dataset.map(data => data.voltage);\nconst currents  = dataset.map(data => data.current); \nconst lightness = dataset.map(data => data.lightness);\nconst powers    = dataset.map(data => data.power);\n\nconst results = {\n    voltage:   { min: min(voltages),  max: max(voltages),  avg: Math.round(avg(voltages))            },\n    current:   { min: min(currents),  max: max(currents),  avg: parseFloat(avg(currents).toFixed(2)) },\n    lightness: { min: min(lightness), max: max(lightness), avg: Math.round(avg(lightness))           },\n    power:     { min: min(powers),    max: max(powers),    avg: Math.round(avg(powers))              }\n}\n\nmsg.dataset = dataset;\nmsg.results = results;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 216,
        "wires": [
            [
                "a6f8cbe1cf99fbb7"
            ]
        ]
    },
    {
        "id": "bc47812a82cb85c3",
        "type": "switch",
        "z": "7bfe80d199363eac",
        "name": "Found data?",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 235,
        "wires": [
            [
                "6c62112a5cd8d179"
            ],
            [
                "8d3e52ed971b346e"
            ]
        ]
    },
    {
        "id": "a6f8cbe1cf99fbb7",
        "type": "link out",
        "z": "7bfe80d199363eac",
        "name": "OUT (3) Merge dataset of last 1 hour",
        "links": [
            "3648289a20e9cc5d"
        ],
        "x": 1195,
        "y": 216,
        "wires": []
    },
    {
        "id": "3648289a20e9cc5d",
        "type": "link in",
        "z": "7bfe80d199363eac",
        "name": "IN (3) Merge dataset of last 1 hour",
        "links": [
            "a6f8cbe1cf99fbb7"
        ],
        "x": 55,
        "y": 316,
        "wires": [
            [
                "2233a99dd3d33b7e"
            ]
        ]
    },
    {
        "id": "acbdd010515a12d1",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Insert results in database",
        "func": "function format_date(timestamp) {\n    const year = timestamp.getFullYear();\n    const mon  = `0${timestamp.getMonth()+1}`.slice(-2);\n    const day  = `0${timestamp.getDate()}`.slice(-2);\n    const hour = `0${timestamp.getHours()}`.slice(-2);\n    const min  = `0${timestamp.getMinutes()}`.slice(-2);\n    const sec  = `0${timestamp.getSeconds()}`.slice(-2);\n    \n    return `${year}-${mon}-${day} ${hour}:${min}:${sec}`;\n}\n\nconst device_id = msg.device_id;\nconst results   = msg.results;\nconst dataset   = msg.dataset;\nconst timestamp = msg.timestamp;\n\nconst date = new Date(timestamp);\ndate.setSeconds(0);\ndate.setMilliseconds(0);\n\nconst insertion_time = format_date(date);\n\nconst voltage   = results.voltage;\nconst current   = results.current;\nconst lightness = results.lightness;\nconst power     = results.power;\n\nmsg.payload = `INSERT\n               INTO SENSORS_DATA_INTERVAL\n               (DEVICE_ID, VOLTAGE_MIN, VOLTAGE_MAX, VOLTAGE_AVG, CURRENT_MIN, CURRENT_MAX, CURRENT_AVG, LIGHTNESS_MIN, LIGHTNESS_MAX, LIGHTNESS_AVG, POWER_MIN, POWER_MAX, POWER_AVG, POWER_EXPEND, INSERTION_TIME, NUM_REGISTRIES)\n               VALUES\n               (${device_id}, ${voltage.min}, ${voltage.max}, ${voltage.avg}, ${current.min}, ${current.max}, ${current.avg}, ${lightness.min}, ${lightness.max}, ${lightness.avg}, ${power.min}, ${power.max}, ${power.avg}, ${results.power_expend}, '${insertion_time}', ${dataset.length})`;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 316,
        "wires": [
            [
                "a7f85d37f23ca51c",
                "0e031983ba29c66c"
            ]
        ]
    },
    {
        "id": "a7f85d37f23ca51c",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7bfe80d199363eac",
        "name": "",
        "x": 641,
        "y": 316,
        "wires": [
            []
        ]
    },
    {
        "id": "0e031983ba29c66c",
        "type": "debug",
        "z": "7bfe80d199363eac",
        "name": "[EXIT 2] Merge dataset of last 1 hour",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 316,
        "wires": []
    },
    {
        "id": "d72bcdcd084b8be6",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Prepare response",
        "func": "msg.payload = 'OK';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 776,
        "wires": [
            [
                "c67c3c1b66b9ba58",
                "aecf27c4524c85ed"
            ]
        ]
    },
    {
        "id": "a54251fe8fe370a5",
        "type": "debug",
        "z": "7f5557aca01f4737",
        "name": "[EXIT 1] Get devices informations",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 556,
        "wires": []
    },
    {
        "id": "c67c3c1b66b9ba58",
        "type": "debug",
        "z": "7f5557aca01f4737",
        "name": "[EXIT] Devices actions",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1440,
        "y": 776,
        "wires": []
    },
    {
        "id": "2233a99dd3d33b7e",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Calculate power expend",
        "func": "const dataset = msg.dataset;\n\nlet sum = 0;\n\nlet i, j;\n\nfor (i = 0; i < dataset.length; i++) {\n    if (dataset[i].rele_state === true) {\n        for (j = i+1; j < dataset.length && dataset[j].rele_state === true; j++);\n\n        const interval = dataset.slice(i, j);\n        \n        const begin = new Date(interval[0].insertion_time);\n        const final = new Date(interval[interval.length-1].insertion_time);\n        \n        const time_diff = (final-begin)/(1000*60*60); // milliseconds * seconds * minutes\n        \n        const voltage_avg = interval.reduce((acc, cur) => acc + cur.voltage, 0) / interval.length;\n        const current_avg = interval.reduce((acc, cur) => acc + cur.current, 0) / interval.length;\n        \n        sum += (((voltage_avg * current_avg) / 1000) * time_diff);\n        \n        i = j-1;\n    }\n}\n\nmsg.results.power_expend = parseFloat(sum.toFixed(2)); // in kW/h\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 316,
        "wires": [
            [
                "acbdd010515a12d1"
            ]
        ]
    },
    {
        "id": "5c7a0baf83fa417c",
        "type": "comment",
        "z": "7f5557aca01f4737",
        "name": "##### Get sensors data [/devices/measures] #####",
        "info": "",
        "x": 230,
        "y": 55,
        "wires": []
    },
    {
        "id": "1c9633d021328e7c",
        "type": "http in",
        "z": "7f5557aca01f4737",
        "name": "",
        "url": "/devices/measures/interval",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 171,
        "y": 235,
        "wires": [
            [
                "96bdf6630c129c17"
            ]
        ]
    },
    {
        "id": "ddca169b2eed6b38",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set query",
        "func": "// Get data from last 24 hours or week\n\nfunction format_date (timestamp) {\n    const year = timestamp.getFullYear();\n    const mon  = `0${timestamp.getMonth()+1}`.slice(-2);\n    const day  = `0${timestamp.getDate()}`.slice(-2);\n    const hour = `0${timestamp.getHours()}`.slice(-2);\n    const min  = `0${timestamp.getMinutes()}`.slice(-2);\n    const sec  = `0${timestamp.getSeconds()}`.slice(-2);\n    \n    return `${year}-${mon}-${day} ${hour}:${min}:${sec}`;\n}\n\nconst threshold   = msg.threshold;\nconst interval    = msg.interval;\nconst device_name = msg.device_name;\n\nconst end   = format_date(threshold);\nconst begin = format_date(new Date(threshold - 1000 * 60 * interval));\n\nmsg.payload = `SELECT SDI.DEVICE_ID, SDI.VOLTAGE_MIN, SDI.VOLTAGE_MAX, SDI.VOLTAGE_AVG, SDI.CURRENT_MIN, SDI.CURRENT_MAX, SDI.CURRENT_AVG, SDI.LIGHTNESS_MIN, SDI.LIGHTNESS_MAX, SDI.LIGHTNESS_AVG, SDI.POWER_MIN, SDI.POWER_MAX, SDI.POWER_AVG, SDI.POWER_EXPEND, SDI.NUM_REGISTRIES, SDI.INSERTION_TIME\n               FROM SENSORS_DATA_INTERVAL AS SDI JOIN DEVICES_INVENTORY AS DI ON SDI.DEVICE_ID = DI.ID \n               WHERE DI.DEVICE_NAME = '${device_name}'\n               AND (SDI.INSERTION_TIME AT TIME ZONE 'CST') > (TO_TIMESTAMP('${begin}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST') \n               AND (SDI.INSERTION_TIME AT TIME ZONE 'CST') <= (TO_TIMESTAMP('${end}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST')\n               ORDER BY SDI.INSERTION_TIME`;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 214,
        "wires": [
            [
                "6ec488a047717083"
            ]
        ]
    },
    {
        "id": "47e86d41591c2ef2",
        "type": "http response",
        "z": "7f5557aca01f4737",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 540,
        "y": 415,
        "wires": []
    },
    {
        "id": "6ec488a047717083",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7f5557aca01f4737",
        "name": "",
        "x": 1180,
        "y": 214,
        "wires": [
            [
                "7cdff54cf4f12948"
            ]
        ]
    },
    {
        "id": "dc71772a94af1a6d",
        "type": "debug",
        "z": "7f5557aca01f4737",
        "name": "[EXIT 2] Get sensors data ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 415,
        "wires": []
    },
    {
        "id": "1a6d28956a0d6589",
        "type": "switch",
        "z": "7f5557aca01f4737",
        "name": "What's the interval?",
        "property": "interval",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "60",
                "vt": "num"
            },
            {
                "t": "lt",
                "v": "44640",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 830,
        "y": 214,
        "wires": [
            [
                "57ce85e61299af4e"
            ],
            [
                "ddca169b2eed6b38"
            ],
            [
                "9e05e185a3257074"
            ]
        ]
    },
    {
        "id": "57ce85e61299af4e",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set query",
        "func": "// Get data from last hour\n\nfunction format_date (timestamp) {\n    const year = timestamp.getFullYear();\n    const mon  = `0${timestamp.getMonth()+1}`.slice(-2);\n    const day  = `0${timestamp.getDate()}`.slice(-2);\n    const hour = `0${timestamp.getHours()}`.slice(-2);\n    const min  = `0${timestamp.getMinutes()}`.slice(-2);\n    const sec  = `0${timestamp.getSeconds()}`.slice(-2);\n    \n    return `${year}-${mon}-${day} ${hour}:${min}:${sec}`;\n}\n\nconst threshold   = msg.threshold;\nconst interval    = msg.interval;\nconst device_name = msg.device_name;\n\nconst end   = format_date(threshold);\nconst begin = format_date(new Date(threshold - 1000 * 60 * interval));\n\nmsg.payload = `SELECT SDRT.DEVICE_ID, SDRT.VOLTAGE, SDRT.CURRENT, SDRT.LIGHTNESS, SDRT.RELE_STATE, SDRT.INSERTION_TIME\n               FROM SENSORS_DATA_REAL_TIME AS SDRT JOIN DEVICES_INVENTORY AS DI ON SDRT.DEVICE_ID = DI.ID \n               WHERE DI.DEVICE_NAME = '${device_name}'\n               AND (INSERTION_TIME AT TIME ZONE 'CST') >= (TO_TIMESTAMP('${begin}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST') \n               AND (INSERTION_TIME AT TIME ZONE 'CST') < (TO_TIMESTAMP('${end}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST')\n               ORDER BY INSERTION_TIME`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 176,
        "wires": [
            [
                "6ec488a047717083"
            ]
        ]
    },
    {
        "id": "1bb825e2928759bb",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Calculate powers",
        "func": "let dataset = msg.payload;\n\ndataset = dataset.map(data => {\n    data.power = Math.round(data.voltage * data.current);\n    return data;\n});\n\nmsg.payload = dataset;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 315,
        "wires": [
            [
                "97320d78a0801902"
            ]
        ]
    },
    {
        "id": "f37dd2752270a5c8",
        "type": "switch",
        "z": "7f5557aca01f4737",
        "name": "What's the interval?",
        "property": "interval",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "60",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 337,
        "wires": [
            [
                "1bb825e2928759bb"
            ],
            [
                "6cf164c9f164c150"
            ]
        ]
    },
    {
        "id": "2d413cccf4985d24",
        "type": "link in",
        "z": "7f5557aca01f4737",
        "name": "IN (1) Get sensors data",
        "links": [
            "7cdff54cf4f12948"
        ],
        "x": 55,
        "y": 337,
        "wires": [
            [
                "f37dd2752270a5c8"
            ]
        ]
    },
    {
        "id": "7cdff54cf4f12948",
        "type": "link out",
        "z": "7f5557aca01f4737",
        "name": "OUT (1) Get sensors data",
        "links": [
            "2d413cccf4985d24"
        ],
        "x": 1275,
        "y": 214,
        "wires": []
    },
    {
        "id": "d998e00625e40a86",
        "type": "link out",
        "z": "7f5557aca01f4737",
        "name": "OUT (3) Get sensors data",
        "links": [
            "6383f89379246b18"
        ],
        "x": 715,
        "y": 358,
        "wires": []
    },
    {
        "id": "6b6db413a491a12d",
        "type": "link out",
        "z": "7f5557aca01f4737",
        "name": "OUT (2) Get sensors data",
        "links": [
            "6383f89379246b18"
        ],
        "x": 695,
        "y": 315,
        "wires": []
    },
    {
        "id": "6383f89379246b18",
        "type": "link in",
        "z": "7f5557aca01f4737",
        "name": "IN (2) Get sensors data",
        "links": [
            "6b6db413a491a12d",
            "d998e00625e40a86"
        ],
        "x": 55,
        "y": 415,
        "wires": [
            [
                "5f90a25a42bb5326"
            ]
        ]
    },
    {
        "id": "97320d78a0801902",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Group data",
        "func": "const dataset   = msg.payload;\nconst threshold = msg.threshold;\nconst n_groups  = msg.interval;\nconst hop       = 1000 * 60;\n\n// Create groups\n\nlet i;\nlet groups = [];\n\nfor (i = n_groups; i > 0; i--) {\n    const timestamp = new Date(threshold - hop * i);\n    const measures  = [];\n    \n    groups.push({ timestamp, measures, records: 0 });\n}\n\n// Group data\n\ni = 1;\n\ndataset.forEach(data => {\n    const timestamp = new Date(data.insertion_time);\n    \n    for (i; i < groups.length && timestamp >= groups[i].timestamp; i++);\n\n    groups[i-1].measures.push(data);\n    groups[i-1].records++;\n});\n\n// Sum measures\n\nconst avg = dataset => (dataset.reduce((acc, cur) => acc + cur, 0) / dataset.length) || 0;\n\ngroups = groups.map(group => {\n    const voltage   = group.measures.map(data => data.voltage);\n    const current   = group.measures.map(data => data.current);\n    const lightness = group.measures.map(data => data.lightness);\n    const powers    = group.measures.map(data => data.power);\n    \n    const voltage_avg   = Math.round(avg(voltage));\n    const current_avg   = parseFloat((avg(current)).toFixed(2));\n    const lightness_avg = Math.round(avg(lightness));\n    const powers_avg    = Math.round(avg(powers));\n    \n    group.measures = {\n        voltage:   voltage_avg,\n        current:   current_avg,\n        lightness: lightness_avg,\n        power:     powers_avg\n    }\n    \n    return group;\n});\n\nmsg.dataset = groups;\nmsg.hop     = hop;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 315,
        "wires": [
            [
                "6b6db413a491a12d"
            ]
        ]
    },
    {
        "id": "7287a934bad43292",
        "type": "http in",
        "z": "7f5557aca01f4737",
        "name": "",
        "url": "/devices/measures/last",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 95,
        "wires": [
            [
                "a59199192f78dcc7"
            ]
        ]
    },
    {
        "id": "659446935b848402",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set query",
        "func": "const device_name = msg.device_name;\n\nmsg.payload = `SELECT SDRT.VOLTAGE, SDRT.CURRENT, SDRT.LIGHTNESS, SDRT.RELE_STATE\n               FROM SENSORS_DATA_REAL_TIME AS SDRT JOIN DEVICES_INVENTORY AS DI ON SDRT.DEVICE_ID = DI.ID\n               WHERE DI.DEVICE_NAME = '${device_name}'\n               AND (SDRT.INSERTION_TIME AT TIME ZONE 'CST') > (CURRENT_TIMESTAMP AT TIME ZONE 'CST') - INTERVAL '1 min'\n               ORDER BY SDRT.INSERTION_TIME DESC\n               LIMIT 1;`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 95,
        "wires": [
            [
                "bc421cbbfbd8aa49"
            ]
        ]
    },
    {
        "id": "bc421cbbfbd8aa49",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7f5557aca01f4737",
        "name": "",
        "env": [],
        "x": 700,
        "y": 95,
        "wires": [
            [
                "269b6f17aa90ca43"
            ]
        ]
    },
    {
        "id": "269b6f17aa90ca43",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Calculate power",
        "func": "let dataset = msg.payload;\n\nif (dataset.length > 0) {\n    dataset = dataset.map(data => {\n        // Calculate power\n        data.power = Math.round(data.voltage * data.current);\n        \n        // Convert rele_state\n        data.rele_state = data.rele_state ? 1 : 0;\n        \n        return data;\n    });\n    \n    msg.payload = dataset;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 95,
        "wires": [
            [
                "9853d4fc5f5b1ebf",
                "270828bcb3beacf1"
            ]
        ]
    },
    {
        "id": "270828bcb3beacf1",
        "type": "http response",
        "z": "7f5557aca01f4737",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 1040,
        "y": 95,
        "wires": []
    },
    {
        "id": "9853d4fc5f5b1ebf",
        "type": "debug",
        "z": "7f5557aca01f4737",
        "name": "[EXIT 1] Get sensors data ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 96,
        "wires": []
    },
    {
        "id": "96bdf6630c129c17",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Parse request body",
        "func": "msg.device_name = msg.payload.device_name;\nmsg.interval    = parseInt(msg.payload.interval); // in minutes\n\nconst allowed_intervals = [60, 1440, 10080, 44640];\n\nif (allowed_intervals.includes(msg.interval)) {\n    return [msg, null];\n}\n\nmsg.payload = 'Interval not allowed';\n\nreturn [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 235,
        "wires": [
            [
                "ddeb66f0f282da2c"
            ],
            [
                "4e293f940e64d152"
            ]
        ]
    },
    {
        "id": "ddeb66f0f282da2c",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Define thresholds",
        "func": "const interval = msg.interval;\n\nconst threshold = new Date();\nthreshold.setSeconds(0);\nthreshold.setMilliseconds(0);\n\nif (interval > 60) {\n    threshold.setMinutes(0);\n    \n    if (interval > 1440) {\n        const hour = threshold.getHours();\n        \n        if (hour > 18) { // Hour between 18:01 and 23:59\n            threshold.setHours(18);\n        } else if (hour > 6) { // Hour between 06:01 and 17:59\n            threshold.setHours(6);\n        } else if (hour < 6) { // Hour between 00:00 and 05:59\n            threshold.setDate(threshold.getDate()-1);\n            threshold.setHours(18);\n        }\n    }\n}\n\nmsg.threshold = threshold;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 214,
        "wires": [
            [
                "1a6d28956a0d6589"
            ]
        ]
    },
    {
        "id": "a59199192f78dcc7",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Parse request body",
        "func": "msg.device_name = msg.payload.device_name;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 95,
        "wires": [
            [
                "659446935b848402"
            ]
        ]
    },
    {
        "id": "4a2f6b921cc7b9aa",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Parse request body",
        "func": "msg.device_name = msg.payload.device_name;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 556,
        "wires": [
            [
                "4eb5c88f1b01827b"
            ]
        ]
    },
    {
        "id": "8d3e52ed971b346e",
        "type": "debug",
        "z": "7bfe80d199363eac",
        "name": "[EXIT 1] Merge dataset of last 1 hour",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 256,
        "wires": []
    },
    {
        "id": "0b5d0e0c0b5c98b1",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Group data",
        "func": "const dataset   = msg.payload;\nconst threshold = msg.threshold;\nconst n_groups  = msg.n_groups;\nconst hop       = msg.hop;\nconst interval  = msg.interval;\n\n// Create groups\n\nlet i;\nlet groups = [];\n\nfor (i = n_groups; i > 0; i--) {\n    const timestamp = new Date(threshold - hop * i);\n    const measures  = [];\n    \n    groups.push({ timestamp, measures, records: 0 });\n}\n\n// Group data\n\ni = 1;\n\ndataset.forEach(data => {\n    const timestamp = new Date(data.insertion_time);\n    \n    for (i; i < groups.length && timestamp > groups[i].timestamp; i++);\n\n    groups[i-1].measures.push(data);\n    groups[i-1].records += data.num_registries;\n});\n\n// Sum values\n\nconst min = dataset => Math.min(...dataset) !==  Infinity ? Math.min(...dataset) : 0;\nconst max = dataset => Math.max(...dataset) !== -Infinity ? Math.max(...dataset) : 0;\nconst avg = dataset => (dataset.reduce((acc, cur) => acc + cur, 0) / dataset.length) || 0;\n\ngroups = groups.map(group => {\n    voltage_min   = min(group.measures.map(data => data.voltage_min));\n    voltage_max   = max(group.measures.map(data => data.voltage_max));\n    voltage_avg   = Math.round(avg(group.measures.map(data => data.voltage_avg)));\n    current_min   = min(group.measures.map(data => data.current_min)).toFixed(2);\n    current_max   = max(group.measures.map(data => data.current_max)).toFixed(2);\n    current_avg   = parseFloat((avg(group.measures.map(data => data.current_avg))).toFixed(2));\n    lightness_min = min(group.measures.map(data => data.lightness_min));\n    lightness_max = max(group.measures.map(data => data.lightness_max));\n    lightness_avg = Math.round(avg(group.measures.map(data => data.lightness_avg)));\n    power_min     = min(group.measures.map(data => data.power_min));\n    power_max     = max(group.measures.map(data => data.power_max));\n    power_avg     = Math.round(avg(group.measures.map(data => data.power_avg)));\n    power_expend  = group.measures.reduce((acc, cur) => acc + cur.power_expend, 0);\n    \n    group.measures = {\n        voltage_min,\n        voltage_max,\n        voltage_avg,\n        current_min,\n        current_max,\n        current_avg,\n        lightness_min,\n        lightness_max,\n        lightness_avg,\n        power_min,\n        power_max,\n        power_avg,\n        power_expend\n    }\n    \n    return group;\n});\n\nmsg.dataset = groups;\nmsg.hop     = hop;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 358,
        "wires": [
            [
                "d998e00625e40a86"
            ]
        ]
    },
    {
        "id": "5f90a25a42bb5326",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Create labels",
        "func": "function format_date(timestamp, interval) {\n    const hour = `0${timestamp.getHours()}`.slice(-2);\n    const min  = `0${timestamp.getMinutes()}`.slice(-2);\n    \n    if (interval === 60) {\n        return `${hour}:${min}`;\n    } else {\n        const day  = `0${timestamp.getDate()}`.slice(-2);\n        const mon  = `0${timestamp.getMonth()+1}`.slice(-2);\n        \n        return `${hour}:${min} ${day}/${mon}`;\n    }\n}\n\nconst interval = msg.interval;\nconst hop      = msg.hop;\n\nlet dataset = msg.dataset;\n\ndataset = dataset.map((data, i) => {\n    const timestamp = data.timestamp;\n    \n    const begin = format_date(timestamp, interval);\n    \n    if (interval === 60) {\n        data.label = `${begin} (Número de Registros: ${data.records})`;\n    } else {\n        timestamp.setTime(timestamp.getTime() + hop);\n        const final = format_date(timestamp, interval);\n        \n        data.label = `${begin} à ${final} (Número de Registros: ${data.records})`;\n    }\n    \n    delete data.timestamp;\n    \n    return data;\n});\n\nmsg.dataset = dataset;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 415,
        "wires": [
            [
                "3d4b27a94f96d759"
            ]
        ]
    },
    {
        "id": "3d4b27a94f96d759",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Prepare response",
        "func": "const dataset  = msg.dataset;\nconst interval = msg.interval;\n\nconst labels = dataset.map(data => data.label);\n\nlet values;\n\nif (interval === 60) {\n    values = {\n        voltage:   dataset.map(data => data.measures.voltage),\n        current:   dataset.map(data => data.measures.current),\n        lightness: dataset.map(data => data.measures.lightness),\n        power:     dataset.map(data => data.measures.power)\n    }\n} else {\n    values = {\n        voltage: {\n            min: dataset.map(data => data.measures.voltage_min),\n            max: dataset.map(data => data.measures.voltage_max),\n            avg: dataset.map(data => data.measures.voltage_avg)\n        },\n        current: {\n            min: dataset.map(data => data.measures.current_min),\n            max: dataset.map(data => data.measures.current_max),\n            avg: dataset.map(data => data.measures.current_avg)       \n        },\n        lightness: {\n            min: dataset.map(data => data.measures.lightness_min),\n            max: dataset.map(data => data.measures.lightness_max),\n            avg: dataset.map(data => data.measures.lightness_avg)      \n        },\n        power: {\n            min: dataset.map(data => data.measures.power_min),\n            max: dataset.map(data => data.measures.power_max),\n            avg: dataset.map(data => data.measures.power_avg)          \n        },\n        power_expend: dataset.map((data, i) => {\n            const value    = data.measures.power_expend;\n            const sum_prev = dataset.slice(0, i).reduce((acc, cur) => acc + cur.measures.power_expend, 0);\n    \n            return (value + sum_prev).toFixed(2);\n        })\n    }\n}\n\nmsg.payload = { labels, values };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 415,
        "wires": [
            [
                "dc71772a94af1a6d",
                "47e86d41591c2ef2"
            ]
        ]
    },
    {
        "id": "321102acad131081",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Get current minute",
        "func": "const timestamp = msg.timestamp;\nconst date      = new Date(timestamp);\n\nmsg.payload = date.getMinutes();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 95,
        "wires": [
            [
                "19d3181cd080c2b0"
            ]
        ]
    },
    {
        "id": "19d3181cd080c2b0",
        "type": "switch",
        "z": "7bfe80d199363eac",
        "name": "Execute flow?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 660,
        "y": 95,
        "wires": [
            [
                "595d6b6ee38f20b2"
            ]
        ]
    },
    {
        "id": "136e50967fd0d184",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "8813ec2835daae18",
        "name": "",
        "env": [],
        "x": 640,
        "y": 117,
        "wires": [
            [
                "e3c40742d52ebe20"
            ]
        ]
    },
    {
        "id": "42c1b1a281ba72f5",
        "type": "function",
        "z": "8813ec2835daae18",
        "name": "Get device status",
        "func": "const device_id = msg.sensor_output.device_id;\n\nmsg.payload = `SELECT STATUS FROM DEVICES_INVENTORY WHERE ID = ${device_id}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 117,
        "wires": [
            [
                "136e50967fd0d184"
            ]
        ]
    },
    {
        "id": "e3c40742d52ebe20",
        "type": "function",
        "z": "8813ec2835daae18",
        "name": "Device is operational?",
        "func": "const response = msg.payload;\n\nif (response.length > 0) {\n    const status = response[0].status;\n    \n    if (status === true) {\n        return [msg, null];\n    }\n}\n\nreturn [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 117,
        "wires": [
            [
                "4f84135b11c27312"
            ],
            [
                "c57818bbb89356ec"
            ]
        ]
    },
    {
        "id": "c57818bbb89356ec",
        "type": "debug",
        "z": "8813ec2835daae18",
        "name": "[EXIT] Receive sensors data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 138,
        "wires": []
    },
    {
        "id": "f5156e76dfeb05aa",
        "type": "comment",
        "z": "7f5557aca01f4737",
        "name": "On/Off button",
        "info": "",
        "x": 110,
        "y": 796,
        "wires": []
    },
    {
        "id": "203f3008458c76e9",
        "type": "http in",
        "z": "7f5557aca01f4737",
        "name": "",
        "url": "/devices/info/locations",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 636,
        "wires": [
            [
                "c7e9ca453addc88e"
            ]
        ]
    },
    {
        "id": "5319bc27fd7349fd",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7f5557aca01f4737",
        "name": "",
        "env": [],
        "x": 680,
        "y": 636,
        "wires": [
            [
                "b3c2d212a7837e51"
            ]
        ]
    },
    {
        "id": "057baee8b1ebe845",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set query",
        "func": "const type = msg.type;\n\nmsg.payload = `SELECT DISTINCT ${type} FROM DEVICES_INVENTORY`;\n\nif (type === 'district') {\n    const zone = msg.zone;\n    msg.payload += ` WHERE ZONE = '${zone}'`;\n}\n\nmsg.payload += ` ORDER BY ${type}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 636,
        "wires": [
            [
                "5319bc27fd7349fd"
            ]
        ]
    },
    {
        "id": "117494a16d472669",
        "type": "http response",
        "z": "7f5557aca01f4737",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 1000,
        "y": 636,
        "wires": []
    },
    {
        "id": "183cae93968adc2b",
        "type": "debug",
        "z": "7f5557aca01f4737",
        "name": "[EXIT 2] Get devices informations",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1240,
        "y": 636,
        "wires": []
    },
    {
        "id": "c7e9ca453addc88e",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Parse request body",
        "func": "msg.type = msg.payload.type;\n\nif (msg.type === 'district') {\n    msg.zone = msg.payload.zone;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 636,
        "wires": [
            [
                "057baee8b1ebe845"
            ]
        ]
    },
    {
        "id": "b3c2d212a7837e51",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Parse result",
        "func": "const query_result = msg.payload;\nconst type = msg.type;\n\nmsg.payload = query_result.map(row => row[type]);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 636,
        "wires": [
            [
                "183cae93968adc2b",
                "117494a16d472669"
            ]
        ]
    },
    {
        "id": "94a44686fd3a0972",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Parse result",
        "func": "const device_info = msg.payload[0];\n\nif (device_info !== undefined) {\n    device_info.status = device_info.status === true ? 'OPERACIONAL' : 'NÃO OPERACIONAL';\n    msg.payload = device_info;\n} else {\n    msg.payload = {};\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 556,
        "wires": [
            [
                "a54251fe8fe370a5",
                "fd5c74c4ecda2310"
            ]
        ]
    },
    {
        "id": "9e05e185a3257074",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set query",
        "func": "// Get data from current month\n\nfunction format_date (timestamp) {\n    const year = timestamp.getFullYear();\n    const mon  = `0${timestamp.getMonth()+1}`.slice(-2);\n    const day  = `0${timestamp.getDate()}`.slice(-2);\n    const hour = `0${timestamp.getHours()}`.slice(-2);\n    const min  = `0${timestamp.getMinutes()}`.slice(-2);\n    const sec  = `0${timestamp.getSeconds()}`.slice(-2);\n    \n    return `${year}-${mon}-${day} ${hour}:${min}:${sec}`;\n}\n\nconst threshold   = msg.threshold;\nconst device_name = msg.device_name;\n\nconst end = format_date(threshold);\n\nlet begin = new Date(threshold);\nbegin.setDate(1);\nbegin = format_date(begin);\n\nmsg.payload = `SELECT SDI.DEVICE_ID, SDI.VOLTAGE_MIN, SDI.VOLTAGE_MAX, SDI.VOLTAGE_AVG, SDI.CURRENT_MIN, SDI.CURRENT_MAX, SDI.CURRENT_AVG, SDI.LIGHTNESS_MIN, SDI.LIGHTNESS_MAX, SDI.LIGHTNESS_AVG, SDI.POWER_MIN, SDI.POWER_MAX, SDI.POWER_AVG, SDI.POWER_EXPEND, SDI.NUM_REGISTRIES, SDI.INSERTION_TIME\n               FROM SENSORS_DATA_INTERVAL AS SDI JOIN DEVICES_INVENTORY AS DI ON SDI.DEVICE_ID = DI.ID\n               WHERE DI.DEVICE_NAME = '${device_name}'\n               AND (SDI.INSERTION_TIME AT TIME ZONE 'CST') > (TO_TIMESTAMP('${begin}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST') \n               AND (SDI.INSERTION_TIME AT TIME ZONE 'CST') <= (TO_TIMESTAMP('${end}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST')\n               ORDER BY SDI.INSERTION_TIME`;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1019.75,
        "y": 252.25,
        "wires": [
            [
                "6ec488a047717083"
            ]
        ]
    },
    {
        "id": "6cf164c9f164c150",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set n_groups and hop",
        "func": "const interval = msg.interval;\n\nlet n_groups;\nlet hop;\n\nswitch (interval) {\n    case 1440:\n        n_groups = 24;\n        hop = 1000 * 60 * 60 * 1; // 1 hour (millseconds * seconds * minutes * hours)\n        break;\n    case 10080:\n        n_groups = 14;\n        hop = 1000 * 60 * 60 * 12; // 12 hours\n        break;\n    case 44640:\n        n_groups = (new Date(msg.threshold)).getDate() * 2 - 1;\n        hop = 1000 * 60 * 60 * 12; // 12 hours\n        break;\n}\n\nmsg.n_groups = n_groups;\nmsg.hop      = hop;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 358,
        "wires": [
            [
                "0b5d0e0c0b5c98b1"
            ]
        ]
    },
    {
        "id": "4e293f940e64d152",
        "type": "http response",
        "z": "7f5557aca01f4737",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 620,
        "y": 257,
        "wires": []
    },
    {
        "id": "9303e5e1209fd13a",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Get device id",
        "func": "const action      = msg.payload.action;\nconst device_name = msg.payload.device_name;\n\nmsg.payload = `SELECT ID FROM DEVICES_INVENTORY WHERE DEVICE_NAME = '${device_name}'`;\n\nmsg.action      = action;\nmsg.device_name = device_name;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 796,
        "wires": [
            [
                "764c3912f3c93c68"
            ]
        ]
    },
    {
        "id": "764c3912f3c93c68",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7f5557aca01f4737",
        "name": "",
        "env": [],
        "x": 660,
        "y": 796,
        "wires": [
            [
                "2ea58b854874e1f9"
            ]
        ]
    }
]