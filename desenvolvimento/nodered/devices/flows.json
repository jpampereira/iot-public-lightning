[
    {
        "id": "d54052ea6cb4b184",
        "type": "tab",
        "label": "Simulate devices",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ab0855462a34e9f7",
        "type": "tab",
        "label": "Device actions",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a444632620451a72",
        "type": "tab",
        "label": "Device errors",
        "disabled": false,
        "info": ""
    },
    {
        "id": "86696f385ff65db5",
        "type": "subflow",
        "name": "Database",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 100,
                "wires": [
                    {
                        "id": "acebf4880992c09a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 100,
                "wires": [
                    {
                        "id": "a3af27511d4c1b33",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "185bd0a8b5a4b916",
        "type": "subflow",
        "name": "Database Redis",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 166,
                "wires": [
                    {
                        "id": "3c546124752a49f4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1040,
                "y": 1163,
                "wires": [
                    {
                        "id": "adc4c59772c6298c",
                        "port": 0
                    }
                ]
            },
            {
                "x": 120,
                "y": 1240,
                "wires": [
                    {
                        "id": "ab7425eb7c0d4676",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "0cae39fb33383cf0",
        "type": "mqtt-broker",
        "name": "MQTT Mosquitto",
        "broker": "test.mosquitto.org",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "a60982b15f334d52",
        "type": "mydbConfig",
        "name": "postgres@db:5432/PGC",
        "host": "db",
        "port": "5432",
        "database": "PGC",
        "ssl": false,
        "rejectUnauthorized": false,
        "ca": "",
        "key": "",
        "cert": "",
        "max": "10",
        "min": "1",
        "idle": "1000"
    },
    {
        "id": "a7cb2a42ddfd0d99",
        "type": "redis-config",
        "name": "Redis",
        "options": "{\"host\":\"devices_redis\"}",
        "cluster": false,
        "optionsType": "json"
    },
    {
        "id": "32feb38f11d62b82",
        "type": "function",
        "z": "d54052ea6cb4b184",
        "name": "Set measure values",
        "func": "const measures = msg.payload;\n\nconst device_id  = msg.device.id;\nconst rele_state = msg.device.rele_state;\n\nmeasures.device_id  = device_id;\nmeasures.rele_state = rele_state;\n\nmeasures.voltage   = measures.voltage   !== -1 ? measures.voltage   : (rele_state ? Math.floor(Math.random() * (136 - 118) + 118) : 0);\nmeasures.current   = measures.current   !== -1 ? measures.current   : (parseFloat((rele_state ? Math.random() * (0.6 - 0.5) + 0.5 : 0).toFixed(1)));\nmeasures.lightness = measures.lightness !== -1 ? measures.lightness : (rele_state ? 247: 150);\n\nmsg.payload = JSON.stringify(measures);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 775,
        "wires": [
            [
                "a270c0df9a2dc47e",
                "127715ede839bcb6"
            ]
        ]
    },
    {
        "id": "d2e0b7fe107775ad",
        "type": "debug",
        "z": "d54052ea6cb4b184",
        "name": "[EXIT 2] Generate measures in fake devices",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 290,
        "y": 950,
        "wires": []
    },
    {
        "id": "a270c0df9a2dc47e",
        "type": "mqtt out",
        "z": "d54052ea6cb4b184",
        "name": "Send measure to Broker MQTT",
        "topic": "pgc_ufabc/devices/measures",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "0cae39fb33383cf0",
        "x": 830,
        "y": 795,
        "wires": []
    },
    {
        "id": "acebf4880992c09a",
        "type": "function",
        "z": "86696f385ff65db5",
        "name": "Set Query",
        "func": "msg.query = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 100,
        "wires": [
            [
                "0f60afc3ba8b5e2b"
            ]
        ]
    },
    {
        "id": "a3af27511d4c1b33",
        "type": "function",
        "z": "86696f385ff65db5",
        "name": "Get Query Response",
        "func": "const query_response = msg.payload.rows;\n\ndelete msg.query;\n\nmsg.payload = query_response;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "0f60afc3ba8b5e2b",
        "type": "mydb",
        "z": "86696f385ff65db5",
        "name": "Execute Query",
        "style": "mustache",
        "substEnvVars": false,
        "query": "{{{ msg.query }}};",
        "mydbConfig": "a60982b15f334d52",
        "x": 360,
        "y": 100,
        "wires": [
            [
                "a3af27511d4c1b33"
            ]
        ]
    },
    {
        "id": "6c5cbba3d9e3d78a",
        "type": "link in",
        "z": "d54052ea6cb4b184",
        "name": "IN (3) Generate measures in fake devices",
        "links": [
            "be6ef9effcdd6438"
        ],
        "x": 55,
        "y": 657,
        "wires": [
            [
                "d47ce4ef42f4e2f6"
            ]
        ]
    },
    {
        "id": "be6ef9effcdd6438",
        "type": "link out",
        "z": "d54052ea6cb4b184",
        "name": "OUT (2) Generate measures in fake devices",
        "links": [
            "6c5cbba3d9e3d78a"
        ],
        "x": 655,
        "y": 516,
        "wires": []
    },
    {
        "id": "6dd4bce029a8103f",
        "type": "mqtt in",
        "z": "ab0855462a34e9f7",
        "name": "Receive action messages",
        "topic": "pgc_ufabc/devices/actions/change_state/+",
        "qos": "0",
        "datatype": "utf8",
        "broker": "0cae39fb33383cf0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 150,
        "y": 138,
        "wires": [
            [
                "370aab902010cd2b"
            ]
        ]
    },
    {
        "id": "370aab902010cd2b",
        "type": "function",
        "z": "ab0855462a34e9f7",
        "name": "Set rele state of device",
        "func": "const deviceId = parseInt(msg.topic.match(/\\/(\\d+)$/)[1]);\n\nconst action   = msg.payload;\nconst newState = action === 'L' ? 1 : 0;\n\nconst params = [{\n    key: deviceId,\n    value: {\n        rele_state: newState\n    }\n}];\n\nmsg.payload = { action: 'JSON.UPDATE', params };\n\ndelete msg.topic;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 138,
        "wires": [
            [
                "5fa5186b9968ce9f"
            ]
        ]
    },
    {
        "id": "0863ee950d6711ce",
        "type": "debug",
        "z": "ab0855462a34e9f7",
        "name": "[EXIT 1] Set state based in On/Off button click",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 116,
        "wires": []
    },
    {
        "id": "7f69f20ce0dfdbcd",
        "type": "comment",
        "z": "ab0855462a34e9f7",
        "name": "########## Turn on/off lights remotely",
        "info": "",
        "x": 190,
        "y": 55,
        "wires": []
    },
    {
        "id": "7e8bbf2cc5824e31",
        "type": "catch",
        "z": "d54052ea6cb4b184",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 1176,
        "wires": [
            [
                "217d63f100ed864d"
            ]
        ]
    },
    {
        "id": "efeea2a3692dbea5",
        "type": "comment",
        "z": "d54052ea6cb4b184",
        "name": "########## Exceptions Treatment",
        "info": "",
        "x": 179,
        "y": 1115,
        "wires": []
    },
    {
        "id": "217d63f100ed864d",
        "type": "debug",
        "z": "d54052ea6cb4b184",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 1176,
        "wires": []
    },
    {
        "id": "a0ca1f23f11ddcf8",
        "type": "catch",
        "z": "ab0855462a34e9f7",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 574,
        "wires": [
            [
                "738994375aefe09e"
            ]
        ]
    },
    {
        "id": "4a5ab1e396c4bbad",
        "type": "comment",
        "z": "ab0855462a34e9f7",
        "name": "########## Exceptions Treatment",
        "info": "",
        "x": 179,
        "y": 513,
        "wires": []
    },
    {
        "id": "738994375aefe09e",
        "type": "debug",
        "z": "ab0855462a34e9f7",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 574,
        "wires": []
    },
    {
        "id": "62efccd00ae19dbf",
        "type": "redis-command",
        "z": "185bd0a8b5a4b916",
        "server": "a7cb2a42ddfd0d99",
        "command": "JSON.SET",
        "name": "JSON.INSERT",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 360,
        "y": 615,
        "wires": [
            [
                "bfbff7d80bac8776"
            ]
        ]
    },
    {
        "id": "8309511dc52a3b6b",
        "type": "redis-command",
        "z": "185bd0a8b5a4b916",
        "server": "a7cb2a42ddfd0d99",
        "command": "JSON.GET",
        "name": "JSON.GET",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 350,
        "y": 575,
        "wires": [
            [
                "14a4f1ea68611679"
            ]
        ]
    },
    {
        "id": "70d4f99473093739",
        "type": "switch",
        "z": "185bd0a8b5a4b916",
        "name": "What action?",
        "property": "query.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "JSON.GET",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "JSON.INSERT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "JSON.UPDATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "KEYS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "JSON.ARRAPPEND",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 170,
        "y": 335,
        "wires": [
            [
                "a5646b720d61e23d"
            ],
            [
                "a712429cd9c00fb9"
            ],
            [
                "09579b2768fd57ec"
            ],
            [
                "91256a108cc22c6f"
            ],
            [
                "470e03096c22a255"
            ]
        ]
    },
    {
        "id": "1169e102e4d222c2",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN JSON.INSERT",
        "links": [
            "7cdfb2af0af8ec92",
            "a712429cd9c00fb9"
        ],
        "x": 55,
        "y": 615,
        "wires": [
            [
                "df7ff42e19db4df7"
            ]
        ]
    },
    {
        "id": "f4032c3893645be0",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN JSON.GET",
        "links": [
            "a5646b720d61e23d",
            "38cd626f498d07a0"
        ],
        "x": 55,
        "y": 575,
        "wires": [
            [
                "95fbf9069438666b"
            ]
        ]
    },
    {
        "id": "a712429cd9c00fb9",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO JSON.INSERT",
        "links": [
            "1169e102e4d222c2"
        ],
        "x": 315,
        "y": 295,
        "wires": []
    },
    {
        "id": "a5646b720d61e23d",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO JSON.GET",
        "links": [
            "f4032c3893645be0"
        ],
        "x": 315,
        "y": 255,
        "wires": []
    },
    {
        "id": "df7ff42e19db4df7",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Prepare query",
        "func": "const counter = msg.counter;\nconst params  = msg.query.params[counter];\n\nmsg.payload = [params.key, \".\", JSON.stringify(params.value)];\n\nmsg.counter = counter+1;\nmsg.action  = 2;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 615,
        "wires": [
            [
                "62efccd00ae19dbf"
            ]
        ]
    },
    {
        "id": "95fbf9069438666b",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Prepare query",
        "func": "const counter = msg.counter;\nconst params  = msg.query.params[counter];\n\nmsg.payload = [params.key];\n\nif (params.value !== undefined) {\n    msg.payload.push(params.value);    \n}\n\nmsg.counter = counter+1;\nmsg.action  = 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 575,
        "wires": [
            [
                "8309511dc52a3b6b"
            ]
        ]
    },
    {
        "id": "bfbff7d80bac8776",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT JSON.INSERT",
        "links": [
            "0aad452318b271e8"
        ],
        "x": 475,
        "y": 615,
        "wires": []
    },
    {
        "id": "14a4f1ea68611679",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT JSON.GET",
        "links": [
            "0aad452318b271e8"
        ],
        "x": 455,
        "y": 575,
        "wires": []
    },
    {
        "id": "451464678bbc3d93",
        "type": "catch",
        "z": "185bd0a8b5a4b916",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 1456,
        "wires": [
            [
                "5db875bc9d533019"
            ]
        ]
    },
    {
        "id": "fbc7b5775bf09c5d",
        "type": "comment",
        "z": "185bd0a8b5a4b916",
        "name": "###### Exceptions Treatment",
        "info": "",
        "x": 159,
        "y": 1396,
        "wires": []
    },
    {
        "id": "3466a7f65bed9eac",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN (1) End",
        "links": [
            "e13e3ccd568107d2"
        ],
        "x": 55,
        "y": 1157,
        "wires": [
            [
                "48b1a57359cc9abd"
            ]
        ]
    },
    {
        "id": "ab7425eb7c0d4676",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN (2) End",
        "links": [
            "5db875bc9d533019"
        ],
        "x": 55,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "cba301d7724bd39b",
        "type": "comment",
        "z": "185bd0a8b5a4b916",
        "name": "Success",
        "info": "",
        "x": 1140,
        "y": 1163,
        "wires": []
    },
    {
        "id": "dd6277508180fb7c",
        "type": "comment",
        "z": "185bd0a8b5a4b916",
        "name": "Insuccess",
        "info": "",
        "x": 220,
        "y": 1240,
        "wires": []
    },
    {
        "id": "5db875bc9d533019",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT Exceptions Treatment",
        "links": [
            "ab7425eb7c0d4676"
        ],
        "x": 195,
        "y": 1456,
        "wires": []
    },
    {
        "id": "09225a407ea571dc",
        "type": "redis-command",
        "z": "185bd0a8b5a4b916",
        "server": "a7cb2a42ddfd0d99",
        "command": "MULTI",
        "name": "MULTI",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 770,
        "y": 144,
        "wires": [
            [
                "7a1c9d83a3613f33"
            ]
        ]
    },
    {
        "id": "4c30f53bc0b8f715",
        "type": "redis-command",
        "z": "185bd0a8b5a4b916",
        "server": "a7cb2a42ddfd0d99",
        "command": "EXEC",
        "name": "EXEC",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 550,
        "y": 1135,
        "wires": [
            [
                "071eddf0112438e8"
            ]
        ]
    },
    {
        "id": "adc4c59772c6298c",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Prepare result",
        "func": "delete msg.query;\ndelete msg.action;\ndelete msg.counter;\ndelete msg.counterMax;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 1163,
        "wires": [
            []
        ]
    },
    {
        "id": "d739577f0282bcd8",
        "type": "comment",
        "z": "185bd0a8b5a4b916",
        "name": "##### Begin",
        "info": "",
        "x": 110,
        "y": 56,
        "wires": []
    },
    {
        "id": "49e5e7b7d2a08001",
        "type": "comment",
        "z": "185bd0a8b5a4b916",
        "name": "##### Functions",
        "info": "",
        "x": 120,
        "y": 516,
        "wires": []
    },
    {
        "id": "4f69d0a79d62082f",
        "type": "comment",
        "z": "185bd0a8b5a4b916",
        "name": "##### End",
        "info": "",
        "x": 100,
        "y": 1076,
        "wires": []
    },
    {
        "id": "7a1c9d83a3613f33",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Set counter",
        "func": "msg.counter    = 0;\nmsg.counterMax = msg.query.params.length\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 930,
        "y": 173,
        "wires": [
            [
                "67b41fa2bf4d76bc"
            ]
        ]
    },
    {
        "id": "2b42e25c9acdcf26",
        "type": "switch",
        "z": "185bd0a8b5a4b916",
        "name": "Execute again?",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "counterMax",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 180,
        "y": 924,
        "wires": [
            [
                "79fd20871dc7a136"
            ],
            [
                "e13e3ccd568107d2"
            ]
        ]
    },
    {
        "id": "0aad452318b271e8",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN (1) Functions",
        "links": [
            "14a4f1ea68611679",
            "bfbff7d80bac8776",
            "a02f6fb69be119eb",
            "fe2af213e574e51f",
            "42c060b70aeae32d"
        ],
        "x": 55,
        "y": 924,
        "wires": [
            [
                "2b42e25c9acdcf26"
            ]
        ]
    },
    {
        "id": "79fd20871dc7a136",
        "type": "switch",
        "z": "185bd0a8b5a4b916",
        "name": "What action?",
        "property": "action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "4",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "5",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 370,
        "y": 893,
        "wires": [
            [
                "38cd626f498d07a0"
            ],
            [
                "7cdfb2af0af8ec92"
            ],
            [
                "b066144a02a0bbf7"
            ],
            [
                "560829592f1ac023"
            ],
            [
                "16f13f2b46c404e0"
            ]
        ]
    },
    {
        "id": "e13e3ccd568107d2",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT (3) Functions",
        "links": [
            "3466a7f65bed9eac"
        ],
        "x": 315,
        "y": 955,
        "wires": []
    },
    {
        "id": "38cd626f498d07a0",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO JSON.GET",
        "links": [
            "f4032c3893645be0"
        ],
        "x": 515,
        "y": 815,
        "wires": []
    },
    {
        "id": "7cdfb2af0af8ec92",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO JSON.INSERT",
        "links": [
            "1169e102e4d222c2"
        ],
        "x": 515,
        "y": 855,
        "wires": []
    },
    {
        "id": "94a4714c3a3969b8",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Prepare query",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1135,
        "wires": [
            [
                "4c30f53bc0b8f715"
            ]
        ]
    },
    {
        "id": "16d60375c4a1414f",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Enabled MULTI mode",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 144,
        "wires": [
            [
                "09225a407ea571dc"
            ]
        ]
    },
    {
        "id": "09579b2768fd57ec",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO JSON.UPDATE",
        "links": [
            "779dad188b169279"
        ],
        "x": 315,
        "y": 335,
        "wires": []
    },
    {
        "id": "071eddf0112438e8",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Map result with key",
        "func": "function isJSON (string) {\n    try {\n        JSON.parse(string);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\nlet results = [].concat(msg.payload);\nlet keys    = msg.query.params.map(param => param.key);\n\nresults = results.map((result, i) => {\n    return {\n        key:    keys[i] || '',\n        result: isJSON(result) ? JSON.parse(result) : result\n    }        \n});\n\nmsg.payload = results;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1163,
        "wires": [
            [
                "adc4c59772c6298c"
            ]
        ]
    },
    {
        "id": "a302f13da39b1f7c",
        "type": "redis-command",
        "z": "185bd0a8b5a4b916",
        "server": "a7cb2a42ddfd0d99",
        "command": "JSON.SET",
        "name": "JSON.UPDATE",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 360,
        "y": 656,
        "wires": [
            [
                "a02f6fb69be119eb"
            ]
        ]
    },
    {
        "id": "779dad188b169279",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN JSON.UPDATE",
        "links": [
            "b066144a02a0bbf7",
            "09579b2768fd57ec"
        ],
        "x": 55,
        "y": 656,
        "wires": [
            [
                "477bd67677dbe6bb"
            ]
        ]
    },
    {
        "id": "477bd67677dbe6bb",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Prepare query",
        "func": "const counter = msg.counter;\nconst params  = msg.query.params[counter];\n\nconst attr     = Object.entries(params.value)[0][0];\nconst newValue = Object.entries(params.value)[0][1];\n\nmsg.payload = [params.key, attr, newValue];\n\nmsg.counter = counter+1;\nmsg.action  = 3;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 656,
        "wires": [
            [
                "a302f13da39b1f7c"
            ]
        ]
    },
    {
        "id": "a02f6fb69be119eb",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT JSON.UPDATE",
        "links": [
            "0aad452318b271e8"
        ],
        "x": 475,
        "y": 656,
        "wires": []
    },
    {
        "id": "b066144a02a0bbf7",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO JSON.UPDATE",
        "links": [
            "779dad188b169279"
        ],
        "x": 515,
        "y": 893,
        "wires": []
    },
    {
        "id": "3c546124752a49f4",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Parse params",
        "func": "msg.query = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 166,
        "wires": [
            [
                "bb3f3b5c78d45598"
            ]
        ]
    },
    {
        "id": "c9405cb2eb6d1fc6",
        "type": "debug",
        "z": "d54052ea6cb4b184",
        "name": "[EXIT 2] Insert new fake devices in environment",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 239,
        "wires": []
    },
    {
        "id": "56f8e443b2cab0f7",
        "type": "subflow:86696f385ff65db5",
        "z": "d54052ea6cb4b184",
        "name": "",
        "env": [],
        "x": 620,
        "y": 138,
        "wires": [
            [
                "cc421e3896e3a98f"
            ]
        ]
    },
    {
        "id": "21db4d079c64e83c",
        "type": "inject",
        "z": "d54052ea6cb4b184",
        "name": "Environment start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 155,
        "y": 118,
        "wires": [
            [
                "cfeb3031b1c8b58b"
            ]
        ]
    },
    {
        "id": "cfeb3031b1c8b58b",
        "type": "function",
        "z": "d54052ea6cb4b184",
        "name": "Get fake devices from inventory",
        "func": "const useTimeRestriction = msg.payload;\n\nmsg.payload = 'SELECT ID, INTERVAL, STATUS FROM DEVICES WHERE IS_REAL = False';\n\nif (useTimeRestriction) {\n    msg.payload += ` AND (INSERTION_TIME AT TIME ZONE 'CST') > (CURRENT_TIMESTAMP AT TIME ZONE 'CST') - INTERVAL '10 min'`;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 138,
        "wires": [
            [
                "56f8e443b2cab0f7"
            ]
        ]
    },
    {
        "id": "85429b83c87a2d2d",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "d54052ea6cb4b184",
        "name": "",
        "env": [],
        "x": 360,
        "y": 260,
        "wires": [
            [
                "af194eb2a53d5bf3"
            ],
            [
                "f48d6ff4d912f6b1"
            ]
        ]
    },
    {
        "id": "0cb1064d1c365c70",
        "type": "function",
        "z": "d54052ea6cb4b184",
        "name": "Prepare query",
        "func": "const devices = msg.payload.map(device => {\n    return {\n        key: device.id,\n        value: {\n            interval:   device.interval,\n            send:       device.status,\n            rele_state: 0,\n            fails:      []\n        }\n    }\n});\n\nmsg.payload = { action: 'JSON.INSERT', params: devices };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 260,
        "wires": [
            [
                "85429b83c87a2d2d"
            ]
        ]
    },
    {
        "id": "ec397656e2d5e609",
        "type": "link out",
        "z": "d54052ea6cb4b184",
        "name": "OUT (1) Insert new fake devices in environment",
        "links": [
            "23a9c846cd14e0f9"
        ],
        "x": 955,
        "y": 116,
        "wires": []
    },
    {
        "id": "23a9c846cd14e0f9",
        "type": "link in",
        "z": "d54052ea6cb4b184",
        "name": "IN (1) Insert new fake devices in environment",
        "links": [
            "ec397656e2d5e609"
        ],
        "x": 55,
        "y": 260,
        "wires": [
            [
                "0cb1064d1c365c70"
            ]
        ]
    },
    {
        "id": "f48d6ff4d912f6b1",
        "type": "debug",
        "z": "d54052ea6cb4b184",
        "name": "[EXIT 3] Insert new fake devices in environment",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 281,
        "wires": []
    },
    {
        "id": "d27e63bee03aa702",
        "type": "inject",
        "z": "d54052ea6cb4b184",
        "name": "Every 10 minutes",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "600",
        "topic": "",
        "payload": "true",
        "payloadType": "bool",
        "x": 155,
        "y": 159,
        "wires": [
            [
                "cfeb3031b1c8b58b"
            ]
        ]
    },
    {
        "id": "4d0e95e96fd0ec55",
        "type": "comment",
        "z": "d54052ea6cb4b184",
        "name": "########## Insert new fake devices in environment",
        "info": "",
        "x": 230,
        "y": 56,
        "wires": []
    },
    {
        "id": "cc421e3896e3a98f",
        "type": "switch",
        "z": "d54052ea6cb4b184",
        "name": "Found new devices?",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 800,
        "y": 138,
        "wires": [
            [
                "ec397656e2d5e609"
            ],
            [
                "83f0065ce578f4d3"
            ]
        ]
    },
    {
        "id": "83f0065ce578f4d3",
        "type": "debug",
        "z": "d54052ea6cb4b184",
        "name": "[EXIT 1] Insert new fake devices in environment",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 159,
        "wires": []
    },
    {
        "id": "b6e313696650bff2",
        "type": "link out",
        "z": "d54052ea6cb4b184",
        "name": "OUT (2) Insert new fake devices in environment",
        "links": [
            "27654e848f61a56f"
        ],
        "x": 675,
        "y": 238,
        "wires": []
    },
    {
        "id": "af194eb2a53d5bf3",
        "type": "function",
        "z": "d54052ea6cb4b184",
        "name": "List devices ID",
        "func": "msg.payload = msg.payload.map(device => device.key);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 238,
        "wires": [
            [
                "c9405cb2eb6d1fc6",
                "b6e313696650bff2"
            ]
        ]
    },
    {
        "id": "cf26f1f933a8bd94",
        "type": "comment",
        "z": "d54052ea6cb4b184",
        "name": "########## Generate measures in fake devices",
        "info": "",
        "x": 220,
        "y": 376,
        "wires": []
    },
    {
        "id": "27654e848f61a56f",
        "type": "link in",
        "z": "d54052ea6cb4b184",
        "name": "IN (1) Generate measures in fake devices",
        "links": [
            "b6e313696650bff2"
        ],
        "x": 55,
        "y": 436,
        "wires": [
            [
                "8b9db073bfb3aedf"
            ]
        ]
    },
    {
        "id": "8b9db073bfb3aedf",
        "type": "split",
        "z": "d54052ea6cb4b184",
        "name": "Split devices",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 170,
        "y": 436,
        "wires": [
            [
                "991311b09ededc72"
            ]
        ]
    },
    {
        "id": "991311b09ededc72",
        "type": "link out",
        "z": "d54052ea6cb4b184",
        "name": "OUT (1) Generate measures in fake devices",
        "links": [
            "3b3354684638c87a"
        ],
        "x": 275,
        "y": 436,
        "wires": []
    },
    {
        "id": "3b3354684638c87a",
        "type": "link in",
        "z": "d54052ea6cb4b184",
        "name": "IN (2) Generate measures in fake devices",
        "links": [
            "90e8bddf38b63a29",
            "991311b09ededc72"
        ],
        "x": 55,
        "y": 538,
        "wires": [
            [
                "587734d5a8447a6d"
            ]
        ]
    },
    {
        "id": "587734d5a8447a6d",
        "type": "function",
        "z": "d54052ea6cb4b184",
        "name": "Get device data",
        "func": "const deviceId = msg.payload;\n\nmsg.payload = { action: 'JSON.GET', params: [{ key: deviceId }] };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 538,
        "wires": [
            [
                "e4fa68e290e7d172"
            ]
        ]
    },
    {
        "id": "e4fa68e290e7d172",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "d54052ea6cb4b184",
        "name": "",
        "env": [],
        "x": 360,
        "y": 538,
        "wires": [
            [
                "a3c9d68cb7041f05"
            ],
            [
                "14232fc58f501e54"
            ]
        ]
    },
    {
        "id": "14232fc58f501e54",
        "type": "debug",
        "z": "d54052ea6cb4b184",
        "name": "[EXIT 1] Generate measures in fake devices",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 559,
        "wires": []
    },
    {
        "id": "bb3f3b5c78d45598",
        "type": "switch",
        "z": "185bd0a8b5a4b916",
        "name": "Multiples querys?",
        "property": "query.params.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 166,
        "wires": [
            [
                "16d60375c4a1414f"
            ],
            [
                "7a1c9d83a3613f33"
            ]
        ]
    },
    {
        "id": "48b1a57359cc9abd",
        "type": "switch",
        "z": "185bd0a8b5a4b916",
        "name": "Multiples querys?",
        "property": "query.params.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 1157,
        "wires": [
            [
                "94a4714c3a3969b8"
            ],
            [
                "071eddf0112438e8"
            ]
        ]
    },
    {
        "id": "a3c9d68cb7041f05",
        "type": "function",
        "z": "d54052ea6cb4b184",
        "name": "Parse result",
        "func": "const deviceId   = msg.payload[0].key;\nconst deviceData = msg.payload[0].result;\n\nmsg.device = { \n    id:         deviceId,\n    send:       deviceData.send,\n    rele_state: deviceData.rele_state,\n    fails:      deviceData.fails\n};\n\nmsg.delay = deviceData.interval;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 516,
        "wires": [
            [
                "be6ef9effcdd6438"
            ]
        ]
    },
    {
        "id": "a68e71c5e7e525b3",
        "type": "delay",
        "z": "d54052ea6cb4b184",
        "name": "Wait for interval",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "x": 200,
        "y": 896,
        "wires": [
            [
                "9756036cb1ecf46f"
            ]
        ]
    },
    {
        "id": "d47ce4ef42f4e2f6",
        "type": "switch",
        "z": "d54052ea6cb4b184",
        "name": "Device has failures?",
        "property": "device.fails.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 200,
        "y": 657,
        "wires": [
            [
                "43c31dcda89bd922"
            ],
            [
                "f0d1d6b64a7659fd"
            ]
        ]
    },
    {
        "id": "43c31dcda89bd922",
        "type": "file in",
        "z": "d54052ea6cb4b184",
        "name": "Get fails.jsonc file",
        "filename": "/scripts/fails.jsonc",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 430,
        "y": 636,
        "wires": [
            [
                "89a06ba1d5c21202"
            ]
        ]
    },
    {
        "id": "8b401a54048b163c",
        "type": "json",
        "z": "d54052ea6cb4b184",
        "name": "Convert JSON to JS Object",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 860,
        "y": 636,
        "wires": [
            [
                "b3c4bb4261150dd8"
            ]
        ]
    },
    {
        "id": "b3c4bb4261150dd8",
        "type": "function",
        "z": "d54052ea6cb4b184",
        "name": "Map fail ID to description",
        "func": "const failsList   = msg.payload;\nconst deviceFails = msg.device.fails;\n\nmsg.device.fails = deviceFails.map(failId => failsList.find(fail => fail.id === failId));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 636,
        "wires": [
            [
                "11179055d302aec1"
            ]
        ]
    },
    {
        "id": "11179055d302aec1",
        "type": "link out",
        "z": "d54052ea6cb4b184",
        "name": "OUT (3) Generate measures in fake devices",
        "links": [
            "68fb113372f89e05"
        ],
        "x": 1255,
        "y": 636,
        "wires": []
    },
    {
        "id": "f0d1d6b64a7659fd",
        "type": "link out",
        "z": "d54052ea6cb4b184",
        "name": "OUT (4) Generate measures in fake devices",
        "links": [
            "68fb113372f89e05"
        ],
        "x": 355,
        "y": 679,
        "wires": []
    },
    {
        "id": "68fb113372f89e05",
        "type": "link in",
        "z": "d54052ea6cb4b184",
        "name": "IN (4) Generate measures in fake devices",
        "links": [
            "11179055d302aec1",
            "f0d1d6b64a7659fd"
        ],
        "x": 56,
        "y": 797,
        "wires": [
            [
                "088c10a30b26ab40"
            ]
        ]
    },
    {
        "id": "9756036cb1ecf46f",
        "type": "function",
        "z": "d54052ea6cb4b184",
        "name": "Reset data",
        "func": "msg.payload = msg.device.id;\n\ndelete msg.device;\ndelete msg.delay;\ndelete msg.filename;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 896,
        "wires": [
            [
                "90e8bddf38b63a29"
            ]
        ]
    },
    {
        "id": "90e8bddf38b63a29",
        "type": "link out",
        "z": "d54052ea6cb4b184",
        "name": "OUT (7) Generate measures in fake devices",
        "links": [
            "3b3354684638c87a"
        ],
        "x": 475,
        "y": 896,
        "wires": []
    },
    {
        "id": "89a06ba1d5c21202",
        "type": "function",
        "z": "d54052ea6cb4b184",
        "name": "Remove comments",
        "func": "msg.payload = msg.payload.replace(/\\/\\/.*\\r\\n/g, '');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 636,
        "wires": [
            [
                "8b401a54048b163c"
            ]
        ]
    },
    {
        "id": "5fa5186b9968ce9f",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "ab0855462a34e9f7",
        "name": "",
        "env": [],
        "x": 580,
        "y": 138,
        "wires": [
            [
                "0863ee950d6711ce"
            ],
            [
                "db4c5987c4b7f82f"
            ]
        ]
    },
    {
        "id": "db4c5987c4b7f82f",
        "type": "debug",
        "z": "ab0855462a34e9f7",
        "name": "[EXIT 2] Set state based in On/Off button click",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 159,
        "wires": []
    },
    {
        "id": "5737ae4d4d4cc025",
        "type": "mqtt in",
        "z": "ab0855462a34e9f7",
        "name": "Receive action messages",
        "topic": "pgc_ufabc/devices/actions/change_interval/+",
        "qos": "0",
        "datatype": "utf8",
        "broker": "0cae39fb33383cf0",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 150,
        "y": 338,
        "wires": [
            [
                "60ed8d5f5e822ea5"
            ]
        ]
    },
    {
        "id": "60ed8d5f5e822ea5",
        "type": "function",
        "z": "ab0855462a34e9f7",
        "name": "Set messages interval of device",
        "func": "const deviceId = parseInt(msg.topic.match(/\\/(\\d+)$/)[1]);\n\nconst interval = msg.payload;\n\nconst params = [{\n    key: deviceId,\n    value: { interval }\n}];\n\nmsg.payload = { action: 'JSON.UPDATE', params };\n\ndelete msg.topic;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 338,
        "wires": [
            [
                "2f4ccb94a7f16779"
            ]
        ]
    },
    {
        "id": "6a8ceefa2c465e49",
        "type": "debug",
        "z": "ab0855462a34e9f7",
        "name": "[EXIT 1] Update messages interval",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 316,
        "wires": []
    },
    {
        "id": "2f4ccb94a7f16779",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "ab0855462a34e9f7",
        "name": "",
        "env": [],
        "x": 640,
        "y": 338,
        "wires": [
            [
                "6a8ceefa2c465e49"
            ],
            [
                "229b8889e1725155"
            ]
        ]
    },
    {
        "id": "229b8889e1725155",
        "type": "debug",
        "z": "ab0855462a34e9f7",
        "name": "[EXIT 2] Update messages interval",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 359,
        "wires": []
    },
    {
        "id": "4ff75f3c05bca7a9",
        "type": "comment",
        "z": "ab0855462a34e9f7",
        "name": "########## Update messages interval",
        "info": "",
        "x": 190,
        "y": 256,
        "wires": []
    },
    {
        "id": "c511b518f93c3e1b",
        "type": "inject",
        "z": "a444632620451a72",
        "name": "Every 10 minutes",
        "props": [],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": "600",
        "topic": "",
        "x": 155,
        "y": 135,
        "wires": [
            [
                "3fd79f0e07079834"
            ]
        ]
    },
    {
        "id": "3fd79f0e07079834",
        "type": "function",
        "z": "a444632620451a72",
        "name": "Get devices IDs",
        "func": "msg.payload = {\n    action: 'KEYS',\n    params: [{ value: '*' }]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 135,
        "wires": [
            [
                "095ff5c00f3239e1"
            ]
        ]
    },
    {
        "id": "91256a108cc22c6f",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO KEYS",
        "links": [
            "4766e4737d4ab82a"
        ],
        "x": 315,
        "y": 375,
        "wires": []
    },
    {
        "id": "18fb4272c1434516",
        "type": "redis-command",
        "z": "185bd0a8b5a4b916",
        "server": "a7cb2a42ddfd0d99",
        "command": "KEYS",
        "name": "KEYS",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 330,
        "y": 696,
        "wires": [
            [
                "fe2af213e574e51f"
            ]
        ]
    },
    {
        "id": "4766e4737d4ab82a",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN KEYS",
        "links": [
            "91256a108cc22c6f",
            "560829592f1ac023"
        ],
        "x": 55,
        "y": 696,
        "wires": [
            [
                "a8cb1707b0683a56"
            ]
        ]
    },
    {
        "id": "a8cb1707b0683a56",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Prepare query",
        "func": "const counter = msg.counter;\nconst params  = msg.query.params[counter];\n\nmsg.payload = [params.value];\n\nmsg.counter = counter+1;\nmsg.action  = 4;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 696,
        "wires": [
            [
                "18fb4272c1434516"
            ]
        ]
    },
    {
        "id": "fe2af213e574e51f",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT KEYS",
        "links": [
            "0aad452318b271e8"
        ],
        "x": 415,
        "y": 696,
        "wires": []
    },
    {
        "id": "560829592f1ac023",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO KEYS",
        "links": [
            "4766e4737d4ab82a"
        ],
        "x": 515,
        "y": 935,
        "wires": []
    },
    {
        "id": "095ff5c00f3239e1",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "a444632620451a72",
        "name": "",
        "env": [],
        "x": 540,
        "y": 135,
        "wires": [
            [
                "71ef80badc40aa85"
            ],
            [
                "a3da3cba3e54ce24"
            ]
        ]
    },
    {
        "id": "a3da3cba3e54ce24",
        "type": "debug",
        "z": "a444632620451a72",
        "name": "[EXIT 1] Generate errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 155,
        "wires": []
    },
    {
        "id": "981b5b1ac6b7ee16",
        "type": "comment",
        "z": "a444632620451a72",
        "name": "########## Generate errors",
        "info": "",
        "x": 160,
        "y": 55,
        "wires": []
    },
    {
        "id": "71ef80badc40aa85",
        "type": "function",
        "z": "a444632620451a72",
        "name": "Get devices IDs",
        "func": "msg.payload = msg.payload.map(device => device.result);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 113,
        "wires": [
            [
                "971fd26a8e32f154"
            ]
        ]
    },
    {
        "id": "971fd26a8e32f154",
        "type": "split",
        "z": "a444632620451a72",
        "name": "Split devices",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 910,
        "y": 113,
        "wires": [
            [
                "f9af6c3af3837488"
            ]
        ]
    },
    {
        "id": "f9af6c3af3837488",
        "type": "link out",
        "z": "a444632620451a72",
        "name": "OUT (1) Generate errors",
        "links": [
            "37a0e4f6c8715a32"
        ],
        "x": 1015,
        "y": 113,
        "wires": []
    },
    {
        "id": "37a0e4f6c8715a32",
        "type": "link in",
        "z": "a444632620451a72",
        "name": "IN (1) Generate errors",
        "links": [
            "f9af6c3af3837488"
        ],
        "x": 55,
        "y": 257,
        "wires": [
            [
                "7a7cecf6415649cc"
            ]
        ]
    },
    {
        "id": "7a7cecf6415649cc",
        "type": "function",
        "z": "a444632620451a72",
        "name": "Generate error?",
        "func": "msg.device = { id: msg.payload };\n\nconst prob = 1;\n\nif (Math.random() <= prob) {\n    return [msg, null];\n}\n\nreturn [null, msg];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 257,
        "wires": [
            [
                "15b457ec3a792b00"
            ],
            [
                "12402bcf3498a48d"
            ]
        ]
    },
    {
        "id": "12402bcf3498a48d",
        "type": "debug",
        "z": "a444632620451a72",
        "name": "[EXIT 2] Generate errors",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 279,
        "wires": []
    },
    {
        "id": "a62f5058a63cebde",
        "type": "catch",
        "z": "a444632620451a72",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 757,
        "wires": [
            [
                "2c01993697609b0a"
            ]
        ]
    },
    {
        "id": "4934247d1cccd5de",
        "type": "comment",
        "z": "a444632620451a72",
        "name": "########## Exceptions Treatment",
        "info": "",
        "x": 179,
        "y": 696,
        "wires": []
    },
    {
        "id": "2c01993697609b0a",
        "type": "debug",
        "z": "a444632620451a72",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 757,
        "wires": []
    },
    {
        "id": "ecf4fe2fa009ecce",
        "type": "function",
        "z": "d54052ea6cb4b184",
        "name": "Set fails",
        "func": "const fails = msg.device.fails;\n\nconst measures = {\n    voltage:   -1,\n    current:   -1,\n    lightness: -1,\n};\n\nfails.forEach(fail => {\n    measures.voltage   = fail.voltage   !== -1 ? fail.voltage   : measures.voltage;\n    measures.current   = fail.current   !== -1 ? fail.current   : measures.current;\n    measures.lightness = fail.lightness !== -1 ? fail.lightness : measures.lightness;\n});\n\nmsg.payload = measures;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 775,
        "wires": [
            [
                "32feb38f11d62b82"
            ]
        ]
    },
    {
        "id": "7a6044337ab2498c",
        "type": "link out",
        "z": "d54052ea6cb4b184",
        "name": "OUT (6) Generate measures in fake devices",
        "links": [
            "0e78a4e7f8a4206c"
        ],
        "x": 335,
        "y": 818,
        "wires": []
    },
    {
        "id": "0e78a4e7f8a4206c",
        "type": "link in",
        "z": "d54052ea6cb4b184",
        "name": "IN (5) Generate measures in fake devices",
        "links": [
            "127715ede839bcb6",
            "7a6044337ab2498c"
        ],
        "x": 55,
        "y": 924,
        "wires": [
            [
                "a68e71c5e7e525b3",
                "d2e0b7fe107775ad"
            ]
        ]
    },
    {
        "id": "127715ede839bcb6",
        "type": "link out",
        "z": "d54052ea6cb4b184",
        "name": "OUT (5) Generate measures in fake devices",
        "links": [
            "0e78a4e7f8a4206c"
        ],
        "x": 715,
        "y": 755,
        "wires": []
    },
    {
        "id": "088c10a30b26ab40",
        "type": "switch",
        "z": "d54052ea6cb4b184",
        "name": "Send measures?",
        "property": "device.send",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 797,
        "wires": [
            [
                "ecf4fe2fa009ecce"
            ],
            [
                "7a6044337ab2498c"
            ]
        ]
    },
    {
        "id": "15b457ec3a792b00",
        "type": "file in",
        "z": "a444632620451a72",
        "name": "Get fails.jsonc file",
        "filename": "/scripts/fails.jsonc",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 390,
        "y": 236,
        "wires": [
            [
                "4e54a1ad083756a8"
            ]
        ]
    },
    {
        "id": "10fb61fcd7bc6960",
        "type": "json",
        "z": "a444632620451a72",
        "name": "Convert JSON to JS Object",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 820,
        "y": 236,
        "wires": [
            [
                "d093a4bff79842d4"
            ]
        ]
    },
    {
        "id": "4e54a1ad083756a8",
        "type": "function",
        "z": "a444632620451a72",
        "name": "Remove comments",
        "func": "msg.payload = msg.payload.replace(/\\/\\/.*\\r\\n/g, '');\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 236,
        "wires": [
            [
                "10fb61fcd7bc6960"
            ]
        ]
    },
    {
        "id": "d093a4bff79842d4",
        "type": "link out",
        "z": "a444632620451a72",
        "name": "OUT (2) Generate errors",
        "links": [
            "d4e1c79447dc0538"
        ],
        "x": 975,
        "y": 236,
        "wires": []
    },
    {
        "id": "d4e1c79447dc0538",
        "type": "link in",
        "z": "a444632620451a72",
        "name": "IN (2) Generate errors",
        "links": [
            "d093a4bff79842d4"
        ],
        "x": 55,
        "y": 378,
        "wires": [
            [
                "e7104dda5ddd437c"
            ]
        ]
    },
    {
        "id": "e7104dda5ddd437c",
        "type": "function",
        "z": "a444632620451a72",
        "name": "Choose fail",
        "func": "const min = 1;\nconst max = msg.payload.length;\n\nmsg.device.fail = 1//Math.round(Math.random() * (max - min) + min);\n\nmsg.failsList = msg.payload;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 378,
        "wires": [
            [
                "2f9644df4b68cab1"
            ]
        ]
    },
    {
        "id": "2f9644df4b68cab1",
        "type": "function",
        "z": "a444632620451a72",
        "name": "Get device info",
        "func": "msg.payload = { action: 'JSON.GET', params: [{ key: msg.device.id }]};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 378,
        "wires": [
            [
                "eac170b6a0c6b125"
            ]
        ]
    },
    {
        "id": "eac170b6a0c6b125",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "a444632620451a72",
        "name": "",
        "x": 520,
        "y": 378,
        "wires": [
            [
                "87a3e10226bfe54a"
            ],
            [
                "45e44f20ab03c222"
            ]
        ]
    },
    {
        "id": "45e44f20ab03c222",
        "type": "debug",
        "z": "a444632620451a72",
        "name": "[EXIT 3] Generate errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 399,
        "wires": []
    },
    {
        "id": "87a3e10226bfe54a",
        "type": "function",
        "z": "a444632620451a72",
        "name": "Analyze failure validity",
        "func": "const failsList  = msg.failsList;\nconst deviceData = msg.payload[0].result;\nconst newFail    = msg.device.fail;\n\nlet insert = true;\n\n// Check if the fault is already present on the device\nif (deviceData.fails.includes(newFail)) {\n    insert = false;\n}\n\n// Check if has failures that prevent the new fault from being included\nif (insert) {\n    const preventFails = failsList[newFail-1].look_for;\n    insert = !preventFails.some(failId => deviceData.fails.includes(failId));\n} \n\n// Check if the new failure prevents any failure already present in the device\nif (insert) {\n    const deviceFails = deviceData.fails.map(failId => failsList.find(fail => fail.id === failId));\n    insert = !deviceFails.some(fail => fail.look_for.includes(newFail));\n    \n    if(!insert) node.warn('3');\n}\n\n// Insert new values in device\nif (insert) {\n    msg.device.send = failsList[newFail-1].send;\n    msg.device.rele_state = failsList[newFail].rele_state.value !== undefined ? failsList[newFail].rele_state.value : deviceData.rele_state; \n}\n\nmsg.payload = insert;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 357,
        "wires": [
            [
                "54338d699151f3ab"
            ]
        ]
    },
    {
        "id": "54338d699151f3ab",
        "type": "switch",
        "z": "a444632620451a72",
        "name": "Insert fail in device?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 960,
        "y": 357,
        "wires": [
            [
                "8d862c9dbd3b163b"
            ],
            [
                "7b5abb2dfa21d6da"
            ]
        ]
    },
    {
        "id": "8d862c9dbd3b163b",
        "type": "link out",
        "z": "a444632620451a72",
        "name": "OUT (3) Generate errors",
        "links": [
            "c884efe4ea3bd549"
        ],
        "x": 1115,
        "y": 335,
        "wires": []
    },
    {
        "id": "7b5abb2dfa21d6da",
        "type": "debug",
        "z": "a444632620451a72",
        "name": "[EXIT 4] Generate errors",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 378,
        "wires": []
    },
    {
        "id": "c884efe4ea3bd549",
        "type": "link in",
        "z": "a444632620451a72",
        "name": "IN (3) Generate errors",
        "links": [
            "8d862c9dbd3b163b"
        ],
        "x": 55,
        "y": 517,
        "wires": [
            [
                "520a784bb92b71f7"
            ]
        ]
    },
    {
        "id": "520a784bb92b71f7",
        "type": "function",
        "z": "a444632620451a72",
        "name": "Set new values in device",
        "func": "msg.payload = {\n    action: 'JSON.UPDATE',\n    params: [\n        { \n            key: msg.device.id,\n            value: {\n                send:       msg.device.send,\n                rele_state: msg.device.rele_state\n            }\n        }\n    ]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 517,
        "wires": [
            [
                "26a2ccdfee1a2e78"
            ]
        ]
    },
    {
        "id": "26a2ccdfee1a2e78",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "a444632620451a72",
        "name": "",
        "env": [],
        "x": 420,
        "y": 517,
        "wires": [
            [
                "aef75640dfc58609"
            ],
            [
                "20b6659c04227272"
            ]
        ]
    },
    {
        "id": "20b6659c04227272",
        "type": "debug",
        "z": "a444632620451a72",
        "name": "[EXIT 5] Generate errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 539,
        "wires": []
    },
    {
        "id": "aef75640dfc58609",
        "type": "function",
        "z": "a444632620451a72",
        "name": "Insert fail in device",
        "func": "msg.payload = {\n    action: 'JSON.ARRAPPEND',\n    params: [\n        { \n            key: msg.device.id,\n            value: {\n                fails: msg.device.fail,\n            }\n        }\n    ]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 496,
        "wires": [
            [
                "e559347aeea539ab"
            ]
        ]
    },
    {
        "id": "e559347aeea539ab",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "a444632620451a72",
        "name": "",
        "x": 820,
        "y": 496,
        "wires": [
            [
                "1fb2a3e793a8f8aa"
            ],
            [
                "549575ce4a75236d"
            ]
        ]
    },
    {
        "id": "549575ce4a75236d",
        "type": "debug",
        "z": "a444632620451a72",
        "name": "[EXIT 7] Generate errors",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 517,
        "wires": []
    },
    {
        "id": "1fb2a3e793a8f8aa",
        "type": "debug",
        "z": "a444632620451a72",
        "name": "[EXIT 6] Generate errors",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 475,
        "wires": []
    },
    {
        "id": "67b41fa2bf4d76bc",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT (1) Begin",
        "links": [
            "7dd90b75f23df424"
        ],
        "x": 1035,
        "y": 173,
        "wires": []
    },
    {
        "id": "470e03096c22a255",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO JSON.ARRAPPEND",
        "links": [
            "44311aec488997d1"
        ],
        "x": 315,
        "y": 415,
        "wires": []
    },
    {
        "id": "7dd90b75f23df424",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN (1) Begin",
        "links": [
            "67b41fa2bf4d76bc"
        ],
        "x": 55,
        "y": 335,
        "wires": [
            [
                "70d4f99473093739"
            ]
        ]
    },
    {
        "id": "cfcd806421fa3d3e",
        "type": "redis-command",
        "z": "185bd0a8b5a4b916",
        "server": "a7cb2a42ddfd0d99",
        "command": "JSON.ARRAPPEND",
        "name": "JSON.ARRAPPEND",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 380,
        "y": 736,
        "wires": [
            [
                "42c060b70aeae32d"
            ]
        ]
    },
    {
        "id": "5ba5be911a160c86",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Prepare query",
        "func": "const counter = msg.counter;\nconst params  = msg.query.params[counter];\n\nconst arrayName = Object.entries(params.value)[0][0];\nconst newValue  = Object.entries(params.value)[0][1];\n\nmsg.payload = [params.key, arrayName, newValue];\n\nmsg.counter = counter+1;\nmsg.action  = 5;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 736,
        "wires": [
            [
                "cfcd806421fa3d3e"
            ]
        ]
    },
    {
        "id": "44311aec488997d1",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN JSON.ARRAPPEND",
        "links": [
            "16f13f2b46c404e0",
            "470e03096c22a255"
        ],
        "x": 55,
        "y": 736,
        "wires": [
            [
                "5ba5be911a160c86"
            ]
        ]
    },
    {
        "id": "42c060b70aeae32d",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT JSON.ARRAPPEND",
        "links": [
            "0aad452318b271e8"
        ],
        "x": 515,
        "y": 736,
        "wires": []
    },
    {
        "id": "16f13f2b46c404e0",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "TO JSON.ARRAPPEND",
        "links": [
            "44311aec488997d1"
        ],
        "x": 515,
        "y": 975,
        "wires": []
    }
]