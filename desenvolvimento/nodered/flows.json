[
    {
        "id": "8813ec2835daae18",
        "type": "tab",
        "label": "Get Sensors Data",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7f5557aca01f4737",
        "type": "tab",
        "label": "Endpoints",
        "disabled": false,
        "info": ""
    },
    {
        "id": "50de4a0fb7daeabc",
        "type": "tab",
        "label": "Populate historic table",
        "disabled": false,
        "info": ""
    },
    {
        "id": "bab6ffe5b7ae3a28",
        "type": "subflow",
        "name": "Database",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 100,
                "wires": [
                    {
                        "id": "2dc46f9c24f9eb35"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 100,
                "wires": [
                    {
                        "id": "dcf9a148a61be9fc",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "df4bdf4be0d4150f",
        "type": "mqtt-broker",
        "name": "MQTT Eclipse",
        "broker": "mqtt.eclipseprojects.io",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "21c629e3be9268f3",
        "type": "mydbConfig",
        "name": "postgres@db:5432/TGC",
        "host": "db",
        "port": "5432",
        "database": "TGC",
        "ssl": false,
        "rejectUnauthorized": false,
        "ca": "",
        "key": "",
        "cert": "",
        "max": "10",
        "min": "1",
        "idle": "1000"
    },
    {
        "id": "1b46bae9.2cd099",
        "type": "mqtt-broker",
        "name": "My mqtt",
        "broker": "https://mqtt.eclipseprojects.io/",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "true",
        "birthPayload": "",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": ""
    },
    {
        "id": "2dc46f9c24f9eb35",
        "type": "function",
        "z": "bab6ffe5b7ae3a28",
        "name": "Set Query",
        "func": "msg.query = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 100,
        "wires": [
            [
                "57023228cce5d7bc"
            ]
        ]
    },
    {
        "id": "dcf9a148a61be9fc",
        "type": "function",
        "z": "bab6ffe5b7ae3a28",
        "name": "Get Query Response",
        "func": "const query_response = msg.payload.rows;\n\ndelete msg.query;\n\nmsg.payload = query_response;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "8b614dd0c4e7ecd6",
        "type": "mqtt in",
        "z": "8813ec2835daae18",
        "name": "Sensors Output",
        "topic": "MQTTtcciluminacaoRecebe_02",
        "qos": "2",
        "datatype": "json",
        "broker": "df4bdf4be0d4150f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 120,
        "y": 96,
        "wires": [
            [
                "187acea3920b5c2c"
            ]
        ]
    },
    {
        "id": "80a46d82ca4455ee",
        "type": "catch",
        "z": "8813ec2835daae18",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 101,
        "y": 476,
        "wires": [
            [
                "4fed0b38fbbe8ae3"
            ]
        ]
    },
    {
        "id": "27e7cc799e913f9c",
        "type": "comment",
        "z": "8813ec2835daae18",
        "name": "Exceptions Treatment",
        "info": "",
        "x": 140,
        "y": 415,
        "wires": []
    },
    {
        "id": "4fed0b38fbbe8ae3",
        "type": "debug",
        "z": "8813ec2835daae18",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 251,
        "y": 476,
        "wires": []
    },
    {
        "id": "187acea3920b5c2c",
        "type": "function",
        "z": "8813ec2835daae18",
        "name": "Parse output",
        "func": "msg.sensor_output = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 96,
        "wires": [
            [
                "4f84135b11c27312"
            ]
        ]
    },
    {
        "id": "d5ce424ec67d4654",
        "type": "comment",
        "z": "8813ec2835daae18",
        "name": "Store sensors data",
        "info": "",
        "x": 130,
        "y": 216,
        "wires": []
    },
    {
        "id": "4f84135b11c27312",
        "type": "link out",
        "z": "8813ec2835daae18",
        "name": "OUT (1) Receive sensors data",
        "links": [
            "88a5b57865658712"
        ],
        "x": 395,
        "y": 96,
        "wires": []
    },
    {
        "id": "88a5b57865658712",
        "type": "link in",
        "z": "8813ec2835daae18",
        "name": "IN (1) Store sensors data",
        "links": [
            "4f84135b11c27312"
        ],
        "x": 55,
        "y": 256,
        "wires": [
            [
                "96803667e593d0dc"
            ]
        ]
    },
    {
        "id": "96803667e593d0dc",
        "type": "function",
        "z": "8813ec2835daae18",
        "name": "Set query",
        "func": "const sensor_output = msg.sensor_output;\n\nmsg.payload = `INSERT \n               INTO SENSORS_DATA_REAL_TIME (EQUIPMENT_ID, TENSION, CURRENT, LIGHTNESS, RELE_STATE) \n               VALUES (${sensor_output.id}, ${sensor_output.tensao}, ${sensor_output.corrente}, ${sensor_output.luminosidade}, '${sensor_output.rele_state}')`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 256,
        "wires": [
            [
                "fea15522f7bc9730"
            ]
        ]
    },
    {
        "id": "fea15522f7bc9730",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "8813ec2835daae18",
        "name": "",
        "env": [],
        "x": 300,
        "y": 256,
        "wires": [
            [
                "8885c9540ad9bf99"
            ]
        ]
    },
    {
        "id": "8885c9540ad9bf99",
        "type": "debug",
        "z": "8813ec2835daae18",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 256,
        "wires": []
    },
    {
        "id": "6c14b6de93cba404",
        "type": "comment",
        "z": "8813ec2835daae18",
        "name": "Receive sensors data",
        "info": "",
        "x": 140,
        "y": 56,
        "wires": []
    },
    {
        "id": "57023228cce5d7bc",
        "type": "mydb",
        "z": "bab6ffe5b7ae3a28",
        "name": "Execute Query",
        "style": "mustache",
        "substEnvVars": false,
        "query": "{{{ msg.query }}};",
        "mydbConfig": "21c629e3be9268f3",
        "x": 360,
        "y": 100,
        "wires": [
            [
                "dcf9a148a61be9fc"
            ]
        ]
    },
    {
        "id": "4ac549b1969b0168",
        "type": "catch",
        "z": "7f5557aca01f4737",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 1256,
        "wires": [
            [
                "1705d89c23ac2369"
            ]
        ]
    },
    {
        "id": "fca56cd6fe289503",
        "type": "comment",
        "z": "7f5557aca01f4737",
        "name": "Exceptions Treatment",
        "info": "",
        "x": 140,
        "y": 1215,
        "wires": []
    },
    {
        "id": "1705d89c23ac2369",
        "type": "debug",
        "z": "7f5557aca01f4737",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 1256,
        "wires": []
    },
    {
        "id": "c6a98241887037fd",
        "type": "mqtt out",
        "z": "7f5557aca01f4737",
        "name": "Sensors Input",
        "topic": "MQTTtcciluminacaoEnvia_02",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "df4bdf4be0d4150f",
        "x": 540,
        "y": 1056,
        "wires": []
    },
    {
        "id": "e0b9c1eff2e18be5",
        "type": "comment",
        "z": "7f5557aca01f4737",
        "name": "Turn on/off device",
        "info": "",
        "x": 130,
        "y": 975,
        "wires": []
    },
    {
        "id": "ec0b2b7b6c301d78",
        "type": "http in",
        "z": "7f5557aca01f4737",
        "name": "",
        "url": "/change-status",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1036,
        "wires": [
            [
                "2ea58b854874e1f9"
            ]
        ]
    },
    {
        "id": "2ea58b854874e1f9",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Parse request body",
        "func": "msg.payload = msg.payload.action;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1036,
        "wires": [
            [
                "d72bcdcd084b8be6",
                "c6a98241887037fd"
            ]
        ]
    },
    {
        "id": "aecf27c4524c85ed",
        "type": "http response",
        "z": "7f5557aca01f4737",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 740,
        "y": 1016,
        "wires": []
    },
    {
        "id": "bf3565fe998b3d15",
        "type": "http in",
        "z": "7f5557aca01f4737",
        "name": "",
        "url": "/device-info",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 876,
        "wires": [
            [
                "4a2f6b921cc7b9aa"
            ]
        ]
    },
    {
        "id": "28915e0493ef6a3f",
        "type": "comment",
        "z": "7f5557aca01f4737",
        "name": "Get device informations",
        "info": "",
        "x": 140,
        "y": 835,
        "wires": []
    },
    {
        "id": "ede3351d6c899062",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7f5557aca01f4737",
        "name": "",
        "env": [],
        "x": 620,
        "y": 876,
        "wires": [
            [
                "fd5c74c4ecda2310",
                "a54251fe8fe370a5"
            ]
        ]
    },
    {
        "id": "4eb5c88f1b01827b",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set query",
        "func": "const device_id = msg.device_id;\n\nmsg.payload = `SELECT LATITUDE, LONGITUDE, STREET, DISTRICT, STATUS\n               FROM EQUIPMENTS_DATA\n               WHERE EQUIPMENT_ID = ${device_id}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 876,
        "wires": [
            [
                "ede3351d6c899062"
            ]
        ]
    },
    {
        "id": "fd5c74c4ecda2310",
        "type": "http response",
        "z": "7f5557aca01f4737",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 780,
        "y": 876,
        "wires": []
    },
    {
        "id": "f9a1ed4693df527c",
        "type": "inject",
        "z": "50de4a0fb7daeabc",
        "name": "[TRIGGER] Execute every 1 hour",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "0 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 205,
        "y": 95,
        "wires": [
            [
                "1046435b385a96f0"
            ]
        ]
    },
    {
        "id": "f7a4578e851c1da0",
        "type": "comment",
        "z": "50de4a0fb7daeabc",
        "name": "Merge dataset of last 1 hour",
        "info": "",
        "x": 160,
        "y": 56,
        "wires": []
    },
    {
        "id": "4b5a7e0209baa1d9",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "50de4a0fb7daeabc",
        "name": "",
        "x": 800,
        "y": 95,
        "wires": [
            [
                "b63f23032ede52c6"
            ]
        ]
    },
    {
        "id": "c03fadbdeb961e4b",
        "type": "function",
        "z": "50de4a0fb7daeabc",
        "name": "Get active devices",
        "func": "msg.payload = `SELECT EQUIPMENT_ID \n               FROM EQUIPMENTS_DATA \n               WHERE STATUS = '1'`;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 156,
        "wires": [
            [
                "04747dadf5a0b8a5"
            ]
        ]
    },
    {
        "id": "1046435b385a96f0",
        "type": "function",
        "z": "50de4a0fb7daeabc",
        "name": "Delete sensors data from more than a hour",
        "func": "const timestamp = msg.timestamp;\n\nconst date = new Date(timestamp);\ndate.setSeconds(0);\ndate.setMilliseconds(0);\n\nconst year = date.getFullYear();\nconst mon  = `0${date.getMonth()+1}`.slice(-2);\nconst day  = `0${date.getDate()}`.slice(-2);\nconst hour = `0${date.getHours()}`.slice(-2);\nconst min  = `0${date.getMinutes()}`.slice(-2);\nconst sec  = `0${date.getSeconds()}`.slice(-2);\n\nconst format_date = `${year}-${mon}-${day} ${hour}:${min}:${sec}`;\n\nmsg.payload = `DELETE\n               FROM SENSORS_DATA_REAL_TIME\n               WHERE (INSERTION_TIME AT TIME ZONE 'CST') < (TO_TIMESTAMP('${format_date}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST') - INTERVAL '1 hour'`;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 95,
        "wires": [
            [
                "4b5a7e0209baa1d9"
            ]
        ]
    },
    {
        "id": "b63f23032ede52c6",
        "type": "link out",
        "z": "50de4a0fb7daeabc",
        "name": "OUT (1) Merge dataset of last 1 hour",
        "links": [
            "6227b764ecd66fbd"
        ],
        "x": 895,
        "y": 95,
        "wires": []
    },
    {
        "id": "6227b764ecd66fbd",
        "type": "link in",
        "z": "50de4a0fb7daeabc",
        "name": "IN (1) Merge dataset of last 1 hour",
        "links": [
            "b63f23032ede52c6"
        ],
        "x": 55,
        "y": 156,
        "wires": [
            [
                "c03fadbdeb961e4b"
            ]
        ]
    },
    {
        "id": "04747dadf5a0b8a5",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "50de4a0fb7daeabc",
        "name": "",
        "x": 360,
        "y": 156,
        "wires": [
            [
                "f4feba67b52c1837"
            ]
        ]
    },
    {
        "id": "f4feba67b52c1837",
        "type": "function",
        "z": "50de4a0fb7daeabc",
        "name": "Get devices id",
        "func": "const active_devices = msg.payload;\n\nconst devices_id = active_devices.map(row => row.equipment_id);\n\nmsg.payload = devices_id;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 156,
        "wires": [
            [
                "d68aa7ee3ccc5264"
            ]
        ]
    },
    {
        "id": "d68aa7ee3ccc5264",
        "type": "split",
        "z": "50de4a0fb7daeabc",
        "name": "Split devices",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 156,
        "wires": [
            [
                "8a0d9d4b23720d2e"
            ]
        ]
    },
    {
        "id": "92fc89c81bb7de07",
        "type": "catch",
        "z": "50de4a0fb7daeabc",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 536,
        "wires": [
            [
                "4fec106155933270"
            ]
        ]
    },
    {
        "id": "9b9aca9dab255680",
        "type": "comment",
        "z": "50de4a0fb7daeabc",
        "name": "Exceptions Treatment",
        "info": "",
        "x": 139,
        "y": 475,
        "wires": []
    },
    {
        "id": "4fec106155933270",
        "type": "debug",
        "z": "50de4a0fb7daeabc",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 536,
        "wires": []
    },
    {
        "id": "8a0d9d4b23720d2e",
        "type": "link out",
        "z": "50de4a0fb7daeabc",
        "name": "OUT (2) Merge dataset of last 1 hour",
        "links": [
            "96b5ad8070d6bb47"
        ],
        "x": 795,
        "y": 156,
        "wires": []
    },
    {
        "id": "96b5ad8070d6bb47",
        "type": "link in",
        "z": "50de4a0fb7daeabc",
        "name": "IN (2) Merge dataset of last 1 hour",
        "links": [
            "8a0d9d4b23720d2e"
        ],
        "x": 55,
        "y": 235,
        "wires": [
            [
                "02d3d78b5276320a"
            ]
        ]
    },
    {
        "id": "02d3d78b5276320a",
        "type": "function",
        "z": "50de4a0fb7daeabc",
        "name": "Get sensors data from last 1 hour",
        "func": "function format_date(timestamp) {\n    const year = timestamp.getFullYear();\n    const mon  = `0${timestamp.getMonth()+1}`.slice(-2);\n    const day  = `0${timestamp.getDate()}`.slice(-2);\n    const hour = `0${timestamp.getHours()}`.slice(-2);\n    const min  = `0${timestamp.getMinutes()}`.slice(-2);\n    const sec  = `0${timestamp.getSeconds()}`.slice(-2);\n    \n    return `${year}-${mon}-${day} ${hour}:${min}:${sec}`;\n}\n\nconst device_id = msg.payload;\nconst timestamp = msg.timestamp;\n\nconst date = new Date(timestamp);\ndate.setSeconds(0);\ndate.setMilliseconds(0);\n\nconst end = format_date(date);\n\ndate.setMinutes(date.getMinutes()-60);\n\nconst begin = format_date(date);\n\nmsg.payload = `SELECT TENSION, CURRENT, LIGHTNESS, RELE_STATE, INSERTION_TIME\n               FROM SENSORS_DATA_REAL_TIME\n               WHERE EQUIPMENT_ID = ${device_id}\n               AND (INSERTION_TIME AT TIME ZONE 'CST') >= (TO_TIMESTAMP('${begin}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST')\n               AND (INSERTION_TIME AT TIME ZONE 'CST') < (TO_TIMESTAMP('${end}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST')\n               ORDER BY INSERTION_TIME`;\n               \nmsg.device_id = device_id;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 235,
        "wires": [
            [
                "811485ea2e5c682e"
            ]
        ]
    },
    {
        "id": "811485ea2e5c682e",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "50de4a0fb7daeabc",
        "name": "",
        "x": 460,
        "y": 235,
        "wires": [
            [
                "341ef41fa76851e5"
            ]
        ]
    },
    {
        "id": "8239521611090d34",
        "type": "function",
        "z": "50de4a0fb7daeabc",
        "name": "Calculate powers",
        "func": "let dataset = msg.payload;\n\ndataset = dataset.map(row => {\n    const tension = row.tension;\n    const current = row.current;\n    \n    const power = Math.round(tension * current);\n    \n    row.power = power;\n    \n    return row;\n});\n\nmsg.payload = dataset;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 216,
        "wires": [
            [
                "3e6ffec6a3a2009d"
            ]
        ]
    },
    {
        "id": "3e6ffec6a3a2009d",
        "type": "function",
        "z": "50de4a0fb7daeabc",
        "name": "Calculate max, min and avg",
        "func": "const dataset = msg.payload;\n\n// Functions\nconst min = (dataset) => dataset.sort()[0];\nconst max = (dataset) => dataset.sort()[dataset.length-1];\nconst avg = (dataset) => dataset.reduce((acc, cur) => acc + cur) / dataset.length;\n\n// Get data from a specific measure\nconst tensions  = dataset.map(row => row.tension);\nconst currents  = dataset.map(row => row.current); \nconst lightness = dataset.map(row => row.lightness);\nconst powers    = dataset.map(row => row.power);\n\nconst results = {\n    tension:   { min: min(tensions),  max: max(tensions),  avg: Math.round(avg(tensions))            },\n    current:   { min: min(currents),  max: max(currents),  avg: parseFloat(avg(currents).toFixed(2)) },\n    lightness: { min: min(lightness), max: max(lightness), avg: Math.round(avg(lightness))           },\n    power:     { min: min(powers),    max: max(powers),    avg: Math.round(avg(powers))              }\n}\n\nmsg.dataset = dataset;\nmsg.results = results;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 216,
        "wires": [
            [
                "54b75e1e6cb42781"
            ]
        ]
    },
    {
        "id": "341ef41fa76851e5",
        "type": "switch",
        "z": "50de4a0fb7daeabc",
        "name": "Found data?",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 235,
        "wires": [
            [
                "8239521611090d34"
            ],
            [
                "8fa0ba1f6467e577"
            ]
        ]
    },
    {
        "id": "54b75e1e6cb42781",
        "type": "link out",
        "z": "50de4a0fb7daeabc",
        "name": "OUT (3) Merge dataset of last 1 hour",
        "links": [
            "1e33e29c38a821d4"
        ],
        "x": 1195,
        "y": 216,
        "wires": []
    },
    {
        "id": "1e33e29c38a821d4",
        "type": "link in",
        "z": "50de4a0fb7daeabc",
        "name": "IN (3) Merge dataset of last 1 hour",
        "links": [
            "54b75e1e6cb42781"
        ],
        "x": 55,
        "y": 316,
        "wires": [
            [
                "9b71d7bbe4ced1ad"
            ]
        ]
    },
    {
        "id": "fa41f24c455d0f69",
        "type": "function",
        "z": "50de4a0fb7daeabc",
        "name": "Insert results in database",
        "func": "function format_date(timestamp) {\n    const year = timestamp.getFullYear();\n    const mon  = `0${timestamp.getMonth()+1}`.slice(-2);\n    const day  = `0${timestamp.getDate()}`.slice(-2);\n    const hour = `0${timestamp.getHours()}`.slice(-2);\n    const min  = `0${timestamp.getMinutes()}`.slice(-2);\n    const sec  = `0${timestamp.getSeconds()}`.slice(-2);\n    \n    return `${year}-${mon}-${day} ${hour}:${min}:${sec}`;\n}\n\nconst device_id = msg.device_id;\nconst results   = msg.results;\nconst dataset   = msg.dataset;\nconst timestamp = msg.timestamp;\n\nconst date = new Date(timestamp);\ndate.setSeconds(0);\ndate.setMilliseconds(0);\n\nconst insertion_time = format_date(date);\n\nconst tension        = results.tension;\nconst current        = results.current;\nconst lightness      = results.lightness;\nconst power          = results.power;\n\nmsg.payload = `INSERT\n               INTO SENSORS_DATA_INTERVAL\n               (EQUIPMENT_ID, TENSION_MIN, TENSION_MAX, TENSION_AVG, CURRENT_MIN, CURRENT_MAX, CURRENT_AVG, LIGHTNESS_MIN, LIGHTNESS_MAX, LIGHTNESS_AVG, POWER_MIN, POWER_MAX, POWER_AVG, POWER_EXPEND, INSERTION_TIME, NUM_REGISTRIES)\n               VALUES\n               (${device_id}, ${tension.min}, ${tension.max}, ${tension.avg}, ${current.min}, ${current.max}, ${current.avg}, ${lightness.min}, ${lightness.max}, ${lightness.avg}, ${power.min}, ${power.max}, ${power.avg}, ${results.power_expend}, '${insertion_time}', ${dataset.length})`;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 316,
        "wires": [
            [
                "d51538bdd423e8d5",
                "8f7ee309234502d3"
            ]
        ]
    },
    {
        "id": "d51538bdd423e8d5",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "50de4a0fb7daeabc",
        "name": "",
        "x": 641,
        "y": 316,
        "wires": [
            []
        ]
    },
    {
        "id": "8f7ee309234502d3",
        "type": "debug",
        "z": "50de4a0fb7daeabc",
        "name": "[EXIT 2] Merge dataset of last 1 hour",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 316,
        "wires": []
    },
    {
        "id": "d72bcdcd084b8be6",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Prepare response",
        "func": "msg.payload = '';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1016,
        "wires": [
            [
                "aecf27c4524c85ed",
                "c67c3c1b66b9ba58"
            ]
        ]
    },
    {
        "id": "a54251fe8fe370a5",
        "type": "debug",
        "z": "7f5557aca01f4737",
        "name": "[EXIT] Get device informations",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 876,
        "wires": []
    },
    {
        "id": "c67c3c1b66b9ba58",
        "type": "debug",
        "z": "7f5557aca01f4737",
        "name": "[EXIT] Turn on/off device",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1016,
        "wires": []
    },
    {
        "id": "9b71d7bbe4ced1ad",
        "type": "function",
        "z": "50de4a0fb7daeabc",
        "name": "Calculate power expend",
        "func": "const dataset = msg.dataset;\n\nlet sum = 0;\n\nlet i, j;\n\nfor (i = 0; i < dataset.length; i++) {\n    if (dataset[i].rele_state === true) {\n        for (j = i+1; j < dataset.length && dataset[j].rele_state === true; j++);\n\n        const interval = dataset.slice(i, j);\n        \n        const begin = new Date(interval[0].insertion_time);\n        const final = new Date(interval[interval.length-1].insertion_time);\n        \n        const time_diff = (final-begin)/(1000*60*60); // milliseconds * seconds * minutes\n        \n        const tension_avg = interval.reduce((acc, cur) => acc + cur.tension, 0) / interval.length;\n        const current_avg = interval.reduce((acc, cur) => acc + cur.current, 0) / interval.length;\n        \n        sum += (((tension_avg * current_avg) / 1000) * time_diff);\n        \n        i = j-1;\n    }\n}\n\nmsg.results.power_expend = parseFloat(sum.toFixed(2)); // in kW/h\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 316,
        "wires": [
            [
                "fa41f24c455d0f69"
            ]
        ]
    },
    {
        "id": "5c7a0baf83fa417c",
        "type": "comment",
        "z": "7f5557aca01f4737",
        "name": "Get sensors data ",
        "info": "",
        "x": 120,
        "y": 55,
        "wires": []
    },
    {
        "id": "1c9633d021328e7c",
        "type": "http in",
        "z": "7f5557aca01f4737",
        "name": "",
        "url": "/sensors-data/interval",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 151,
        "y": 217,
        "wires": [
            [
                "96bdf6630c129c17"
            ]
        ]
    },
    {
        "id": "ddca169b2eed6b38",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set query",
        "func": "function format_date(timestamp) {\n    const year = timestamp.getFullYear();\n    const mon  = `0${timestamp.getMonth()+1}`.slice(-2);\n    const day  = `0${timestamp.getDate()}`.slice(-2);\n    const hour = `0${timestamp.getHours()}`.slice(-2);\n    const min  = `0${timestamp.getMinutes()}`.slice(-2);\n    const sec  = `0${timestamp.getSeconds()}`.slice(-2);\n    \n    return `${year}-${mon}-${day} ${hour}:${min}:${sec}`;\n}\n\nconst threshold = msg.threshold;\nconst interval  = msg.interval;\nconst device_id = msg.device_id;\n\nconst end   = format_date(threshold);\nconst begin = format_date(new Date(threshold - 1000 * 60 * interval));\n\nmsg.payload = `SELECT TENSION_MIN, TENSION_MAX, TENSION_AVG, CURRENT_MIN, CURRENT_MAX, CURRENT_AVG, LIGHTNESS_MIN, LIGHTNESS_MAX, LIGHTNESS_AVG, POWER_MIN, POWER_MAX, POWER_AVG, INSERTION_TIME\n               FROM SENSORS_DATA_INTERVAL\n               WHERE EQUIPMENT_ID = ${device_id} \n               AND (INSERTION_TIME AT TIME ZONE 'CST') > (TO_TIMESTAMP('${begin}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST') \n               AND (INSERTION_TIME AT TIME ZONE 'CST') <= (TO_TIMESTAMP('${end}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST')\n               ORDER BY INSERTION_TIME`;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 238,
        "wires": [
            [
                "6ec488a047717083"
            ]
        ]
    },
    {
        "id": "47e86d41591c2ef2",
        "type": "http response",
        "z": "7f5557aca01f4737",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 540,
        "y": 436,
        "wires": []
    },
    {
        "id": "6ec488a047717083",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7f5557aca01f4737",
        "name": "",
        "x": 1120,
        "y": 215,
        "wires": [
            [
                "7cdff54cf4f12948"
            ]
        ]
    },
    {
        "id": "dc71772a94af1a6d",
        "type": "debug",
        "z": "7f5557aca01f4737",
        "name": "[EXIT 2] Get sensor data ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 436,
        "wires": []
    },
    {
        "id": "1a6d28956a0d6589",
        "type": "switch",
        "z": "7f5557aca01f4737",
        "name": "What's the interval?",
        "property": "interval",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "60",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 217,
        "wires": [
            [
                "57ce85e61299af4e"
            ],
            [
                "ddca169b2eed6b38"
            ]
        ]
    },
    {
        "id": "57ce85e61299af4e",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set query",
        "func": "function format_date(timestamp) {\n    const year = timestamp.getFullYear();\n    const mon  = `0${timestamp.getMonth()+1}`.slice(-2);\n    const day  = `0${timestamp.getDate()}`.slice(-2);\n    const hour = `0${timestamp.getHours()}`.slice(-2);\n    const min  = `0${timestamp.getMinutes()}`.slice(-2);\n    const sec  = `0${timestamp.getSeconds()}`.slice(-2);\n    \n    return `${year}-${mon}-${day} ${hour}:${min}:${sec}`;\n}\n\nconst threshold = msg.threshold;\nconst interval  = msg.interval;\nconst device_id = msg.device_id;\n\nconst end   = format_date(threshold);\nconst begin = format_date(new Date(threshold - 1000 * 60 * interval));\n\nmsg.payload = `SELECT TENSION, CURRENT, LIGHTNESS, INSERTION_TIME\n               FROM SENSORS_DATA_REAL_TIME\n               WHERE EQUIPMENT_ID = ${device_id} \n               AND (INSERTION_TIME AT TIME ZONE 'CST') >= (TO_TIMESTAMP('${begin}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST') \n               AND (INSERTION_TIME AT TIME ZONE 'CST') < (TO_TIMESTAMP('${end}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST')\n               ORDER BY INSERTION_TIME`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 195,
        "wires": [
            [
                "6ec488a047717083"
            ]
        ]
    },
    {
        "id": "1bb825e2928759bb",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Calculate powers",
        "func": "let dataset = msg.payload;\n\ndataset = dataset.map(data => {\n    const tension = data.tension;\n    const current = data.current;\n    \n    const power = Math.round(tension * current);\n    \n    data.power = power;\n    \n    return data;\n});\n\nmsg.payload = dataset;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 296,
        "wires": [
            [
                "97320d78a0801902"
            ]
        ]
    },
    {
        "id": "f37dd2752270a5c8",
        "type": "switch",
        "z": "7f5557aca01f4737",
        "name": "What's the interval?",
        "property": "interval",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "60",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 328,
        "wires": [
            [
                "1bb825e2928759bb"
            ],
            [
                "0b5d0e0c0b5c98b1"
            ]
        ]
    },
    {
        "id": "2d413cccf4985d24",
        "type": "link in",
        "z": "7f5557aca01f4737",
        "name": "IN (1) Get sensor data",
        "links": [
            "7cdff54cf4f12948"
        ],
        "x": 55,
        "y": 328,
        "wires": [
            [
                "f37dd2752270a5c8"
            ]
        ]
    },
    {
        "id": "7cdff54cf4f12948",
        "type": "link out",
        "z": "7f5557aca01f4737",
        "name": "OUT (1) Get sensor data",
        "links": [
            "2d413cccf4985d24"
        ],
        "x": 1215,
        "y": 215,
        "wires": []
    },
    {
        "id": "d998e00625e40a86",
        "type": "link out",
        "z": "7f5557aca01f4737",
        "name": "OUT (3) Get sensor data",
        "links": [
            "6383f89379246b18"
        ],
        "x": 1015,
        "y": 339,
        "wires": []
    },
    {
        "id": "6b6db413a491a12d",
        "type": "link out",
        "z": "7f5557aca01f4737",
        "name": "OUT (2) Get sensor data",
        "links": [
            "6383f89379246b18"
        ],
        "x": 755,
        "y": 296,
        "wires": []
    },
    {
        "id": "6383f89379246b18",
        "type": "link in",
        "z": "7f5557aca01f4737",
        "name": "IN (2) Get sensor data",
        "links": [
            "6b6db413a491a12d",
            "d998e00625e40a86",
            "15146309dfa72ed0",
            "2c82503f0d614f35",
            "c3c98f4ddb1aa915",
            "14237c631ef6b8a9"
        ],
        "x": 55,
        "y": 436,
        "wires": [
            [
                "5f90a25a42bb5326"
            ]
        ]
    },
    {
        "id": "97320d78a0801902",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Group data by minute",
        "func": "const dataset   = msg.payload;\nconst threshold = msg.threshold;\nconst n_groups  = msg.interval;\nconst hop       = 1000 * msg.interval;\n\n// Create groups\n\nlet i;\nlet groups = [];\n\nfor (i = n_groups-1; i >= 0; i--) {\n    const timestamp = new Date(threshold - hop * (i+1));\n    const measures = [];\n    \n    groups.push({ timestamp, measures });\n}\n\n// Group data\n\ni = 0;\n\ndataset.forEach(data => {\n    const timestamp = new Date(data.insertion_time);\n    \n    for (i; i < groups.length && timestamp > groups[i].timestamp; i++);\n\n    if (i === 0) {\n        groups[i].measures.push(data);\n    } else {\n        groups[i-1].measures.push(data);\n    }\n});\n\n// Sum measures\n\nconst avg = dataset => dataset.reduce((acc, cur) => acc + cur, 0) / dataset.length;\n\ngroups = groups.map(group => {\n    const tension   = group.measures.map(data => data.tension);\n    const current   = group.measures.map(data => data.current);\n    const lightness = group.measures.map(data => data.lightness);\n    const powers    = group.measures.map(data => data.power);\n    \n    const tension_avg   = Math.round(avg(tension) || 0);\n    const current_avg   = parseFloat((avg(current) || 0).toFixed(2));\n    const lightness_avg = Math.round(avg(lightness) || 0);\n    const powers_avg    = Math.round(avg(powers) || 0);\n    \n    group.measures = {\n        tension:   tension_avg,\n        current:   current_avg,\n        lightness: lightness_avg,\n        power:     powers_avg\n    }\n    \n    return group;\n});\n\nmsg.dataset = groups;\nmsg.hop     = hop;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 296,
        "wires": [
            [
                "6b6db413a491a12d"
            ]
        ]
    },
    {
        "id": "7287a934bad43292",
        "type": "http in",
        "z": "7f5557aca01f4737",
        "name": "",
        "url": "/sensors-data/last",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 115,
        "wires": [
            [
                "a59199192f78dcc7"
            ]
        ]
    },
    {
        "id": "659446935b848402",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set query",
        "func": "const device_id = msg.device_id;\n\nmsg.payload = `SELECT TENSION, CURRENT, LIGHTNESS, RELE_STATE\n               FROM SENSORS_DATA_REAL_TIME\n               WHERE EQUIPMENT_ID = ${device_id} \n               AND (INSERTION_TIME AT TIME ZONE 'CST') > (CURRENT_TIMESTAMP AT TIME ZONE 'CST') - INTERVAL '1 min'\n               ORDER BY INSERTION_TIME DESC\n               LIMIT 1`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 115,
        "wires": [
            [
                "bc421cbbfbd8aa49"
            ]
        ]
    },
    {
        "id": "bc421cbbfbd8aa49",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7f5557aca01f4737",
        "name": "",
        "x": 660,
        "y": 115,
        "wires": [
            [
                "269b6f17aa90ca43"
            ]
        ]
    },
    {
        "id": "269b6f17aa90ca43",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Calculate power",
        "func": "let dataset = msg.payload;\n\nif (dataset.length > 0) {\n    dataset = dataset.map(data => {\n        // Calculate power\n        const tension = data.tension;\n        const current = data.current;\n        \n        const power = Math.round(tension * current);\n        \n        data.power = power;\n        \n        // Convert rele_state\n        data.rele_state = data.rele_state ? 1 : 0;\n        \n        return data;\n    });\n    \n    msg.payload = dataset;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 115,
        "wires": [
            [
                "270828bcb3beacf1",
                "9853d4fc5f5b1ebf"
            ]
        ]
    },
    {
        "id": "270828bcb3beacf1",
        "type": "http response",
        "z": "7f5557aca01f4737",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 1000,
        "y": 115,
        "wires": []
    },
    {
        "id": "9853d4fc5f5b1ebf",
        "type": "debug",
        "z": "7f5557aca01f4737",
        "name": "[EXIT 1] Get sensor data ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 116,
        "wires": []
    },
    {
        "id": "96bdf6630c129c17",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Parse request body",
        "func": "msg.device_id = msg.payload.device_id;\nmsg.interval  = msg.payload.interval; // in minutes\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 217,
        "wires": [
            [
                "ddeb66f0f282da2c"
            ]
        ]
    },
    {
        "id": "ddeb66f0f282da2c",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Define thresholds",
        "func": "const interval  = msg.interval;\n\nlet threshold = new Date();\nthreshold.setSeconds(0);\nthreshold.setMilliseconds(0);\n\nif (interval > 60) {\n    threshold.setMinutes(0);\n}\n\nif (interval > 1440) {\n    const hour = threshold.getHours();\n    \n    if (hour > 18) { // Hour between 18:00 and 00:00\n        threshold.setHours(18);\n    } else if (hour > 6) { // Hour between 06:00 and 18:00\n        threshold.setHours(6);\n    } else { // Hour between 00:00 and 06:00\n        threshold.setDate(threshold.getDate()-1);\n        threshold.setHours(18);\n    }\n}\n\nmsg.threshold = threshold;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 217,
        "wires": [
            [
                "1a6d28956a0d6589"
            ]
        ]
    },
    {
        "id": "acb080769cfd96f3",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Group data by 12 hours",
        "func": "const dataset   = msg.dataset;\nconst threshold = msg.threshold;\nconst n_groups  = msg.interval / (60 * 12);\nconst hop       = 1000 * 60 * 60 * 12; // milliseconds * seconds * minutes * hours\n\n// Create groups\n\nlet i;\nlet groups = [];\n\nfor (i = n_groups-1; i >= 0; i--) {\n    const timestamp = new Date(threshold - hop * (i+1));\n    const measures = [];\n    \n    groups.push({ timestamp, measures });\n}\n\n// Group data\n\ni = 0;\n\ndataset.forEach(data => {\n    const timestamp = data.timestamp;\n    \n    for (i; i < groups.length && timestamp >= groups[i].timestamp; i++);\n\n    if (i === 0) {\n        groups[i].measures.push(data);\n    } else {\n        groups[i-1].measures.push(data);\n    }\n});\n\n\n// Sum values\n\nconst avg = dataset => dataset.reduce((acc, cur) => acc + cur, 0) / dataset.length;\n\ngroups = groups.map(group => {\n    tension_min   = Math.round(avg(group.measures.map(data => data.measures.tension_min)) || 0);\n    tension_max   = Math.round(avg(group.measures.map(data => data.measures.tension_max)) || 0);\n    tension_avg   = Math.round(avg(group.measures.map(data => data.measures.tension_avg)) || 0);\n    current_min   = parseFloat((avg(group.measures.map(data => data.measures.current_min)) || 0).toFixed(2));\n    current_max   = parseFloat((avg(group.measures.map(data => data.measures.current_max)) || 0).toFixed(2));\n    current_avg   = parseFloat((avg(group.measures.map(data => data.measures.current_avg)) || 0).toFixed(2));\n    lightness_min = Math.round(avg(group.measures.map(data => data.measures.lightness_min)) || 0);\n    lightness_max = Math.round(avg(group.measures.map(data => data.measures.lightness_max)) || 0);\n    lightness_avg = Math.round(avg(group.measures.map(data => data.measures.lightness_avg)) || 0);\n    power_min     = Math.round(avg(group.measures.map(data => data.measures.power_min)) || 0);\n    power_max     = Math.round(avg(group.measures.map(data => data.measures.power_max)) || 0);\n    power_avg     = Math.round(avg(group.measures.map(data => data.measures.power_avg)) || 0);\n\n    group.measures = {\n        tension_min,\n        tension_max,\n        tension_avg,\n        current_min,\n        current_max,\n        current_avg,\n        lightness_min,\n        lightness_max,\n        lightness_avg,\n        power_min,\n        power_max,\n        power_avg,\n    }\n    \n    return group;\n});\n\nmsg.dataset = groups;\nmsg.hop     = hop;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 339,
        "wires": [
            [
                "d998e00625e40a86"
            ]
        ]
    },
    {
        "id": "7996fe3e5aafa142",
        "type": "switch",
        "z": "7f5557aca01f4737",
        "name": "Group by 12 hours?",
        "property": "interval",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "1440",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 620,
        "y": 360,
        "wires": [
            [
                "acb080769cfd96f3"
            ],
            [
                "14237c631ef6b8a9"
            ]
        ]
    },
    {
        "id": "a59199192f78dcc7",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Parse request body",
        "func": "msg.device_id = msg.payload.device_id;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 115,
        "wires": [
            [
                "659446935b848402"
            ]
        ]
    },
    {
        "id": "4a2f6b921cc7b9aa",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Parse request body",
        "func": "msg.device_id = msg.payload.device_id;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 876,
        "wires": [
            [
                "4eb5c88f1b01827b"
            ]
        ]
    },
    {
        "id": "14237c631ef6b8a9",
        "type": "link out",
        "z": "7f5557aca01f4737",
        "name": "OUT (4) Get sensor data",
        "links": [
            "6383f89379246b18"
        ],
        "x": 775,
        "y": 379,
        "wires": []
    },
    {
        "id": "8fa0ba1f6467e577",
        "type": "debug",
        "z": "50de4a0fb7daeabc",
        "name": "[EXIT 1] Merge dataset of last 1 hour",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 256,
        "wires": []
    },
    {
        "id": "711dd25edc78321d",
        "type": "comment",
        "z": "7f5557aca01f4737",
        "name": "Get device power expend",
        "info": "",
        "x": 150,
        "y": 535,
        "wires": []
    },
    {
        "id": "7f2c19c053817b45",
        "type": "http in",
        "z": "7f5557aca01f4737",
        "name": "",
        "url": "/device-expend",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 575,
        "wires": [
            [
                "7eb671d1f0ef8e80"
            ]
        ]
    },
    {
        "id": "7eb671d1f0ef8e80",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Parse request body",
        "func": "msg.device_id = msg.payload.device_id;\nmsg.interval  = msg.payload.interval; // in minutes\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 575,
        "wires": [
            [
                "27512d3eece118a2"
            ]
        ]
    },
    {
        "id": "c2140a9dec5196f7",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set query",
        "func": "function format_date(timestamp) {\n    const year = timestamp.getFullYear();\n    const mon  = `0${timestamp.getMonth()+1}`.slice(-2);\n    const day  = `0${timestamp.getDate()}`.slice(-2);\n    const hour = `0${timestamp.getHours()}`.slice(-2);\n    const min  = `0${timestamp.getMinutes()}`.slice(-2);\n    const sec  = `0${timestamp.getSeconds()}`.slice(-2);\n    \n    return `${year}-${mon}-${day} ${hour}:${min}:${sec}`;\n}\n\nconst threshold = msg.threshold;\nconst interval  = msg.interval;\nconst device_id = msg.device_id;\n\nconst end   = format_date(threshold);\nconst begin = format_date(new Date(threshold - 1000 * 60 * interval));\n\nmsg.payload = `SELECT POWER_EXPEND, INSERTION_TIME\n               FROM SENSORS_DATA_INTERVAL\n               WHERE EQUIPMENT_ID = ${device_id}\n               AND (INSERTION_TIME AT TIME ZONE 'CST') > (TO_TIMESTAMP('${begin}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST')\n               AND (INSERTION_TIME AT TIME ZONE 'CST') <= (TO_TIMESTAMP('${end}', 'YYYY-MM-DD HH24:MI:SS') AT TIME ZONE 'CST')\n               ORDER BY INSERTION_TIME`;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 575,
        "wires": [
            [
                "7d040294bc085d18"
            ]
        ]
    },
    {
        "id": "7d040294bc085d18",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7f5557aca01f4737",
        "name": "",
        "env": [],
        "x": 820,
        "y": 575,
        "wires": [
            [
                "cc412d879d10623a"
            ]
        ]
    },
    {
        "id": "cc412d879d10623a",
        "type": "link out",
        "z": "7f5557aca01f4737",
        "name": "OUT (1) Get device power expend",
        "links": [
            "1ad4e0b8625d240b"
        ],
        "x": 915,
        "y": 575,
        "wires": []
    },
    {
        "id": "1ad4e0b8625d240b",
        "type": "link in",
        "z": "7f5557aca01f4737",
        "name": "IN (1) Get device power expend",
        "links": [
            "cc412d879d10623a"
        ],
        "x": 55,
        "y": 657,
        "wires": [
            [
                "756183b64169968e"
            ]
        ]
    },
    {
        "id": "048a71ce6e6ca5ae",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Group data by 12 hours",
        "func": "const dataset   = msg.dataset;\nconst threshold = msg.threshold;\nconst n_groups  = msg.interval / (60 * 12);\nconst hop       = 1000 * 60 * 60 * 12; // milliseconds * seconds * minutes * hours\n\n// Create groups\n\nlet i;\nlet groups = [];\n\nfor (i = n_groups-1; i >= 0; i--) {\n    const timestamp = new Date(threshold - hop * (i+1));\n    const expend = [];\n    \n    groups.push({ timestamp, expend });\n}\n\n// Group data\n\ni = 0;\n\ndataset.forEach(data => {\n    const timestamp = data.timestamp;\n    \n    for (i; i < groups.length && timestamp >= groups[i].timestamp; i++);\n\n    if (i === 0) {\n        groups[i].expend.push(data);\n    } else {\n        groups[i-1].expend.push(data);\n    }\n});\n\n// Sum values\ngroups = groups.map(group => {\n    const expend_sum = group.expend.reduce((acc, cur) => acc + cur.expend, 0);\n    \n    group.expend = expend_sum;\n    \n    return group;\n});\n\nmsg.dataset = groups;\nmsg.hop     = hop;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 635,
        "wires": [
            [
                "358c09adb5397882"
            ]
        ]
    },
    {
        "id": "442ca2e1113dc53f",
        "type": "switch",
        "z": "7f5557aca01f4737",
        "name": "Group by 12 hours?",
        "property": "interval",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "1440",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 400,
        "y": 657,
        "wires": [
            [
                "048a71ce6e6ca5ae"
            ],
            [
                "959a6c9d2f3fcc28"
            ]
        ]
    },
    {
        "id": "756183b64169968e",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Group data by hour",
        "func": "const dataset   = msg.payload;\nconst threshold = msg.threshold;\nconst n_groups  = msg.interval / 60;\nconst hop       = 1000 * 60 * 60;\n\n// Create groups\n\nlet i;\nlet groups = [];\n\nfor (i = n_groups-1; i >= 0; i--) {\n    const timestamp = new Date(threshold - hop * (i+1));\n    const expend = [];\n    \n    groups.push({ timestamp, expend });\n}\n\n// Group data\n\ni = 0;\n\ndataset.forEach(data => {\n    const timestamp = new Date(data.insertion_time);\n    \n    for (i; i < groups.length && timestamp > groups[i].timestamp; i++);\n\n    if (i === 0) {\n        groups[i].expend.push(data);\n    } else {\n        groups[i-1].expend.push(data);\n    }\n});\n\n// Sum values\ngroups = groups.map(group => {\n    const expend_sum = group.expend.reduce((acc, cur) => acc + cur.power_expend, 0);\n    \n    group.expend = expend_sum;\n    \n    return group;\n});\n\nmsg.dataset = groups;\nmsg.hop     = hop;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 657,
        "wires": [
            [
                "442ca2e1113dc53f"
            ]
        ]
    },
    {
        "id": "aace7251b58696f9",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Create labels",
        "func": "function format_date(timestamp) {\n    const hour = `0${timestamp.getHours()}`.slice(-2);\n    const min  = `0${timestamp.getMinutes()}`.slice(-2);\n    const day  = `0${timestamp.getDate()}`.slice(-2);\n    const mon  = `0${timestamp.getMonth()+1}`.slice(-2);\n    \n    return `${hour}:${min} ${day}/${mon}`;\n}\n\nlet dataset = msg.dataset;\nconst hop = msg.hop;\n\ndataset = dataset.map(data => {\n    const timestamp = data.timestamp;\n    \n    const begin = format_date(timestamp);\n    timestamp.setTime(timestamp.getTime() + hop);\n    const final = format_date(timestamp);\n    \n    data.label = `${begin} à ${final}`;\n    \n    delete data.timestamp;\n    \n    return data;\n});\n\nmsg.dataset = dataset;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 735,
        "wires": [
            [
                "f35e3c679c28b258"
            ]
        ]
    },
    {
        "id": "358c09adb5397882",
        "type": "link out",
        "z": "7f5557aca01f4737",
        "name": "OUT (2) Get device power expend",
        "links": [
            "99da356c15f5b108"
        ],
        "x": 795,
        "y": 635,
        "wires": []
    },
    {
        "id": "959a6c9d2f3fcc28",
        "type": "link out",
        "z": "7f5557aca01f4737",
        "name": "OUT (3) Get device power expend",
        "links": [
            "99da356c15f5b108"
        ],
        "x": 555,
        "y": 678,
        "wires": []
    },
    {
        "id": "99da356c15f5b108",
        "type": "link in",
        "z": "7f5557aca01f4737",
        "name": "IN (2) Get device power expend",
        "links": [
            "358c09adb5397882",
            "959a6c9d2f3fcc28"
        ],
        "x": 55,
        "y": 735,
        "wires": [
            [
                "aace7251b58696f9"
            ]
        ]
    },
    {
        "id": "486315fd3ba755bc",
        "type": "http response",
        "z": "7f5557aca01f4737",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 540,
        "y": 735,
        "wires": []
    },
    {
        "id": "f58a050482bf3036",
        "type": "debug",
        "z": "7f5557aca01f4737",
        "name": "[EXIT] Get device power expend",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 736,
        "wires": []
    },
    {
        "id": "27512d3eece118a2",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Define threshold",
        "func": "const interval  = msg.interval;\n\nlet threshold = new Date();\nthreshold.setMinutes(0);\nthreshold.setSeconds(0);\nthreshold.setMilliseconds(0);\n\nif (interval > 1440) {\n    const hour = threshold.getHours();\n    \n    if (hour > 18) { // Hour between 18:00 and 00:00\n        threshold.setHours(18);\n    } else if (hour > 6) { // Hour between 06:00 and 18:00\n        threshold.setHours(6);\n    } else { // Hour between 00:00 and 06:00\n        threshold.setDate(threshold.getDate()-1);\n        threshold.setHours(18);\n    }\n}\n\nmsg.threshold = threshold;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 575,
        "wires": [
            [
                "c2140a9dec5196f7"
            ]
        ]
    },
    {
        "id": "f35e3c679c28b258",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Prepare response",
        "func": "const dataset = msg.dataset;\n\nlabels = dataset.map(data => data.label);\nvalues = dataset.map(data => data.expend);\n\nmsg.payload = { labels, values };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 735,
        "wires": [
            [
                "f58a050482bf3036"
            ]
        ]
    },
    {
        "id": "0b5d0e0c0b5c98b1",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Group data by hour",
        "func": "const dataset   = msg.payload;\nconst threshold = msg.threshold;\nconst n_groups  = msg.interval / 60;\nconst hop       = 1000 * 60 * 60;\n\n// Create groups\n\nlet i;\nlet groups = [];\n\nfor (i = n_groups-1; i >= 0; i--) {\n    const timestamp = new Date(threshold - hop * (i+1));\n    const measures = [];\n    \n    groups.push({ timestamp, measures });\n}\n\n// Group data\n\ni = 0;\n\ndataset.forEach(data => {\n    const timestamp = new Date(data.insertion_time);\n    \n    for (i; i < groups.length && timestamp > groups[i].timestamp; i++);\n\n    if (i === 0) {\n        groups[i].measures.push(data);\n    } else {\n        groups[i-1].measures.push(data);\n    }\n});\n\n// Sum values\n\nconst avg = dataset => dataset.reduce((acc, cur) => acc + cur, 0) / dataset.length;\n\ngroups = groups.map(group => {\n    tension_min   = Math.round(avg(group.measures.map(data => data.tension_min)) || 0);\n    tension_max   = Math.round(avg(group.measures.map(data => data.tension_max)) || 0);\n    tension_avg   = Math.round(avg(group.measures.map(data => data.tension_avg)) || 0);\n    current_min   = parseFloat((avg(group.measures.map(data => data.current_min)) || 0).toFixed(2));\n    current_max   = parseFloat((avg(group.measures.map(data => data.current_max)) || 0).toFixed(2));\n    current_avg   = parseFloat((avg(group.measures.map(data => data.current_avg)) || 0).toFixed(2));\n    lightness_min = Math.round(avg(group.measures.map(data => data.lightness_min)) || 0);\n    lightness_max = Math.round(avg(group.measures.map(data => data.lightness_max)) || 0);\n    lightness_avg = Math.round(avg(group.measures.map(data => data.lightness_avg)) || 0);\n    power_min     = Math.round(avg(group.measures.map(data => data.power_min)) || 0);\n    power_max     = Math.round(avg(group.measures.map(data => data.power_max)) || 0);\n    power_avg     = Math.round(avg(group.measures.map(data => data.power_avg)) || 0);\n    \n    group.measures = {\n        tension_min,\n        tension_max,\n        tension_avg,\n        current_min,\n        current_max,\n        current_avg,\n        lightness_min,\n        lightness_max,\n        lightness_avg,\n        power_min,\n        power_max,\n        power_avg,\n    }\n    \n    return group;\n});\n\nmsg.dataset = groups;\nmsg.hop     = hop;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 360,
        "wires": [
            [
                "7996fe3e5aafa142"
            ]
        ]
    },
    {
        "id": "5f90a25a42bb5326",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Create labels",
        "func": "function format_date(timestamp) {\n    const hour = `0${timestamp.getHours()}`.slice(-2);\n    const min  = `0${timestamp.getMinutes()}`.slice(-2);\n    const day  = `0${timestamp.getDate()}`.slice(-2);\n    const mon  = `0${timestamp.getMonth()+1}`.slice(-2);\n    \n    if (interval === 60) {\n        return `${hour}:${min}`;\n    } else {\n        return `${hour}:${min} ${day}/${mon}`;\n    }\n}\n\nconst interval = msg.interval;\nconst hop      = msg.hop;\n\nlet dataset = msg.dataset;\n\ndataset = dataset.map(data => {\n    const timestamp = data.timestamp;\n    \n    const begin = format_date(timestamp, interval);\n    timestamp.setTime(timestamp.getTime() + hop);\n    const final = format_date(timestamp, interval);\n    \n    if (interval === 60) {\n        data.label = `${begin}`;\n    } else {\n        data.label = `${begin} à ${final}`;\n    }\n    \n    delete data.timestamp;\n    \n    return data;\n});\n\nmsg.dataset = dataset;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 436,
        "wires": [
            [
                "3d4b27a94f96d759"
            ]
        ]
    },
    {
        "id": "3d4b27a94f96d759",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Prepare response",
        "func": "const dataset  = msg.dataset;\nconst interval = msg.interval;\n\nconst labels = dataset.map(data => data.label);\n\nlet values;\n\nif (interval === 60) {\n    values = {\n        tension:   dataset.map(data => data.measures.tension),\n        current:   dataset.map(data => data.measures.current),\n        lightness: dataset.map(data => data.measures.lightness),\n        power:     dataset.map(data => data.measures.power)\n    }\n} else {\n    values = {\n        tension: {\n            min: dataset.map(data => data.measures.tension_min),\n            max: dataset.map(data => data.measures.tension_max),\n            avg: dataset.map(data => data.measures.tension_avg)\n        },\n        current: {\n            min: dataset.map(data => data.measures.current_min),\n            max: dataset.map(data => data.measures.current_max),\n            avg: dataset.map(data => data.measures.current_avg)       \n        },\n        lightness: {\n            min: dataset.map(data => data.measures.lightness_min),\n            max: dataset.map(data => data.measures.lightness_max),\n            avg: dataset.map(data => data.measures.lightness_avg)      \n        },\n        power: {\n            min: dataset.map(data => data.measures.power_min),\n            max: dataset.map(data => data.measures.power_max),\n            avg: dataset.map(data => data.measures.power_avg)          \n        }\n    }\n}\n\nmsg.payload = { labels, values };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 436,
        "wires": [
            [
                "47e86d41591c2ef2",
                "dc71772a94af1a6d"
            ]
        ]
    }
]