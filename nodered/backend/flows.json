[
    {
        "id": "8813ec2835daae18",
        "type": "tab",
        "label": "Get sensors data",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7f5557aca01f4737",
        "type": "tab",
        "label": "/devices/measures",
        "disabled": false,
        "info": ""
    },
    {
        "id": "4a674aaa9e667dd6",
        "type": "tab",
        "label": "/devices/info",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e27b09cd4ecd866a",
        "type": "tab",
        "label": "/devices/actions",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7bfe80d199363eac",
        "type": "tab",
        "label": "Historic table",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a716829fd201f4fd",
        "type": "tab",
        "label": "Problem alarms",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1ce1485ad608bc7a",
        "type": "tab",
        "label": "Clear alarms",
        "disabled": false,
        "info": ""
    },
    {
        "id": "bab6ffe5b7ae3a28",
        "type": "subflow",
        "name": "Database",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 100,
                "wires": [
                    {
                        "id": "2dc46f9c24f9eb35"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 100,
                "wires": [
                    {
                        "id": "dcf9a148a61be9fc",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "185bd0a8b5a4b916",
        "type": "subflow",
        "name": "Database Redis",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 159,
                "wires": [
                    {
                        "id": "3c546124752a49f4"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 500,
                "y": 781,
                "wires": [
                    {
                        "id": "adc4c59772c6298c",
                        "port": 0
                    }
                ]
            },
            {
                "x": 120,
                "y": 861,
                "wires": [
                    {
                        "id": "ab7425eb7c0d4676",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "ef1e9babe146a753",
        "type": "subflow",
        "name": "Redis Commands",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 77,
                "wires": [
                    {
                        "id": "a4fed50abee7fd30"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 320,
                "y": 940,
                "wires": [
                    {
                        "id": "fecff98d4f469ec2",
                        "port": 0
                    }
                ]
            },
            {
                "x": 400,
                "y": 1000,
                "wires": [
                    {
                        "id": "8f07ee526f13587c",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "df4bdf4be0d4150f",
        "type": "mqtt-broker",
        "name": "Local MQTT Broker",
        "broker": "broker_mqtt",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "21c629e3be9268f3",
        "type": "mydbConfig",
        "name": "postgres@db:5432/PGC",
        "host": "db",
        "port": "5432",
        "database": "PGC",
        "ssl": false,
        "rejectUnauthorized": false,
        "ca": "",
        "key": "",
        "cert": "",
        "max": "10",
        "min": "1",
        "idle": "1000"
    },
    {
        "id": "a7cb2a42ddfd0d99",
        "type": "redis-config",
        "name": "Redis Measures",
        "options": "{\"host\":\"db_redis\", \"db\": 0}",
        "cluster": false,
        "optionsType": "json"
    },
    {
        "id": "1278b67130dc94fa",
        "type": "mqtt-broker",
        "name": "MQTT Mosquitto",
        "broker": "test.mosquitto.org",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "e6174ffe2df6871a",
        "type": "redis-config",
        "z": "ef1e9babe146a753",
        "name": "Redis Alarms",
        "options": "{\"host\":\"db_redis\", \"db\": 1}",
        "cluster": false,
        "optionsType": "json"
    },
    {
        "id": "2dc46f9c24f9eb35",
        "type": "function",
        "z": "bab6ffe5b7ae3a28",
        "name": "Set Query",
        "func": "msg.query = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 100,
        "wires": [
            [
                "bb3a8d2b7854dccb"
            ]
        ]
    },
    {
        "id": "dcf9a148a61be9fc",
        "type": "function",
        "z": "bab6ffe5b7ae3a28",
        "name": "Get Query Response",
        "func": "const query_response = msg.payload.rows;\n\ndelete msg.query;\n\nmsg.payload = query_response;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "bb3a8d2b7854dccb",
        "type": "mydb",
        "z": "bab6ffe5b7ae3a28",
        "name": "Execute Query",
        "style": "mustache",
        "substEnvVars": false,
        "query": "{{{ msg.query }}};",
        "mydbConfig": "21c629e3be9268f3",
        "x": 360,
        "y": 100,
        "wires": [
            [
                "dcf9a148a61be9fc"
            ]
        ]
    },
    {
        "id": "8b614dd0c4e7ecd6",
        "type": "mqtt in",
        "z": "8813ec2835daae18",
        "name": "[LOCAL BROKER] Sensors Output",
        "topic": "pgc_ufabc/devices/measures",
        "qos": "0",
        "datatype": "json",
        "broker": "df4bdf4be0d4150f",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 180,
        "y": 116,
        "wires": [
            [
                "408897a4c356ccee"
            ]
        ]
    },
    {
        "id": "80a46d82ca4455ee",
        "type": "catch",
        "z": "8813ec2835daae18",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 101,
        "y": 776,
        "wires": [
            [
                "4fed0b38fbbe8ae3"
            ]
        ]
    },
    {
        "id": "27e7cc799e913f9c",
        "type": "comment",
        "z": "8813ec2835daae18",
        "name": "########## Exceptions Treatment",
        "info": "",
        "x": 180,
        "y": 716,
        "wires": []
    },
    {
        "id": "4fed0b38fbbe8ae3",
        "type": "debug",
        "z": "8813ec2835daae18",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 251,
        "y": 776,
        "wires": []
    },
    {
        "id": "96803667e593d0dc",
        "type": "function",
        "z": "8813ec2835daae18",
        "name": "Set query",
        "func": "const measures = msg.payload;\nconst timestamp = Math.round(msg.timestamp/1000);\n\nmsg.payload = `INSERT \n               INTO SENSORS_DATA_REAL_TIME (DEVICE_ID, VOLTAGE, CURRENT, LIGHTNESS, RELE_STATE, INSERTION_TIME) \n               VALUES (${measures.device_id}, ${measures.voltage}, ${measures.current}, ${measures.lightness}, '${measures.rele_state}', TO_TIMESTAMP(${timestamp}))\n               RETURNING ID`;\n               \nmsg.measures = measures;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 356,
        "wires": [
            [
                "fea15522f7bc9730"
            ]
        ]
    },
    {
        "id": "fea15522f7bc9730",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "8813ec2835daae18",
        "name": "",
        "env": [],
        "x": 300,
        "y": 356,
        "wires": [
            [
                "a8196a45cdacfe85",
                "8885c9540ad9bf99"
            ]
        ]
    },
    {
        "id": "8885c9540ad9bf99",
        "type": "debug",
        "z": "8813ec2835daae18",
        "name": "[EXIT] Store data in Postgres",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 356,
        "wires": []
    },
    {
        "id": "6c14b6de93cba404",
        "type": "comment",
        "z": "8813ec2835daae18",
        "name": "########## Receive sensors data",
        "info": "",
        "x": 180,
        "y": 56,
        "wires": []
    },
    {
        "id": "4ac549b1969b0168",
        "type": "catch",
        "z": "7f5557aca01f4737",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 1256,
        "wires": [
            [
                "a961e1ec20451721"
            ]
        ]
    },
    {
        "id": "fca56cd6fe289503",
        "type": "comment",
        "z": "7f5557aca01f4737",
        "name": "########## Exceptions Treatment",
        "info": "",
        "x": 180,
        "y": 1155,
        "wires": []
    },
    {
        "id": "1705d89c23ac2369",
        "type": "debug",
        "z": "7f5557aca01f4737",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 1236,
        "wires": []
    },
    {
        "id": "ad7a04302aa7d2a5",
        "type": "inject",
        "z": "7bfe80d199363eac",
        "name": "[TRIGGER] Execute every 1 hour",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "0 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 205,
        "y": 115,
        "wires": [
            [
                "595d6b6ee38f20b2"
            ]
        ]
    },
    {
        "id": "c1d56661b93bc251",
        "type": "comment",
        "z": "7bfe80d199363eac",
        "name": "########## Merge dataset of last 1 hour",
        "info": "",
        "x": 200,
        "y": 56,
        "wires": []
    },
    {
        "id": "65af7ad57593057d",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7bfe80d199363eac",
        "name": "",
        "x": 800,
        "y": 115,
        "wires": [
            [
                "b5f99fa633c93197"
            ]
        ]
    },
    {
        "id": "9563eb3f5af48c81",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Get active devices",
        "func": "msg.payload = `SELECT ID FROM DEVICES WHERE STATUS = '1'`;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 196,
        "wires": [
            [
                "5591169f8bdc17c3"
            ]
        ]
    },
    {
        "id": "595d6b6ee38f20b2",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Delete sensors data from more than a hour",
        "func": "const timestamp = new Date(msg.timestamp);\n\nmsg.payload = `DELETE\n               FROM SENSORS_DATA_REAL_TIME\n               WHERE INSERTION_TIME < TO_TIMESTAMP(${Math.round(timestamp.getTime()/1000)}) - INTERVAL '1 hour'`;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 115,
        "wires": [
            [
                "65af7ad57593057d"
            ]
        ]
    },
    {
        "id": "b5f99fa633c93197",
        "type": "link out",
        "z": "7bfe80d199363eac",
        "name": "OUT (1) Merge dataset of last 1 hour",
        "links": [
            "332a597c5d4b37eb"
        ],
        "x": 895,
        "y": 115,
        "wires": []
    },
    {
        "id": "332a597c5d4b37eb",
        "type": "link in",
        "z": "7bfe80d199363eac",
        "name": "IN (1) Merge dataset of last 1 hour",
        "links": [
            "b5f99fa633c93197"
        ],
        "x": 55,
        "y": 196,
        "wires": [
            [
                "9563eb3f5af48c81"
            ]
        ]
    },
    {
        "id": "5591169f8bdc17c3",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7bfe80d199363eac",
        "name": "",
        "x": 360,
        "y": 196,
        "wires": [
            [
                "beecc4814c6aae9f"
            ]
        ]
    },
    {
        "id": "beecc4814c6aae9f",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Get devices id",
        "func": "const devices = msg.payload;\n\nconst devicesId = devices.map(device => device.id);\n\nmsg.payload = devicesId;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 196,
        "wires": [
            [
                "ed99fca3c09600af"
            ]
        ]
    },
    {
        "id": "ed99fca3c09600af",
        "type": "split",
        "z": "7bfe80d199363eac",
        "name": "Split devices",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 690,
        "y": 196,
        "wires": [
            [
                "693d574d15cb8f85"
            ]
        ]
    },
    {
        "id": "eac004593bcd4e52",
        "type": "catch",
        "z": "7bfe80d199363eac",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 616,
        "wires": [
            [
                "2917f36263955a9a"
            ]
        ]
    },
    {
        "id": "9371aee991e4b665",
        "type": "comment",
        "z": "7bfe80d199363eac",
        "name": "########## Exceptions Treatment",
        "info": "",
        "x": 179,
        "y": 555,
        "wires": []
    },
    {
        "id": "2917f36263955a9a",
        "type": "debug",
        "z": "7bfe80d199363eac",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 616,
        "wires": []
    },
    {
        "id": "693d574d15cb8f85",
        "type": "link out",
        "z": "7bfe80d199363eac",
        "name": "OUT (2) Merge dataset of last 1 hour",
        "links": [
            "8d1428957fa20719"
        ],
        "x": 795,
        "y": 196,
        "wires": []
    },
    {
        "id": "8d1428957fa20719",
        "type": "link in",
        "z": "7bfe80d199363eac",
        "name": "IN (2) Merge dataset of last 1 hour",
        "links": [
            "693d574d15cb8f85"
        ],
        "x": 55,
        "y": 295,
        "wires": [
            [
                "0f771eab714c377a"
            ]
        ]
    },
    {
        "id": "0f771eab714c377a",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Get sensors data from last 1 hour",
        "func": "const deviceId = msg.payload;\nconst timestamp = new Date(msg.timestamp);\n\nconst final = timestamp.getTime();\nconst begin = timestamp.getTime() - 1000 * 60 * 60;\n\nmsg.payload = `SELECT VOLTAGE, CURRENT, LIGHTNESS, RELE_STATE, INSERTION_TIME\n               FROM SENSORS_DATA_REAL_TIME\n               WHERE DEVICE_ID = ${deviceId}\n               AND INSERTION_TIME >= TO_TIMESTAMP(${Math.round(begin/1000)})\n               AND INSERTION_TIME < TO_TIMESTAMP(${Math.round(final/1000)})\n               ORDER BY INSERTION_TIME ASC`;\n               \nmsg.deviceId = deviceId;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 295,
        "wires": [
            [
                "03af6adb8219152a"
            ]
        ]
    },
    {
        "id": "03af6adb8219152a",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7bfe80d199363eac",
        "name": "",
        "x": 460,
        "y": 295,
        "wires": [
            [
                "a176ecc87e0d6a8e"
            ]
        ]
    },
    {
        "id": "6c62112a5cd8d179",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Calculate powers",
        "func": "let dataset = msg.payload;\n\ndataset = dataset.map(data => {\n    data.power = Math.round(data.voltage * data.current);\n    return data;\n});\n\nmsg.payload = dataset;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 276,
        "wires": [
            [
                "78cd9ac0cd2c0ec3"
            ]
        ]
    },
    {
        "id": "78cd9ac0cd2c0ec3",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Calculate max, min and avg",
        "func": "const dataset = msg.payload;\n\n// Functions\nconst min = dataset => Math.min(...dataset);\nconst max = dataset => Math.max(...dataset);\nconst avg = dataset => (dataset.reduce((acc, cur) => acc + cur, 0) / dataset.length);\n\n// Get data from a specific measure\nconst voltages  = dataset.map(data => data.voltage);\nconst currents  = dataset.map(data => data.current); \nconst lightness = dataset.map(data => data.lightness);\nconst powers    = dataset.map(data => data.power);\n\nconst results = {\n    voltage:   { min: min(voltages),  max: max(voltages),  avg: Math.round(avg(voltages))            },\n    current:   { min: min(currents),  max: max(currents),  avg: parseFloat(avg(currents).toFixed(2)) },\n    lightness: { min: min(lightness), max: max(lightness), avg: Math.round(avg(lightness))           },\n    power:     { min: min(powers),    max: max(powers),    avg: Math.round(avg(powers))              }\n}\n\nmsg.dataset = dataset;\nmsg.results = results;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 276,
        "wires": [
            [
                "a6f8cbe1cf99fbb7"
            ]
        ]
    },
    {
        "id": "bc47812a82cb85c3",
        "type": "switch",
        "z": "7bfe80d199363eac",
        "name": "Found data?",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 750,
        "y": 295,
        "wires": [
            [
                "6c62112a5cd8d179"
            ],
            [
                "8d3e52ed971b346e"
            ]
        ]
    },
    {
        "id": "a6f8cbe1cf99fbb7",
        "type": "link out",
        "z": "7bfe80d199363eac",
        "name": "OUT (3) Merge dataset of last 1 hour",
        "links": [
            "3648289a20e9cc5d"
        ],
        "x": 1335,
        "y": 276,
        "wires": []
    },
    {
        "id": "3648289a20e9cc5d",
        "type": "link in",
        "z": "7bfe80d199363eac",
        "name": "IN (3) Merge dataset of last 1 hour",
        "links": [
            "a6f8cbe1cf99fbb7"
        ],
        "x": 55,
        "y": 396,
        "wires": [
            [
                "2233a99dd3d33b7e"
            ]
        ]
    },
    {
        "id": "acbdd010515a12d1",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Insert results in database",
        "func": "const deviceId  = msg.deviceId;\nconst results   = msg.results;\nconst dataset   = msg.dataset;\nconst timestamp = new Date(msg.timestamp);\n\nconst insertion_time = Math.round(timestamp.getTime()/1000);\n\nconst voltage   = results.voltage;\nconst current   = results.current;\nconst lightness = results.lightness;\nconst power     = results.power;\n\nmsg.payload = `INSERT\n               INTO SENSORS_DATA_INTERVAL\n               (DEVICE_ID, VOLTAGE_MIN, VOLTAGE_MAX, VOLTAGE_AVG, CURRENT_MIN, CURRENT_MAX, CURRENT_AVG, LIGHTNESS_MIN, LIGHTNESS_MAX, LIGHTNESS_AVG, POWER_MIN, POWER_MAX, POWER_AVG, POWER_EXPEND, INSERTION_TIME, NUM_REGISTRIES)\n               VALUES\n               (${deviceId}, ${voltage.min}, ${voltage.max}, ${voltage.avg}, ${current.min}, ${current.max}, ${current.avg}, ${lightness.min}, ${lightness.max}, ${lightness.avg}, ${power.min}, ${power.max}, ${power.avg}, ${results.power_expend}, TO_TIMESTAMP(${insertion_time}), ${dataset.length})`;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 396,
        "wires": [
            [
                "a7f85d37f23ca51c",
                "0e031983ba29c66c"
            ]
        ]
    },
    {
        "id": "a7f85d37f23ca51c",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7bfe80d199363eac",
        "name": "",
        "x": 641,
        "y": 396,
        "wires": [
            []
        ]
    },
    {
        "id": "0e031983ba29c66c",
        "type": "debug",
        "z": "7bfe80d199363eac",
        "name": "[EXIT 2] Merge dataset of last 1 hour",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 396,
        "wires": []
    },
    {
        "id": "2233a99dd3d33b7e",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Calculate power expend",
        "func": "const dataset = msg.dataset;\n\nlet sum = 0;\n\nlet i, j;\n\nfor (i = 0; i < dataset.length; i++) {\n    if (dataset[i].rele_state === true) {\n        for (j = i+1; j < dataset.length && dataset[j].rele_state === true; j++);\n\n        const interval = dataset.slice(i, j);\n        \n        const begin = new Date(interval[0].insertion_time);\n        const final = new Date(interval[interval.length-1].insertion_time);\n        \n        const time_diff = (final-begin)/(1000*60*60); // milliseconds * seconds * minutes\n        \n        const voltage_avg = interval.reduce((acc, cur) => acc + cur.voltage, 0) / interval.length;\n        const current_avg = interval.reduce((acc, cur) => acc + cur.current, 0) / interval.length;\n        \n        sum += (((voltage_avg * current_avg) / 1000) * time_diff);\n        \n        i = j-1;\n    }\n}\n\nmsg.results.power_expend = parseFloat(sum.toFixed(2)); // in kW/h\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 396,
        "wires": [
            [
                "acbdd010515a12d1"
            ]
        ]
    },
    {
        "id": "1c9633d021328e7c",
        "type": "http in",
        "z": "7f5557aca01f4737",
        "name": "",
        "url": "/devices/measures/interval",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 171,
        "y": 316,
        "wires": [
            [
                "96bdf6630c129c17"
            ]
        ]
    },
    {
        "id": "ddca169b2eed6b38",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set query",
        "func": "// Get data from last 24 hours or week\n\nconst deviceId  = msg.deviceId;\nconst interval  = msg.interval;\nconst threshold = msg.threshold;\n\nconst final = threshold.getTime();\nconst begin = final - 1000 * 60 * interval;\n\nmsg.payload = `SELECT VOLTAGE_MIN, VOLTAGE_MAX, VOLTAGE_AVG, CURRENT_MIN, CURRENT_MAX, CURRENT_AVG, LIGHTNESS_MIN, LIGHTNESS_MAX, LIGHTNESS_AVG, POWER_MIN, POWER_MAX, POWER_AVG, POWER_EXPEND, NUM_REGISTRIES, INSERTION_TIME\n               FROM SENSORS_DATA_INTERVAL\n               WHERE DEVICE_ID = ${deviceId}\n               AND INSERTION_TIME > TO_TIMESTAMP(${Math.round(begin/1000)}) \n               AND INSERTION_TIME <= TO_TIMESTAMP(${Math.round(final/1000)})\n               ORDER BY INSERTION_TIME`;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 456,
        "wires": [
            [
                "6ec488a047717083"
            ]
        ]
    },
    {
        "id": "47e86d41591c2ef2",
        "type": "http response",
        "z": "7f5557aca01f4737",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 540,
        "y": 695,
        "wires": []
    },
    {
        "id": "6ec488a047717083",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "7f5557aca01f4737",
        "name": "",
        "x": 540,
        "y": 475,
        "wires": [
            [
                "7cdff54cf4f12948"
            ]
        ]
    },
    {
        "id": "dc71772a94af1a6d",
        "type": "debug",
        "z": "7f5557aca01f4737",
        "name": "[EXIT] Get measures of device in specific interval",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 695,
        "wires": []
    },
    {
        "id": "1a6d28956a0d6589",
        "type": "switch",
        "z": "7f5557aca01f4737",
        "name": "What's the interval?",
        "property": "interval",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "60",
                "vt": "num"
            },
            {
                "t": "lt",
                "v": "44640",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 190,
        "y": 456,
        "wires": [
            [
                "57ce85e61299af4e"
            ],
            [
                "ddca169b2eed6b38"
            ],
            [
                "9e05e185a3257074"
            ]
        ]
    },
    {
        "id": "57ce85e61299af4e",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set query",
        "func": "// Get data from last hour\n\nconst interval = msg.interval;\nconst deviceId = msg.deviceId;\n\nconst final = msg.threshold.getTime();\nconst begin = final - 1000 * 60 * interval;\n\nmsg.payload = {\n    db: 0,\n    command: 'ZRANGE',\n    querys: [{ key: deviceId, params: [begin, `(${final}`, 'BYSCORE'] }]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 418,
        "wires": [
            [
                "ca334a44ec34ea7f"
            ]
        ]
    },
    {
        "id": "1bb825e2928759bb",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Calculate powers",
        "func": "let dataset = msg.payload;\n\ndataset = dataset.map(data => {\n    data.power = Math.round(data.voltage * data.current);\n    return data;\n});\n\nmsg.payload = dataset;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 575,
        "wires": [
            [
                "97320d78a0801902"
            ]
        ]
    },
    {
        "id": "f37dd2752270a5c8",
        "type": "switch",
        "z": "7f5557aca01f4737",
        "name": "What's the interval?",
        "property": "interval",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "60",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 597,
        "wires": [
            [
                "1bb825e2928759bb"
            ],
            [
                "6cf164c9f164c150"
            ]
        ]
    },
    {
        "id": "2d413cccf4985d24",
        "type": "link in",
        "z": "7f5557aca01f4737",
        "name": "IN (2) Get measures of device in specific interval",
        "links": [
            "7cdff54cf4f12948",
            "dacc1dbd08c5db6d"
        ],
        "x": 55,
        "y": 597,
        "wires": [
            [
                "f37dd2752270a5c8"
            ]
        ]
    },
    {
        "id": "7cdff54cf4f12948",
        "type": "link out",
        "z": "7f5557aca01f4737",
        "name": "OUT (4) Get measures of device in specific interval",
        "links": [
            "2d413cccf4985d24"
        ],
        "x": 635,
        "y": 475,
        "wires": []
    },
    {
        "id": "d998e00625e40a86",
        "type": "link out",
        "z": "7f5557aca01f4737",
        "name": "OUT (6) Get measures of device in specific interval",
        "links": [
            "6383f89379246b18"
        ],
        "x": 715,
        "y": 618,
        "wires": []
    },
    {
        "id": "6b6db413a491a12d",
        "type": "link out",
        "z": "7f5557aca01f4737",
        "name": "OUT (5) Get measures of device in specific interval",
        "links": [
            "6383f89379246b18"
        ],
        "x": 695,
        "y": 575,
        "wires": []
    },
    {
        "id": "6383f89379246b18",
        "type": "link in",
        "z": "7f5557aca01f4737",
        "name": "IN (3) Get measures of device in specific interval",
        "links": [
            "6b6db413a491a12d",
            "d998e00625e40a86"
        ],
        "x": 55,
        "y": 695,
        "wires": [
            [
                "5f90a25a42bb5326"
            ]
        ]
    },
    {
        "id": "97320d78a0801902",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Group data",
        "func": "const dataset   = msg.payload;\nconst threshold = msg.threshold;\nconst nGroups   = msg.interval;\nconst hop       = 1000 * 60;\n\n// Create groups\n\nlet i;\nlet groups = [];\n\nfor (i = nGroups; i > 0; i--) {\n    const timestamp = new Date(threshold - hop * i);\n    const measures  = [];\n    \n    groups.push({ timestamp, measures, records: 0 });\n}\n\n// Group data\n\ni = 1;\n\ndataset.forEach(data => {\n    const timestamp = new Date(data.insertion_time);\n    \n    for (i; i < groups.length && timestamp >= groups[i].timestamp; i++);\n\n    groups[i-1].measures.push(data);\n    groups[i-1].records++;\n});\n\n// Sum measures\n\nconst avg = dataset => (dataset.reduce((acc, cur) => acc + cur, 0) / dataset.length) || 0;\n\ngroups = groups.map(group => {\n    const voltage   = group.measures.map(data => data.voltage);\n    const current   = group.measures.map(data => data.current);\n    const lightness = group.measures.map(data => data.lightness);\n    const powers    = group.measures.map(data => data.power);\n    \n    const voltageAvg   = Math.round(avg(voltage));\n    const currentAvg   = parseFloat((avg(current)).toFixed(2));\n    const lightnessAvg = Math.round(avg(lightness));\n    const powersAvg    = Math.round(avg(powers));\n    \n    group.measures = {\n        voltage:   voltageAvg,\n        current:   currentAvg,\n        lightness: lightnessAvg,\n        power:     powersAvg\n    }\n    \n    return group;\n});\n\nmsg.dataset = groups;\nmsg.hop = hop;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 575,
        "wires": [
            [
                "6b6db413a491a12d"
            ]
        ]
    },
    {
        "id": "7287a934bad43292",
        "type": "http in",
        "z": "7f5557aca01f4737",
        "name": "",
        "url": "/devices/measures/last",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 137,
        "wires": [
            [
                "3696f7783c3c5708"
            ]
        ]
    },
    {
        "id": "269b6f17aa90ca43",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Calculate power",
        "func": "let dataset = msg.payload.map(data => data.result);\n\nconst currentTime = new Date();\n\nif (dataset.length > 0 && dataset[0].insertion_time > currentTime.getTime() - 1000 * 60) {\n    dataset = dataset.map(data => {\n        // Calculate power\n        data.power = Math.round(data.voltage * data.current);\n        \n        // Convert rele_state\n        data.rele_state = data.rele_state ? 1 : 0;\n        \n        return data;\n    });\n    \n    msg.payload = dataset;\n    \n    return msg;\n}\n\nmsg.payload = [];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 115,
        "wires": [
            [
                "9853d4fc5f5b1ebf",
                "270828bcb3beacf1"
            ]
        ]
    },
    {
        "id": "270828bcb3beacf1",
        "type": "http response",
        "z": "7f5557aca01f4737",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 960,
        "y": 115,
        "wires": []
    },
    {
        "id": "9853d4fc5f5b1ebf",
        "type": "debug",
        "z": "7f5557aca01f4737",
        "name": "[EXIT] Get last measures of device",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 116,
        "wires": []
    },
    {
        "id": "96bdf6630c129c17",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Parse request body",
        "func": "msg.deviceId = msg.payload.device_id;\nmsg.interval = parseInt(msg.payload.interval); // in minutes\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 316,
        "wires": [
            [
                "ddeb66f0f282da2c"
            ]
        ]
    },
    {
        "id": "ddeb66f0f282da2c",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Define thresholds",
        "func": "const interval = msg.interval;\n\nconst threshold = new Date();\nthreshold.setSeconds(0);\nthreshold.setMilliseconds(0);\n\nif (interval > 60) {\n    threshold.setMinutes(0);\n    \n    if (interval > 1440) {\n        const hour = threshold.getHours();\n        threshold.setHours(Math.floor(hour/6) * 6);\n    }\n}\n\nmsg.threshold = threshold;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 316,
        "wires": [
            [
                "91c83481ac4f1610"
            ]
        ]
    },
    {
        "id": "8d3e52ed971b346e",
        "type": "debug",
        "z": "7bfe80d199363eac",
        "name": "[EXIT 1] Merge dataset of last 1 hour",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 316,
        "wires": []
    },
    {
        "id": "0b5d0e0c0b5c98b1",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Group data",
        "func": "const dataset   = msg.payload;\nconst threshold = msg.threshold;\nconst nGroups   = msg.nGroups;\nconst hop       = msg.hop;\nconst interval  = msg.interval;\n\n// Create groups\n\nlet i;\nlet groups = [];\n\nfor (i = nGroups; i > 0; i--) {\n    const timestamp = new Date(threshold - hop * i);\n    const measures  = [];\n    \n    groups.push({ timestamp, measures, records: 0 });\n}\n\n// Group data\n\ni = 1;\n\ndataset.forEach(data => {\n    const timestamp = new Date(data.insertion_time);\n    \n    for (i; i < groups.length && timestamp > groups[i].timestamp; i++);\n\n    groups[i-1].measures.push(data);\n    groups[i-1].records += data.num_registries;\n});\n\n// Sum values\n\nconst min = dataset => Math.min(...dataset) !==  Infinity ? Math.min(...dataset) : 0;\nconst max = dataset => Math.max(...dataset) !== -Infinity ? Math.max(...dataset) : 0;\nconst avg = dataset => (dataset.reduce((acc, cur) => acc + cur, 0) / dataset.length) || 0;\n\ngroups = groups.map(group => {\n    voltageMin   = min(group.measures.map(data => data.voltage_min));\n    voltageMax   = max(group.measures.map(data => data.voltage_max));\n    voltageAvg   = Math.round(avg(group.measures.map(data => data.voltage_avg)));\n    currentMin   = min(group.measures.map(data => data.current_min)).toFixed(2);\n    currentMax   = max(group.measures.map(data => data.current_max)).toFixed(2);\n    currentAvg   = parseFloat((avg(group.measures.map(data => data.current_avg))).toFixed(2));\n    lightnessMin = min(group.measures.map(data => data.lightness_min));\n    lightnessMax = max(group.measures.map(data => data.lightness_max));\n    lightnessAvg = Math.round(avg(group.measures.map(data => data.lightness_avg)));\n    powerMin     = min(group.measures.map(data => data.power_min));\n    powerMax     = max(group.measures.map(data => data.power_max));\n    powerAvg     = Math.round(avg(group.measures.map(data => data.power_avg)));\n    powerExpend  = group.measures.reduce((acc, cur) => acc + cur.power_expend, 0);\n    \n    group.measures = {\n        voltageMin,\n        voltageMax,\n        voltageAvg,\n        currentMin,\n        currentMax,\n        currentAvg,\n        lightnessMin,\n        lightnessMax,\n        lightnessAvg,\n        powerMin,\n        powerMax,\n        powerAvg,\n        powerExpend\n    }\n    \n    return group;\n});\n\nmsg.dataset = groups;\nmsg.hop = hop;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 618,
        "wires": [
            [
                "d998e00625e40a86"
            ]
        ]
    },
    {
        "id": "5f90a25a42bb5326",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Create labels",
        "func": "function format_date(timestamp, interval) {\n    const hour = `0${timestamp.getHours()}`.slice(-2);\n    const min  = `0${timestamp.getMinutes()}`.slice(-2);\n    \n    if (interval === 60) {\n        return `${hour}:${min}`;\n    } else {\n        const day  = `0${timestamp.getDate()}`.slice(-2);\n        const mon  = `0${timestamp.getMonth()+1}`.slice(-2);\n        \n        return `${hour}:${min} ${day}/${mon}`;\n    }\n}\n\nconst interval = msg.interval;\nconst hop = msg.hop;\n\nlet dataset = msg.dataset;\n\ndataset = dataset.map((data, i) => {\n    const timestamp = data.timestamp;\n    \n    const begin = format_date(timestamp, interval);\n    \n    if (interval === 60) {\n        data.label = `${begin} (Número de Registros: ${data.records})`;\n    } else {\n        timestamp.setTime(timestamp.getTime() + hop);\n        const final = format_date(timestamp, interval);\n        \n        data.label = `${begin} à ${final} (Número de Registros: ${data.records})`;\n    }\n    \n    delete data.timestamp;\n    \n    return data;\n});\n\nmsg.dataset = dataset;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 695,
        "wires": [
            [
                "3d4b27a94f96d759"
            ]
        ]
    },
    {
        "id": "3d4b27a94f96d759",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Prepare response",
        "func": "const dataset  = msg.dataset;\nconst interval = msg.interval;\n\nconst labels = dataset.map(data => data.label);\n\nlet values;\n\nif (interval === 60) {\n    values = {\n        voltage:   dataset.map(data => data.measures.voltage),\n        current:   dataset.map(data => data.measures.current),\n        lightness: dataset.map(data => data.measures.lightness),\n        power:     dataset.map(data => data.measures.power)\n    }\n} else {\n    values = {\n        voltage: {\n            min: dataset.map(data => data.measures.voltageMin),\n            max: dataset.map(data => data.measures.voltageMax),\n            avg: dataset.map(data => data.measures.voltageAvg)\n        },\n        current: {\n            min: dataset.map(data => data.measures.currentMin),\n            max: dataset.map(data => data.measures.currentMax),\n            avg: dataset.map(data => data.measures.currentAvg)       \n        },\n        lightness: {\n            min: dataset.map(data => data.measures.lightnessMin),\n            max: dataset.map(data => data.measures.lightnessMax),\n            avg: dataset.map(data => data.measures.lightnessAvg)      \n        },\n        power: {\n            min: dataset.map(data => data.measures.powerMin),\n            max: dataset.map(data => data.measures.powerMax),\n            avg: dataset.map(data => data.measures.powerAvg)          \n        },\n        power_expend: dataset.map((data, i) => {\n            const value   = data.measures.powerExpend;\n            const sumPrev = dataset.slice(0, i).reduce((acc, cur) => acc + cur.measures.powerExpend, 0);\n    \n            return (value + sumPrev).toFixed(2);\n        })\n    }\n}\n\nmsg.payload = { labels, values };\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 695,
        "wires": [
            [
                "dc71772a94af1a6d",
                "47e86d41591c2ef2"
            ]
        ]
    },
    {
        "id": "9e05e185a3257074",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set query",
        "func": "// Get data from current month\n\nconst deviceId  = msg.deviceId;\nconst threshold = msg.threshold;\n\nconst final = threshold.getTime();\n\nlet begin = new Date(threshold);\nbegin.setDate(1);\nbegin.setHours(0);\nbegin = begin.getTime();\n\nmsg.payload = `SELECT VOLTAGE_MIN, VOLTAGE_MAX, VOLTAGE_AVG, CURRENT_MIN, CURRENT_MAX, CURRENT_AVG, LIGHTNESS_MIN, LIGHTNESS_MAX, LIGHTNESS_AVG, POWER_MIN, POWER_MAX, POWER_AVG, POWER_EXPEND, NUM_REGISTRIES, INSERTION_TIME\n               FROM SENSORS_DATA_INTERVAL\n               WHERE DEVICE_ID = ${deviceId}\n               AND INSERTION_TIME > TO_TIMESTAMP(${Math.round(begin/1000)}) \n               AND INSERTION_TIME <= TO_TIMESTAMP(${Math.round(final/1000)})\n               ORDER BY INSERTION_TIME`;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 379.75,
        "y": 494.25,
        "wires": [
            [
                "6ec488a047717083"
            ]
        ]
    },
    {
        "id": "6cf164c9f164c150",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set n_groups and hop",
        "func": "const interval = msg.interval;\n\nlet nGroups;\nlet hop;\n\nswitch (interval) {\n    case 1440:\n        nGroups = 24;\n        hop = 1000 * 60 * 60 * 1; // 1 hour (millseconds * seconds * minutes * hours)\n        \n        break;\n    case 10080:\n        nGroups = 28;\n        hop = 1000 * 60 * 60 * 6; // 6 hours\n        \n        break;\n    case 44640:\n        const timestamp = new Date(msg.threshold); \n        nGroups = ((timestamp.getDate()-1) * 4) + Math.ceil(timestamp.getHours()/6);\n        hop = 1000 * 60 * 60 * 6; // 6 hours\n        \n        break;\n}\n\nmsg.nGroups = nGroups;\nmsg.hop = hop;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 618,
        "wires": [
            [
                "0b5d0e0c0b5c98b1"
            ]
        ]
    },
    {
        "id": "12e3a1e4cfa30cb1",
        "type": "http in",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "url": "/devices/info/byDevice",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 116,
        "wires": [
            [
                "2116903aa8e9d3cb"
            ]
        ]
    },
    {
        "id": "359f6bc0088d38e8",
        "type": "comment",
        "z": "4a674aaa9e667dd6",
        "name": "########## Get informations of a device",
        "info": "",
        "x": 200,
        "y": 55,
        "wires": []
    },
    {
        "id": "b6c255d661228eb9",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "env": [],
        "x": 920,
        "y": 115,
        "wires": [
            [
                "2a5cf022f2e39e0b"
            ]
        ]
    },
    {
        "id": "09d4870160f6b21e",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Set query",
        "func": "const endpoint = msg.endpoint;\nconst params = msg.params;\n\nmsg.payload = `SELECT D.ID, D.NAME, D.COORDINATES, D.STREET, Z.ZONE, DI.DISTRICT, D.INTERVAL, D.STATUS\n               FROM DEVICES AS D\n               JOIN DISTRICTS AS DI ON D.DISTRICT_ID = DI.ID\n               JOIN ZONES AS Z ON DI.ZONE_ID = Z.ID`;\n               \nif (endpoint === 'byDevice') {\n    if (params.deviceName !== '') {\n        msg.payload += ` WHERE D.NAME = '${params.deviceName}'`;\n    } else {\n        msg.payload += ` WHERE D.ID = '${params.deviceId}'`;\n    }\n} else if (endpoint === 'byLocation') {\n    msg.payload += ` WHERE Z.ZONE = '${params.zone}' AND DI.DISTRICT = '${params.district}'`;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 115,
        "wires": [
            [
                "b6c255d661228eb9"
            ]
        ]
    },
    {
        "id": "5e01cf1a6a9c08e8",
        "type": "http response",
        "z": "4a674aaa9e667dd6",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 600,
        "y": 278,
        "wires": []
    },
    {
        "id": "b6232749331caf9b",
        "type": "http in",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "url": "/devices/info/locations",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1096,
        "wires": [
            [
                "c25aa9a97958c4e6"
            ]
        ]
    },
    {
        "id": "b5500c0de884707c",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "env": [],
        "x": 740,
        "y": 1096,
        "wires": [
            [
                "86ba935683dc8e83"
            ]
        ]
    },
    {
        "id": "06c4b1f1c64bcda3",
        "type": "http response",
        "z": "4a674aaa9e667dd6",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 1060,
        "y": 1096,
        "wires": []
    },
    {
        "id": "3f76da596363637a",
        "type": "debug",
        "z": "4a674aaa9e667dd6",
        "name": "[EXIT] Get geographic info",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 1096,
        "wires": []
    },
    {
        "id": "bb96314b45690cfe",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Search for zones",
        "func": "msg.type = msg.payload.type;\n\nmsg.payload = `SELECT ZONE FROM ZONES ORDER BY ZONE`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1075,
        "wires": [
            [
                "b5500c0de884707c"
            ]
        ]
    },
    {
        "id": "86ba935683dc8e83",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Parse result",
        "func": "const rows = msg.payload;\nconst type = msg.type;\n\nmsg.payload = rows.map(row => row[type]);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1096,
        "wires": [
            [
                "3f76da596363637a",
                "06c4b1f1c64bcda3"
            ]
        ]
    },
    {
        "id": "c25aa9a97958c4e6",
        "type": "switch",
        "z": "4a674aaa9e667dd6",
        "name": "Search type",
        "property": "payload.type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "zone",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "district",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 1096,
        "wires": [
            [
                "bb96314b45690cfe"
            ],
            [
                "55e3cd0f4e73b20b"
            ]
        ]
    },
    {
        "id": "55e3cd0f4e73b20b",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Search for districts",
        "func": "const type = msg.payload.type;\nconst zone = msg.payload.zone;\n\nmsg.payload = `SELECT D.DISTRICT\n               FROM DISTRICTS AS D\n               JOIN ZONES AS Z ON D.ZONE_ID = Z.ID\n               WHERE Z.ZONE = '${zone}'\n               ORDER BY D.DISTRICT`;\n\nmsg.type = type;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 1118,
        "wires": [
            [
                "b5500c0de884707c"
            ]
        ]
    },
    {
        "id": "60e6d0d8edb94b2f",
        "type": "http in",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "url": "/devices/info",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 452,
        "wires": [
            [
                "0ff29a6d6ef0912d"
            ]
        ]
    },
    {
        "id": "0ff29a6d6ef0912d",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Search for device",
        "func": "const deviceInfo = msg.payload.params;\n\nmsg.payload = `SELECT COUNT(*) \n               FROM DEVICES \n               WHERE NAME = '${deviceInfo.name}'`;\n               \nmsg.deviceInfo = deviceInfo;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 452,
        "wires": [
            [
                "3e0f2d19e87fc036"
            ]
        ]
    },
    {
        "id": "3e0f2d19e87fc036",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "env": [],
        "x": 500,
        "y": 452,
        "wires": [
            [
                "cd9beedcf7c41e7a"
            ]
        ]
    },
    {
        "id": "fbc2757470ae0533",
        "type": "debug",
        "z": "4a674aaa9e667dd6",
        "name": "[EXIT 1] Insert a new device",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 473,
        "wires": []
    },
    {
        "id": "cd9beedcf7c41e7a",
        "type": "switch",
        "z": "4a674aaa9e667dd6",
        "name": "Found device?",
        "property": "payload[0].count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 660,
        "y": 452,
        "wires": [
            [
                "354d74e276ba97cd"
            ],
            [
                "283bdf50951c97cd"
            ]
        ]
    },
    {
        "id": "283bdf50951c97cd",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Prepare response",
        "func": "msg.payload = 'Já existe um dispositivo cadastrado com o mesmo nome.';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 473,
        "wires": [
            [
                "45059aa775477247",
                "fbc2757470ae0533"
            ]
        ]
    },
    {
        "id": "45059aa775477247",
        "type": "http response",
        "z": "4a674aaa9e667dd6",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 1060,
        "y": 473,
        "wires": []
    },
    {
        "id": "1dd4dac7de48fd07",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Insert device",
        "func": "const device = msg.deviceInfo;\n\nconst name        = device.name;\nconst coordinates = device.coordinates;\nconst street      = device.street;\nconst district    = device.district;\nconst interval    = device.interval;\nconst status      = device.status === 'OPERACIONAL' ? true : false;\n\nmsg.payload = `INSERT\n               INTO DEVICES (NAME, COORDINATES, STREET, DISTRICT_ID, INTERVAL, STATUS)\n               VALUES ('${name}', '${coordinates}', '${street}', (SELECT ID FROM DISTRICTS WHERE DISTRICT = '${district}'), ${interval}, ${status})\n               RETURNING ID`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 556,
        "wires": [
            [
                "583ec79d0b612605"
            ]
        ]
    },
    {
        "id": "ea840e0e78c36329",
        "type": "debug",
        "z": "4a674aaa9e667dd6",
        "name": "[EXIT 2] Insert a new device",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 900,
        "y": 556,
        "wires": []
    },
    {
        "id": "583ec79d0b612605",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "env": [],
        "x": 320,
        "y": 556,
        "wires": [
            [
                "7ace7937a50e561f"
            ]
        ]
    },
    {
        "id": "7ace7937a50e561f",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Prepare response",
        "func": "const device_id = msg.payload[0].id;\n\nmsg.payload = `Dispositivo inserido com sucesso com o ID ${device_id}.`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 556,
        "wires": [
            [
                "ea840e0e78c36329",
                "4ea1758dc69fc48a"
            ]
        ]
    },
    {
        "id": "4ea1758dc69fc48a",
        "type": "http response",
        "z": "4a674aaa9e667dd6",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 680,
        "y": 556,
        "wires": []
    },
    {
        "id": "354d74e276ba97cd",
        "type": "link out",
        "z": "4a674aaa9e667dd6",
        "name": "OUT (1) Insert a new device",
        "links": [
            "42357eb93017ae22"
        ],
        "x": 795,
        "y": 436,
        "wires": []
    },
    {
        "id": "42357eb93017ae22",
        "type": "link in",
        "z": "4a674aaa9e667dd6",
        "name": "IN (1) Insert a new device",
        "links": [
            "354d74e276ba97cd"
        ],
        "x": 55,
        "y": 556,
        "wires": [
            [
                "1dd4dac7de48fd07"
            ]
        ]
    },
    {
        "id": "2baad984afc85eae",
        "type": "mqtt out",
        "z": "e27b09cd4ecd866a",
        "name": "Sensors Input Local",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "df4bdf4be0d4150f",
        "x": 820,
        "y": 216,
        "wires": []
    },
    {
        "id": "a27f823e0f59d886",
        "type": "http in",
        "z": "e27b09cd4ecd866a",
        "name": "",
        "url": "/devices/actions/on-off",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 151,
        "wires": [
            [
                "2a89e07262bccc41"
            ]
        ]
    },
    {
        "id": "2a89e07262bccc41",
        "type": "function",
        "z": "e27b09cd4ecd866a",
        "name": "Parse request body",
        "func": "const deviceId = msg.payload.device_id;\nconst action = msg.payload.action;\n\nmsg.topic = `pgc_ufabc/devices/actions/change_state/${deviceId}`;\nmsg.payload = action;\n\nmsg.deviceId = deviceId;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 151,
        "wires": [
            [
                "100673d3690931d5",
                "9daeb4c690348a8b"
            ]
        ]
    },
    {
        "id": "c27ef97c2e856f6f",
        "type": "http response",
        "z": "e27b09cd4ecd866a",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 780,
        "y": 116,
        "wires": []
    },
    {
        "id": "100673d3690931d5",
        "type": "function",
        "z": "e27b09cd4ecd866a",
        "name": "Prepare response",
        "func": "msg.payload = 'OK';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 116,
        "wires": [
            [
                "76d3eecb7c2eb2bc",
                "c27ef97c2e856f6f"
            ]
        ]
    },
    {
        "id": "158d45c1123bc5e5",
        "type": "comment",
        "z": "e27b09cd4ecd866a",
        "name": "########## Turn on/off lights remotely",
        "info": "",
        "x": 190,
        "y": 56,
        "wires": []
    },
    {
        "id": "76d3eecb7c2eb2bc",
        "type": "debug",
        "z": "e27b09cd4ecd866a",
        "name": "[EXIT] Turn on/off lights remotely",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1020,
        "y": 116,
        "wires": []
    },
    {
        "id": "ef6371934f5fd5b0",
        "type": "catch",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 1576,
        "wires": [
            [
                "d1e16d213602f942"
            ]
        ]
    },
    {
        "id": "9d48e59a4de836b7",
        "type": "comment",
        "z": "4a674aaa9e667dd6",
        "name": "########## Exceptions Treatment",
        "info": "",
        "x": 180,
        "y": 1475,
        "wires": []
    },
    {
        "id": "ae3acdea4e84f4b4",
        "type": "debug",
        "z": "4a674aaa9e667dd6",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 1556,
        "wires": []
    },
    {
        "id": "8213a585916b7e9c",
        "type": "catch",
        "z": "e27b09cd4ecd866a",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 696,
        "wires": [
            [
                "54d530db04013318"
            ]
        ]
    },
    {
        "id": "00bcdd2e25f2fd75",
        "type": "comment",
        "z": "e27b09cd4ecd866a",
        "name": "########## Exceptions Treatment",
        "info": "",
        "x": 180,
        "y": 636,
        "wires": []
    },
    {
        "id": "783d881f4f37ed3b",
        "type": "debug",
        "z": "e27b09cd4ecd866a",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 696,
        "wires": []
    },
    {
        "id": "c6a52803fbced1d1",
        "type": "comment",
        "z": "7f5557aca01f4737",
        "name": "########## Get last measures of device",
        "info": "",
        "x": 200,
        "y": 56,
        "wires": []
    },
    {
        "id": "44f5978e0ca7c32c",
        "type": "comment",
        "z": "7f5557aca01f4737",
        "name": "########## Get measures of device in specific interval",
        "info": "",
        "x": 240,
        "y": 256,
        "wires": []
    },
    {
        "id": "11d5b3d462d5d92e",
        "type": "comment",
        "z": "4a674aaa9e667dd6",
        "name": "########## Insert a new device",
        "info": "",
        "x": 170,
        "y": 375,
        "wires": []
    },
    {
        "id": "8503a624b3fd578e",
        "type": "comment",
        "z": "4a674aaa9e667dd6",
        "name": "########## Get geographic info",
        "info": "",
        "x": 170,
        "y": 1015,
        "wires": []
    },
    {
        "id": "d1e16d213602f942",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Prepare response",
        "func": "msg.payload = 'Houve uma falha durante o processamento da sua requisição.';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1556,
        "wires": [
            [
                "ae3acdea4e84f4b4",
                "55abf6149b998fb7"
            ]
        ]
    },
    {
        "id": "55abf6149b998fb7",
        "type": "http response",
        "z": "4a674aaa9e667dd6",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 480,
        "y": 1556,
        "wires": []
    },
    {
        "id": "a961e1ec20451721",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Prepare response",
        "func": "msg.payload = 'Houve uma falha durante o processamento da sua requisição. Por favor, tente mais tarde.';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1236,
        "wires": [
            [
                "1705d89c23ac2369",
                "1410340333327f6f"
            ]
        ]
    },
    {
        "id": "1410340333327f6f",
        "type": "http response",
        "z": "7f5557aca01f4737",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 480,
        "y": 1236,
        "wires": []
    },
    {
        "id": "54d530db04013318",
        "type": "function",
        "z": "e27b09cd4ecd866a",
        "name": "Prepare response",
        "func": "msg.payload = 'Houve uma falha durante o processamento da sua requisição. Por favor, tente mais tarde.';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 696,
        "wires": [
            [
                "783d881f4f37ed3b",
                "577586bde1b10999"
            ]
        ]
    },
    {
        "id": "577586bde1b10999",
        "type": "http response",
        "z": "e27b09cd4ecd866a",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 460,
        "y": 696,
        "wires": []
    },
    {
        "id": "3f850bd264ddaf01",
        "type": "http in",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "url": "/devices/info",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 736,
        "wires": [
            [
                "4b16be6b6b2b1e3b"
            ]
        ]
    },
    {
        "id": "1e992e859189a567",
        "type": "comment",
        "z": "4a674aaa9e667dd6",
        "name": "########## Update a device",
        "info": "",
        "x": 160,
        "y": 656,
        "wires": []
    },
    {
        "id": "4b16be6b6b2b1e3b",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Search for device",
        "func": "const deviceInfo = msg.payload.params;\n\nmsg.payload = `SELECT COUNT(*) \n               FROM DEVICES \n               WHERE NAME = '${deviceInfo.name}'`;\n               \nmsg.deviceInfo = deviceInfo;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 736,
        "wires": [
            [
                "936642715f14669a"
            ]
        ]
    },
    {
        "id": "936642715f14669a",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "env": [],
        "x": 480,
        "y": 736,
        "wires": [
            [
                "122724bf96a147d7"
            ]
        ]
    },
    {
        "id": "122724bf96a147d7",
        "type": "switch",
        "z": "4a674aaa9e667dd6",
        "name": "Found device?",
        "property": "payload[0].count",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 640,
        "y": 736,
        "wires": [
            [
                "3fd0be4cc0f3bdbc"
            ],
            [
                "b4e2da8341c30780"
            ]
        ]
    },
    {
        "id": "2748f59101ff8cd3",
        "type": "debug",
        "z": "4a674aaa9e667dd6",
        "name": "[EXIT 1] Update a device",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 757,
        "wires": []
    },
    {
        "id": "b4e2da8341c30780",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Prepare response",
        "func": "msg.payload = 'Não é possível a edição de um dispositivo que não encontra-se cadastrado.';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 757,
        "wires": [
            [
                "2101839e3edcbd88",
                "2748f59101ff8cd3"
            ]
        ]
    },
    {
        "id": "2101839e3edcbd88",
        "type": "http response",
        "z": "4a674aaa9e667dd6",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 1040,
        "y": 757,
        "wires": []
    },
    {
        "id": "3fd0be4cc0f3bdbc",
        "type": "link out",
        "z": "4a674aaa9e667dd6",
        "name": "OUT (1) Update a device",
        "links": [
            "bca9421ea3162cbe"
        ],
        "x": 775,
        "y": 714,
        "wires": []
    },
    {
        "id": "7d354790d19477dd",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Update device",
        "func": "const device = msg.deviceInfo;\n\nconst name        = device.name;\nconst coordinates = device.coordinates;\nconst street      = device.street;\nconst district    = device.district;\nconst interval    = device.interval;\nconst status      = device.status === 'OPERACIONAL' ? true : false;\n\nmsg.payload = `UPDATE DEVICES\n               SET COORDINATES = '${coordinates}',\n                   STREET = '${street}',\n                   DISTRICT_ID = (SELECT ID FROM DISTRICTS WHERE DISTRICT = '${district}'),\n                   INTERVAL = ${interval},\n                   STATUS = ${status},\n                   LAST_UPDATE_TIME = CURRENT_TIMESTAMP\n               WHERE NAME = '${name}'`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 876,
        "wires": [
            [
                "a7a9fdad92d0bee0"
            ]
        ]
    },
    {
        "id": "bca9421ea3162cbe",
        "type": "link in",
        "z": "4a674aaa9e667dd6",
        "name": "IN (1) Update a device",
        "links": [
            "3fd0be4cc0f3bdbc"
        ],
        "x": 55,
        "y": 876,
        "wires": [
            [
                "7d354790d19477dd"
            ]
        ]
    },
    {
        "id": "a7a9fdad92d0bee0",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "env": [],
        "x": 340,
        "y": 876,
        "wires": [
            [
                "5e444f6f03c677da"
            ]
        ]
    },
    {
        "id": "f1ec79581a0d0359",
        "type": "debug",
        "z": "4a674aaa9e667dd6",
        "name": "[EXIT 2] Update a device",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 916,
        "wires": []
    },
    {
        "id": "5e444f6f03c677da",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Prepare response",
        "func": "msg.payload = 'Dispositivo atualizado com sucesso.';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 876,
        "wires": [
            [
                "f1ec79581a0d0359",
                "428c91e378be6650",
                "f9f8c81bf4bd0380"
            ]
        ]
    },
    {
        "id": "f9f8c81bf4bd0380",
        "type": "http response",
        "z": "4a674aaa9e667dd6",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 720,
        "y": 876,
        "wires": []
    },
    {
        "id": "428c91e378be6650",
        "type": "link out",
        "z": "4a674aaa9e667dd6",
        "name": "OUT (2) Update a device",
        "links": [
            "e94d04fcb7ddddd9"
        ],
        "x": 655,
        "y": 836,
        "wires": []
    },
    {
        "id": "e94d04fcb7ddddd9",
        "type": "link in",
        "z": "e27b09cd4ecd866a",
        "name": "BEGIN Update messages interval",
        "links": [
            "428c91e378be6650"
        ],
        "x": 55,
        "y": 442,
        "wires": [
            [
                "d6c15f789150113c"
            ]
        ]
    },
    {
        "id": "e38621aa38a6a1c2",
        "type": "comment",
        "z": "e27b09cd4ecd866a",
        "name": "########## Update messages interval",
        "info": "",
        "x": 190,
        "y": 316,
        "wires": []
    },
    {
        "id": "d6c15f789150113c",
        "type": "function",
        "z": "e27b09cd4ecd866a",
        "name": "Get device info",
        "func": "const deviceName = msg.deviceInfo.name;\n\nmsg.payload = `SELECT ID, INTERVAL FROM DEVICES WHERE NAME = '${deviceName}'`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 442,
        "wires": [
            [
                "e3504661b768ac18"
            ]
        ]
    },
    {
        "id": "e3504661b768ac18",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "e27b09cd4ecd866a",
        "name": "",
        "env": [],
        "x": 340,
        "y": 442,
        "wires": [
            [
                "4f29d941c74707a5"
            ]
        ]
    },
    {
        "id": "4f29d941c74707a5",
        "type": "function",
        "z": "e27b09cd4ecd866a",
        "name": "Prepare message",
        "func": "const deviceId = msg.payload[0].id;\nconst interval = msg.payload[0].interval;\n\nmsg.topic = `pgc_ufabc/devices/actions/change_interval/${deviceId}`;\nmsg.payload = interval;\n\nmsg.deviceId = deviceId;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 442,
        "wires": [
            [
                "8424f1c292375f5a",
                "b644f813a9b949c7"
            ]
        ]
    },
    {
        "id": "4bc37b961a472284",
        "type": "mqtt out",
        "z": "e27b09cd4ecd866a",
        "name": "Sensors Input Local",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "df4bdf4be0d4150f",
        "x": 960,
        "y": 429,
        "wires": []
    },
    {
        "id": "b644f813a9b949c7",
        "type": "debug",
        "z": "e27b09cd4ecd866a",
        "name": "[EXIT] Update messages interval",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 482,
        "wires": []
    },
    {
        "id": "ecc7ac797f1dc40c",
        "type": "http in",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "url": "/devices/info/byLocation",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 156,
        "wires": [
            [
                "2116903aa8e9d3cb"
            ]
        ]
    },
    {
        "id": "2116903aa8e9d3cb",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Parse request body",
        "func": "msg.endpoint = msg.req.url.match(/\\/devices\\/info\\/(\\S+)\\?/)[1];\n\nmsg.params = {};\n\nif (msg.endpoint === 'byDevice') {\n    msg.params.deviceId = msg.payload.device_id || '';\n    msg.params.deviceName = msg.payload.device_name || '';\n    \n    msg.payload = msg.params.deviceId !== '' || msg.params.deviceName !== '';\n} else if (msg.endpoint === 'byLocation') {\n    msg.params.zone = msg.payload.zone || '';\n    msg.params.district = msg.payload.district || '';\n    \n    msg.payload = msg.params.zone !== '' && msg.params.district !== '';\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 136,
        "wires": [
            [
                "2138915b86627862"
            ]
        ]
    },
    {
        "id": "2138915b86627862",
        "type": "switch",
        "z": "4a674aaa9e667dd6",
        "name": "Has all params?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 600,
        "y": 136,
        "wires": [
            [
                "09d4870160f6b21e"
            ],
            [
                "61e85828ad1e2fa0"
            ]
        ]
    },
    {
        "id": "61e85828ad1e2fa0",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Prepare response",
        "func": "msg.payload = 'Parâmetros incompletos.';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 158,
        "wires": [
            [
                "179903881b85ff1d",
                "2de0d96376549d84"
            ]
        ]
    },
    {
        "id": "179903881b85ff1d",
        "type": "http response",
        "z": "4a674aaa9e667dd6",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 1000,
        "y": 158,
        "wires": []
    },
    {
        "id": "cb6bcc25b4569647",
        "type": "debug",
        "z": "4a674aaa9e667dd6",
        "name": "[EXIT 2] Get informations of a device",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 278,
        "wires": []
    },
    {
        "id": "2de0d96376549d84",
        "type": "debug",
        "z": "4a674aaa9e667dd6",
        "name": "[EXIT 1] Get informations of a device",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 158,
        "wires": []
    },
    {
        "id": "2a5cf022f2e39e0b",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Parse result",
        "func": "let devices = msg.payload;\n\ndevices = devices.map(device => {\n    device.status = device.status ? 'OPERACIONAL' : 'NÃO OPERACIONAL';\n    return device;\n});\n\nmsg.devices = devices;\nmsg.counter = devices.length;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 115,
        "wires": [
            [
                "a9b5679456086136"
            ]
        ]
    },
    {
        "id": "18495940653614df",
        "type": "comment",
        "z": "a716829fd201f4fd",
        "name": "########## Search for alarms in devices",
        "info": "",
        "x": 200,
        "y": 56,
        "wires": []
    },
    {
        "id": "37b2f5a492430da8",
        "type": "inject",
        "z": "a716829fd201f4fd",
        "name": "Every 30 minutes",
        "props": [
            {
                "p": "interval",
                "v": "30",
                "vt": "num"
            }
        ],
        "repeat": "1800",
        "crontab": "",
        "once": true,
        "onceDelay": "1800",
        "topic": "",
        "payloadType": "str",
        "x": 155,
        "y": 116,
        "wires": [
            [
                "4b2a8433fa7736ec"
            ]
        ]
    },
    {
        "id": "d1975b068b43eea0",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Get devices",
        "func": "msg.payload = 'SELECT ID, STATUS FROM DEVICES';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 196,
        "wires": [
            [
                "f36fc7a2fd7bde3d"
            ]
        ]
    },
    {
        "id": "f36fc7a2fd7bde3d",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "a716829fd201f4fd",
        "name": "",
        "x": 320,
        "y": 196,
        "wires": [
            [
                "153697f042197c3f"
            ]
        ]
    },
    {
        "id": "2521dfd35a42d570",
        "type": "split",
        "z": "a716829fd201f4fd",
        "name": "Split devices",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 330,
        "y": 355,
        "wires": [
            [
                "5a96f9382e52a5bb"
            ]
        ]
    },
    {
        "id": "4b2a8433fa7736ec",
        "type": "link out",
        "z": "a716829fd201f4fd",
        "name": "OUT (1) Search for alarms in devices",
        "links": [
            "514bfb4539d7fcbc"
        ],
        "x": 295,
        "y": 116,
        "wires": []
    },
    {
        "id": "514bfb4539d7fcbc",
        "type": "link in",
        "z": "a716829fd201f4fd",
        "name": "IN (1) Search for alarms in devices",
        "links": [
            "4b2a8433fa7736ec"
        ],
        "x": 55,
        "y": 196,
        "wires": [
            [
                "d1975b068b43eea0"
            ]
        ]
    },
    {
        "id": "9f98e10fd5d8cbf4",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Get measures",
        "func": "const device = msg.payload;\nconst interval = msg.interval;\n\nconst timestamp = new Date();\nconst start = timestamp.getTime() - 1000 * 60 * interval;\n\nmsg.payload = {\n    db: 0,\n    command: 'ZRANGE',\n    querys: [{ key: device.id, params: [start, `+inf`, 'BYSCORE'] }]\n};\n\nmsg.device = device;\n\ndelete msg.interval;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 480,
        "wires": [
            [
                "2f1493e37e263f60"
            ]
        ]
    },
    {
        "id": "bfa141f4777b4d9b",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Parse result",
        "func": "msg.device.measures = msg.payload.map(measure => measure.result);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 458,
        "wires": [
            [
                "d81860da08798b7c"
            ]
        ]
    },
    {
        "id": "5a4b5eba1eec0cdb",
        "type": "link out",
        "z": "a716829fd201f4fd",
        "name": "OUT (2) Search for alarms in devices",
        "links": [
            "893a79912c343403"
        ],
        "x": 575,
        "y": 196,
        "wires": []
    },
    {
        "id": "893a79912c343403",
        "type": "link in",
        "z": "a716829fd201f4fd",
        "name": "IN (2) Search for alarms in devices",
        "links": [
            "5a4b5eba1eec0cdb"
        ],
        "x": 55,
        "y": 275,
        "wires": [
            [
                "cf67aacc68164b4f"
            ]
        ]
    },
    {
        "id": "478979063431a377",
        "type": "link out",
        "z": "a716829fd201f4fd",
        "name": "OUT (3) Search for alarms in devices",
        "links": [
            "4c9496c77ae27cce"
        ],
        "x": 615,
        "y": 275,
        "wires": []
    },
    {
        "id": "4c9496c77ae27cce",
        "type": "link in",
        "z": "a716829fd201f4fd",
        "name": "IN (3) Search for alarms in devices",
        "links": [
            "478979063431a377"
        ],
        "x": 55,
        "y": 355,
        "wires": [
            [
                "37b3a4bb5c17bd3c"
            ]
        ]
    },
    {
        "id": "37b3a4bb5c17bd3c",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Prepare split",
        "func": "msg.payload = msg.devices;\n\ndelete msg.devices;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 355,
        "wires": [
            [
                "2521dfd35a42d570"
            ]
        ]
    },
    {
        "id": "5a96f9382e52a5bb",
        "type": "link out",
        "z": "a716829fd201f4fd",
        "name": "OUT (4) Search for alarms in devices",
        "links": [
            "d8251d505af5a2da"
        ],
        "x": 435,
        "y": 355,
        "wires": []
    },
    {
        "id": "d8251d505af5a2da",
        "type": "link in",
        "z": "a716829fd201f4fd",
        "name": "IN (4) Search for alarms in devices",
        "links": [
            "5a96f9382e52a5bb"
        ],
        "x": 55,
        "y": 480,
        "wires": [
            [
                "9f98e10fd5d8cbf4"
            ]
        ]
    },
    {
        "id": "696d0fb157da1421",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Search for failures",
        "func": "const measures = msg.device.measures;\nconst status = msg.device.status;\n\nconst failures = msg.failures;\nfailures.shift();\n\nconst matches = failures.filter(failure => {\n    const measuresCheck = measures.every(measure => {\n        return msg.checkMeasures(failure.voltage, measure.voltage)\n            && msg.checkMeasures(failure.current, measure.current)\n            && msg.checkMeasures(failure.lightness, measure.lightness)\n            && msg.checkReleState(failure.rele_state, measure)\n    });\n    \n    const statusCheck = msg.checkStatus(failure.status, status);\n    \n    return measuresCheck && statusCheck;\n});\n\nmsg.device.failures = matches;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 436,
        "wires": [
            [
                "949e3ad118b2d007"
            ]
        ]
    },
    {
        "id": "af9f059a00f28668",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Define check functions",
        "func": "// If attribute value is null in failure rule, it can be ignored\n\nmsg.checkMeasures = function (failure, measure) {\n    return failure !== null ? failure === measure : true;\n}\n\nmsg.checkReleState = function (failure, measure) {\n    if (failure !== null) {\n        const value = failure.value === measure.rele_state;\n        \n        const date = new Date(measure.insertion_time);\n        const time = date.getHours() * 3600 + date.getMinutes() * 60 + date.getSeconds(); // In seconds\n        \n        const begin = failure.threshold.begin;\n        const end = failure.threshold.end;\n\n        let threshold;\n        \n        if (begin < end) {\n            threshold = time >= begin && time < end;    \n        } else {\n            threshold = time >= begin || time < end;\n        }\n        \n        return value && threshold;\n    }\n    \n    return true;\n}\n\nmsg.checkStatus = function (failure, status) {\n    return failure !== null ? failure === status : true;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 436,
        "wires": [
            [
                "696d0fb157da1421"
            ]
        ]
    },
    {
        "id": "949e3ad118b2d007",
        "type": "link out",
        "z": "a716829fd201f4fd",
        "name": "OUT (5) Search for alarms in devices",
        "links": [
            "5e5889d8cc8207b3"
        ],
        "x": 1295,
        "y": 436,
        "wires": []
    },
    {
        "id": "dd9e59380195cf1b",
        "type": "comment",
        "z": "a716829fd201f4fd",
        "name": "########## Create new alarms",
        "info": "",
        "x": 170,
        "y": 716,
        "wires": []
    },
    {
        "id": "c4e15d35d382fe70",
        "type": "link in",
        "z": "a716829fd201f4fd",
        "name": "IN (1) Create/Update alarms",
        "links": [
            "b6c70f793086c1ba"
        ],
        "x": 55,
        "y": 825,
        "wires": [
            [
                "3effaa9a67ae8e30"
            ]
        ]
    },
    {
        "id": "d81860da08798b7c",
        "type": "switch",
        "z": "a716829fd201f4fd",
        "name": "Found measures?",
        "property": "device.measures.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 458,
        "wires": [
            [
                "af9f059a00f28668"
            ],
            [
                "ac446ab6680e70d0"
            ]
        ]
    },
    {
        "id": "ac446ab6680e70d0",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Search for failures",
        "func": "msg.device.failures = [];\n\nif (msg.device.status) {\n    msg.device.failures.push(msg.failures[0]);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 480,
        "wires": [
            [
                "7afa5ad05baa9170"
            ]
        ]
    },
    {
        "id": "7afa5ad05baa9170",
        "type": "link out",
        "z": "a716829fd201f4fd",
        "name": "OUT (6) Search for alarms in devices",
        "links": [
            "5e5889d8cc8207b3"
        ],
        "x": 1075,
        "y": 480,
        "wires": []
    },
    {
        "id": "5e5889d8cc8207b3",
        "type": "link in",
        "z": "a716829fd201f4fd",
        "name": "IN (5) Search for alarms in devices",
        "links": [
            "949e3ad118b2d007",
            "7afa5ad05baa9170"
        ],
        "x": 55,
        "y": 596,
        "wires": [
            [
                "a7cfaca3b35c39c7"
            ]
        ]
    },
    {
        "id": "a7cfaca3b35c39c7",
        "type": "switch",
        "z": "a716829fd201f4fd",
        "name": "Found alarms?",
        "property": "device.failures.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 180,
        "y": 596,
        "wires": [
            [
                "b6c70f793086c1ba"
            ],
            [
                "becfcf373fa8d8b7"
            ]
        ]
    },
    {
        "id": "b6c70f793086c1ba",
        "type": "link out",
        "z": "a716829fd201f4fd",
        "name": "OUT (7) Search for alarms in devices",
        "links": [
            "c4e15d35d382fe70",
            "349c4baee3ab3c32"
        ],
        "x": 315,
        "y": 575,
        "wires": []
    },
    {
        "id": "becfcf373fa8d8b7",
        "type": "debug",
        "z": "a716829fd201f4fd",
        "name": "[EXIT 2] Search for alarms in devices",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 617,
        "wires": []
    },
    {
        "id": "bc681d11264c5aad",
        "type": "comment",
        "z": "1ce1485ad608bc7a",
        "name": "########## Search for resolved alarms in devices",
        "info": "",
        "x": 230,
        "y": 56,
        "wires": []
    },
    {
        "id": "84dc9f59d2922e6e",
        "type": "inject",
        "z": "1ce1485ad608bc7a",
        "name": "Every 30 minutes",
        "props": [
            {
                "p": "interval",
                "v": "30",
                "vt": "num"
            }
        ],
        "repeat": "1800",
        "crontab": "",
        "once": true,
        "onceDelay": "2400",
        "topic": "",
        "payloadType": "str",
        "x": 156,
        "y": 115,
        "wires": [
            [
                "ec1033c39f7f27f1"
            ]
        ]
    },
    {
        "id": "cd5bad6c42c19d4a",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Get devices",
        "func": "msg.payload = 'SELECT ID, STATUS FROM DEVICES';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 171,
        "y": 195,
        "wires": [
            [
                "26f3ed1630dcde2b"
            ]
        ]
    },
    {
        "id": "26f3ed1630dcde2b",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "1ce1485ad608bc7a",
        "name": "",
        "x": 321,
        "y": 195,
        "wires": [
            [
                "3459dc27340db6b6"
            ]
        ]
    },
    {
        "id": "af432404de98c6bd",
        "type": "split",
        "z": "1ce1485ad608bc7a",
        "name": "Split devices",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 331,
        "y": 354,
        "wires": [
            [
                "7113b90b7c788d2b"
            ]
        ]
    },
    {
        "id": "ec1033c39f7f27f1",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (1) Search for resolved alarms in devices",
        "links": [
            "2f44cc3e12e0aee8"
        ],
        "x": 296,
        "y": 115,
        "wires": []
    },
    {
        "id": "2f44cc3e12e0aee8",
        "type": "link in",
        "z": "1ce1485ad608bc7a",
        "name": "IN (1) Search for resolved alarms in devices",
        "links": [
            "ec1033c39f7f27f1"
        ],
        "x": 56,
        "y": 195,
        "wires": [
            [
                "cd5bad6c42c19d4a"
            ]
        ]
    },
    {
        "id": "3c9e9e1e65d0d901",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (2) Search for resolved alarms in devices",
        "links": [
            "cf15ea460869433a"
        ],
        "x": 576,
        "y": 195,
        "wires": []
    },
    {
        "id": "cf15ea460869433a",
        "type": "link in",
        "z": "1ce1485ad608bc7a",
        "name": "IN (2) Search for resolved alarms in devices",
        "links": [
            "3c9e9e1e65d0d901"
        ],
        "x": 56,
        "y": 274,
        "wires": [
            [
                "a778e665bd2949fd"
            ]
        ]
    },
    {
        "id": "f6a2e4e634b990fa",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (3) Search for resolved alarms in devices",
        "links": [
            "0b94a133b665070e"
        ],
        "x": 616,
        "y": 274,
        "wires": []
    },
    {
        "id": "0b94a133b665070e",
        "type": "link in",
        "z": "1ce1485ad608bc7a",
        "name": "IN (3) Search for resolved alarms in devices",
        "links": [
            "f6a2e4e634b990fa"
        ],
        "x": 56,
        "y": 354,
        "wires": [
            [
                "a0ef1ebf2e534430"
            ]
        ]
    },
    {
        "id": "a0ef1ebf2e534430",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Prepare split",
        "func": "msg.payload = msg.devices;\n\ndelete msg.devices;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 171,
        "y": 354,
        "wires": [
            [
                "af432404de98c6bd"
            ]
        ]
    },
    {
        "id": "7113b90b7c788d2b",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (4) Search for resolved alarms in devices",
        "links": [
            "a0acc6aa48221e6d"
        ],
        "x": 436,
        "y": 354,
        "wires": []
    },
    {
        "id": "a0acc6aa48221e6d",
        "type": "link in",
        "z": "1ce1485ad608bc7a",
        "name": "IN (4) Search for resolved alarms in devices",
        "links": [
            "7113b90b7c788d2b"
        ],
        "x": 56,
        "y": 480,
        "wires": [
            [
                "646217ca55a43fdf"
            ]
        ]
    },
    {
        "id": "e0eb4a72e78bddc5",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Search for failures",
        "func": "const measures = msg.device.measures;\nconst status = msg.device.status;\n\nconst failures = msg.failures;\nfailures.pop();\n\nconst matches = failures.filter(failure => {\n    const measuresCheck = measures.every(measure => {\n        return msg.checkMeasures(failure.voltage, measure.voltage)\n            && msg.checkMeasures(failure.current, measure.current)\n            && msg.checkMeasures(failure.lightness, measure.lightness)\n            && msg.checkReleState(failure.rele_state, measure)\n    });\n    \n    const statusCheck = msg.checkStatus(failure.status, status);\n    \n    return measuresCheck && statusCheck;\n});\n\nmsg.device.failures = matches;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 436,
        "wires": [
            [
                "91dbe620484423ae"
            ]
        ]
    },
    {
        "id": "91a2bbfa87df85bc",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Define check functions",
        "func": "// If attribute value is null in failure rule, it can be ignored\n\nmsg.checkMeasures = function (failure, measure) {\n    return failure !== null ? failure !== measure : true;\n}\n\nmsg.checkReleState = function (failure, measure) {\n    if (failure !== null) {\n        const value = failure.value !== measure.rele_state;\n        \n        const date = new Date(measure.insertion_time);\n        const time = date.getHours() * 3600 + date.getMinutes() * 60 + date.getSeconds(); // In seconds\n        \n        const begin = failure.threshold.begin;\n        const end = failure.threshold.end;\n\n        let threshold;\n        \n        if (begin < end) {\n            threshold = time >= begin && time < end;    \n        } else {\n            threshold = time >= begin || time < end;\n        }\n        \n        return (value && threshold) || !threshold;\n    }\n    \n    return true;\n}\n\nmsg.checkStatus = function (failure, status) {\n    return failure !== null ? failure === status : true;\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 436,
        "wires": [
            [
                "e0eb4a72e78bddc5"
            ]
        ]
    },
    {
        "id": "91dbe620484423ae",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (5) Search for resolved alarms in devices",
        "links": [
            "8b725e75f38013b9"
        ],
        "x": 1295,
        "y": 436,
        "wires": []
    },
    {
        "id": "712f89822e9704e4",
        "type": "switch",
        "z": "1ce1485ad608bc7a",
        "name": "Found measures?",
        "property": "device.measures.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 458,
        "wires": [
            [
                "91a2bbfa87df85bc"
            ],
            [
                "437e5391745a7043"
            ]
        ]
    },
    {
        "id": "8b725e75f38013b9",
        "type": "link in",
        "z": "1ce1485ad608bc7a",
        "name": "IN (5) Search for resolved alarms in devices",
        "links": [
            "91dbe620484423ae",
            "142761bd553ef531"
        ],
        "x": 55,
        "y": 596,
        "wires": [
            [
                "92e4d72c9fcd39d0"
            ]
        ]
    },
    {
        "id": "92e4d72c9fcd39d0",
        "type": "switch",
        "z": "1ce1485ad608bc7a",
        "name": "Found alarms?",
        "property": "device.failures.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 180,
        "y": 596,
        "wires": [
            [
                "548c9048fafa7ef1"
            ],
            [
                "c43efe82c097e2a2"
            ]
        ]
    },
    {
        "id": "548c9048fafa7ef1",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (7) Search for resolved alarms in devices",
        "links": [
            "ac3ecc4059ed3108"
        ],
        "x": 315,
        "y": 575,
        "wires": []
    },
    {
        "id": "c43efe82c097e2a2",
        "type": "debug",
        "z": "1ce1485ad608bc7a",
        "name": "[EXIT 2] Search for resolved alarms in devices",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 617,
        "wires": []
    },
    {
        "id": "49ea81661e9662a6",
        "type": "comment",
        "z": "1ce1485ad608bc7a",
        "name": "########## Get resolved failures",
        "info": "",
        "x": 170,
        "y": 716,
        "wires": []
    },
    {
        "id": "ac3ecc4059ed3108",
        "type": "link in",
        "z": "1ce1485ad608bc7a",
        "name": "IN (1) Get resolved failures",
        "links": [
            "548c9048fafa7ef1"
        ],
        "x": 55,
        "y": 798,
        "wires": [
            [
                "c3bed0f8b3cbb43e"
            ]
        ]
    },
    {
        "id": "437e5391745a7043",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Search for failures",
        "func": "msg.device.failures = [];\n\nif (!msg.device.status) {\n    msg.device.failures.push(msg.failures[6]);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 949,
        "y": 479,
        "wires": [
            [
                "142761bd553ef531"
            ]
        ]
    },
    {
        "id": "142761bd553ef531",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (6) Search for resolved alarms in devices",
        "links": [
            "8b725e75f38013b9"
        ],
        "x": 1074,
        "y": 479,
        "wires": []
    },
    {
        "id": "451464678bbc3d93",
        "type": "catch",
        "z": "185bd0a8b5a4b916",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 1076,
        "wires": [
            [
                "5db875bc9d533019"
            ]
        ]
    },
    {
        "id": "fbc7b5775bf09c5d",
        "type": "comment",
        "z": "185bd0a8b5a4b916",
        "name": "########## Exceptions Treatment",
        "info": "",
        "x": 179,
        "y": 1016,
        "wires": []
    },
    {
        "id": "3466a7f65bed9eac",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN (1) End",
        "links": [
            "e13e3ccd568107d2"
        ],
        "x": 55,
        "y": 680,
        "wires": [
            [
                "48b1a57359cc9abd"
            ]
        ]
    },
    {
        "id": "ab7425eb7c0d4676",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN (3) End",
        "links": [
            "2b77f7f45b3222ed",
            "5db875bc9d533019",
            "7f7e243187b3543a",
            "84ad2818468743c6"
        ],
        "x": 55,
        "y": 861,
        "wires": [
            []
        ]
    },
    {
        "id": "cba301d7724bd39b",
        "type": "comment",
        "z": "185bd0a8b5a4b916",
        "name": "Success",
        "info": "",
        "x": 600,
        "y": 781,
        "wires": []
    },
    {
        "id": "dd6277508180fb7c",
        "type": "comment",
        "z": "185bd0a8b5a4b916",
        "name": "Insuccess",
        "info": "",
        "x": 220,
        "y": 861,
        "wires": []
    },
    {
        "id": "5db875bc9d533019",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT Exceptions Treatment",
        "links": [
            "ab7425eb7c0d4676"
        ],
        "x": 195,
        "y": 1076,
        "wires": []
    },
    {
        "id": "adc4c59772c6298c",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Prepare result",
        "func": "delete msg.entry;\ndelete msg.counter;\ndelete msg.counterMax;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 781,
        "wires": [
            []
        ]
    },
    {
        "id": "d739577f0282bcd8",
        "type": "comment",
        "z": "185bd0a8b5a4b916",
        "name": "########## Begin",
        "info": "",
        "x": 130,
        "y": 56,
        "wires": []
    },
    {
        "id": "49e5e7b7d2a08001",
        "type": "comment",
        "z": "185bd0a8b5a4b916",
        "name": "########## Commands",
        "info": "",
        "x": 150,
        "y": 356,
        "wires": []
    },
    {
        "id": "4f69d0a79d62082f",
        "type": "comment",
        "z": "185bd0a8b5a4b916",
        "name": "########## End",
        "info": "",
        "x": 120,
        "y": 576,
        "wires": []
    },
    {
        "id": "7a1c9d83a3613f33",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Set counter",
        "func": "msg.counter = 0;\nmsg.counterMax = msg.entry.querys.length;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 256,
        "wires": [
            [
                "67b41fa2bf4d76bc"
            ]
        ]
    },
    {
        "id": "2b42e25c9acdcf26",
        "type": "switch",
        "z": "185bd0a8b5a4b916",
        "name": "Execute again?",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "lt",
                "v": "counterMax",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 180,
        "y": 459,
        "wires": [
            [
                "95fbf9069438666b"
            ],
            [
                "e13e3ccd568107d2"
            ]
        ]
    },
    {
        "id": "0aad452318b271e8",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN (1) Commands",
        "links": [
            "5309a1aeeb5c3fa3",
            "67b41fa2bf4d76bc"
        ],
        "x": 55,
        "y": 459,
        "wires": [
            [
                "2b42e25c9acdcf26"
            ]
        ]
    },
    {
        "id": "e13e3ccd568107d2",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT (1) Commands",
        "links": [
            "3466a7f65bed9eac"
        ],
        "x": 315,
        "y": 480,
        "wires": []
    },
    {
        "id": "94a4714c3a3969b8",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Prepare query",
        "func": "msg.payload = {\n    db:      msg.entry.db,\n    command: msg.entry.command,\n    key:     '',\n    params:  []\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 658,
        "wires": [
            [
                "6d5dcc5b88ece111"
            ]
        ]
    },
    {
        "id": "16d60375c4a1414f",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Enabled MULTI mode",
        "func": "msg.payload = {\n    db:      msg.entry.db,\n    command: msg.entry.command,\n    key:     '*',\n    params:  []\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 137,
        "wires": [
            [
                "513a6d8b15b09235"
            ]
        ]
    },
    {
        "id": "071eddf0112438e8",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Map result with key",
        "func": "function isJSON (string) {\n    try {\n        JSON.parse(string);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\nlet results = [].concat(msg.payload);\nlet keys    = msg.entry.querys.map(query => query.key);\n\nresults = results.map((result, i) => {\n    return {\n        key:    keys[i] || '',\n        result: isJSON(result) ? JSON.parse(result) : result\n    }        \n});\n\nmsg.payload = results;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 781,
        "wires": [
            [
                "adc4c59772c6298c"
            ]
        ]
    },
    {
        "id": "3c546124752a49f4",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Parse entry",
        "func": "msg.entry = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 159,
        "wires": [
            [
                "bb3f3b5c78d45598"
            ]
        ]
    },
    {
        "id": "bb3f3b5c78d45598",
        "type": "switch",
        "z": "185bd0a8b5a4b916",
        "name": "Multiples querys?",
        "property": "entry.querys.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 159,
        "wires": [
            [
                "16d60375c4a1414f"
            ],
            [
                "f846ecd2bda124a3"
            ]
        ]
    },
    {
        "id": "48b1a57359cc9abd",
        "type": "switch",
        "z": "185bd0a8b5a4b916",
        "name": "Multiples querys?",
        "property": "entry.querys.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 680,
        "wires": [
            [
                "94a4714c3a3969b8"
            ],
            [
                "9c20f8370a64c5b7"
            ]
        ]
    },
    {
        "id": "67b41fa2bf4d76bc",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT (4) Begin",
        "links": [
            "7dd90b75f23df424",
            "0aad452318b271e8"
        ],
        "x": 275,
        "y": 256,
        "wires": []
    },
    {
        "id": "3effaa9a67ae8e30",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Get device current alarms",
        "func": "msg.payload = {\n    db: 1,\n    command: 'LRANGE',\n    querys: [{ key: msg.device.id, params: [0, -1] }]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 825,
        "wires": [
            [
                "5536e6d31bd99553"
            ]
        ]
    },
    {
        "id": "5536e6d31bd99553",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "a716829fd201f4fd",
        "name": "",
        "x": 420,
        "y": 825,
        "wires": [
            [
                "77f61339ce8b0282"
            ],
            [
                "5f17cf3b80e41476"
            ]
        ]
    },
    {
        "id": "5f17cf3b80e41476",
        "type": "debug",
        "z": "a716829fd201f4fd",
        "name": "[EXIT 1] Create new alarms",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 847,
        "wires": []
    },
    {
        "id": "77f61339ce8b0282",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Search for new alarms",
        "func": "const currentAlarms = msg.payload.map(alarm => alarm.result);\nconst foundFailures = msg.device.failures;\n\nconst newAlarms = [];\n\nfoundFailures.forEach(failure => {\n    const found = currentAlarms.find(alarm => alarm.type === failure.id);\n\n    if (found === undefined) {\n        newAlarms.push(failure);\n    }\n});\n\nmsg.newAlarms = newAlarms;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 803,
        "wires": [
            [
                "66bcfb89b4a8b0e1"
            ]
        ]
    },
    {
        "id": "2689c430be5bfd2f",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Create new alarms",
        "func": "let newAlarms = msg.newAlarms;\n\nnewAlarms = newAlarms.map(failure => {\n    const date = new Date();\n    \n    const alarm = {\n        type:          failure.id,\n        name:          failure.name,\n        device_id:     msg.device.id,\n        creation_time: date.getTime(),\n    }\n    \n    return alarm;\n});\n\nmsg.newAlarms = newAlarms;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 776,
        "wires": [
            [
                "92227d472ca09548"
            ]
        ]
    },
    {
        "id": "c203209893b251ca",
        "type": "link in",
        "z": "a716829fd201f4fd",
        "name": "IN (1) Insert alarms in historic table",
        "links": [
            "92227d472ca09548"
        ],
        "x": 55,
        "y": 1016,
        "wires": [
            [
                "c32ede3e5ceef202"
            ]
        ]
    },
    {
        "id": "92227d472ca09548",
        "type": "link out",
        "z": "a716829fd201f4fd",
        "name": "OUT (1) Create new alarms",
        "links": [
            "c203209893b251ca"
        ],
        "x": 1195,
        "y": 776,
        "wires": []
    },
    {
        "id": "58fdfd40528ebb59",
        "type": "comment",
        "z": "a716829fd201f4fd",
        "name": "########## Insert alarms in historic table",
        "info": "",
        "x": 200,
        "y": 956,
        "wires": []
    },
    {
        "id": "c32ede3e5ceef202",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Insert alarms in historic table",
        "func": "const newAlarms = msg.newAlarms;\n\nconst values = newAlarms.map(alarm => `(${alarm.type}, ${alarm.device_id}, TO_TIMESTAMP(${Math.round(alarm.creation_time/1000)}))`).join(',');\n\nmsg.payload = `INSERT INTO ALARMS (TYPE, DEVICE_ID, CREATION_TIME)\n               VALUES\n               ${values}\n               RETURNING ID, TYPE`\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 1016,
        "wires": [
            [
                "9b3a281ae90f46f8"
            ]
        ]
    },
    {
        "id": "9b3a281ae90f46f8",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "a716829fd201f4fd",
        "name": "",
        "x": 420,
        "y": 1016,
        "wires": [
            [
                "958e2afc99d9a189"
            ]
        ]
    },
    {
        "id": "958e2afc99d9a189",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Map serials to alarms",
        "func": "const newAlarms = msg.newAlarms;\nconst insertedRows = msg.payload;\n\ninsertedRows.forEach(row => {\n    const alarm = newAlarms.find(alarm => alarm.type === row.type);\n    alarm.id = row.id;\n});\n\nmsg.newAlarms = newAlarms;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1016,
        "wires": [
            [
                "d44a003dbf52554f"
            ]
        ]
    },
    {
        "id": "d44a003dbf52554f",
        "type": "link out",
        "z": "a716829fd201f4fd",
        "name": "OUT (1) Insert alarms in historic table",
        "links": [
            "6921ce91d6a40a93"
        ],
        "x": 735,
        "y": 1016,
        "wires": []
    },
    {
        "id": "6921ce91d6a40a93",
        "type": "link in",
        "z": "a716829fd201f4fd",
        "name": "IN (1) Insert new alarms in list",
        "links": [
            "d44a003dbf52554f"
        ],
        "x": 55,
        "y": 1198,
        "wires": [
            [
                "312afdbfaee80119"
            ]
        ]
    },
    {
        "id": "312afdbfaee80119",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Insert new alarms list",
        "func": "const newAlarms = msg.newAlarms.map(alarm => JSON.stringify(alarm));\n\nmsg.payload = {\n    db: 1,\n    command: 'LPUSH',\n    querys: [{ key: msg.device.id, params: newAlarms }]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 1198,
        "wires": [
            [
                "f90b3ecdc5a39cba"
            ]
        ]
    },
    {
        "id": "f90b3ecdc5a39cba",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "a716829fd201f4fd",
        "name": "",
        "x": 400,
        "y": 1198,
        "wires": [
            [
                "95d679959715f7c9"
            ],
            [
                "da8d352cb855c2c5"
            ]
        ]
    },
    {
        "id": "da8d352cb855c2c5",
        "type": "debug",
        "z": "a716829fd201f4fd",
        "name": "[EXIT 2] Insert new alarms in list",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 1219,
        "wires": []
    },
    {
        "id": "95d679959715f7c9",
        "type": "debug",
        "z": "a716829fd201f4fd",
        "name": "[EXIT 1] Insert new alarms in list",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 1176,
        "wires": []
    },
    {
        "id": "d7109afd07efa46e",
        "type": "catch",
        "z": "a716829fd201f4fd",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 1437,
        "wires": [
            [
                "aba8a80fa672c520"
            ]
        ]
    },
    {
        "id": "75af3e7b5fc63593",
        "type": "comment",
        "z": "a716829fd201f4fd",
        "name": "########## Exceptions Treatment",
        "info": "",
        "x": 179,
        "y": 1376,
        "wires": []
    },
    {
        "id": "aba8a80fa672c520",
        "type": "debug",
        "z": "a716829fd201f4fd",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 1437,
        "wires": []
    },
    {
        "id": "71255050788bf980",
        "type": "comment",
        "z": "a716829fd201f4fd",
        "name": "########## Insert new alarms in list",
        "info": "",
        "x": 180,
        "y": 1116,
        "wires": []
    },
    {
        "id": "c3bed0f8b3cbb43e",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Get current alarms of device",
        "func": "msg.payload = {\n    db: 1,\n    command: 'LRANGE',\n    querys: [{ key: msg.device.id, params: [0, -1] }]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 220,
        "y": 798,
        "wires": [
            [
                "2d9791bcbb2f7c87"
            ]
        ]
    },
    {
        "id": "2d9791bcbb2f7c87",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "1ce1485ad608bc7a",
        "name": "",
        "x": 440,
        "y": 798,
        "wires": [
            [
                "2722d781c3aa55d9"
            ],
            [
                "c9dbd9e3a5a46643"
            ]
        ]
    },
    {
        "id": "c9dbd9e3a5a46643",
        "type": "debug",
        "z": "1ce1485ad608bc7a",
        "name": "[EXIT] Get resolved failures",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 820,
        "wires": []
    },
    {
        "id": "2722d781c3aa55d9",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Get resolved alarms",
        "func": "const currentAlarms = msg.payload.map(alarm => alarm.result);\nconst resolvedFailures = msg.device.failures;\n\nconst resolvedAlarms = [];\nconst alarms = [];\n\ncurrentAlarms.forEach(alarm => {\n    const found = resolvedFailures.find(failure => failure.id === alarm.type);\n    \n    if (found !== undefined) {\n        resolvedAlarms.push(alarm);\n    } else {\n        alarms.push(alarm);\n    }\n});\n\nmsg.total = currentAlarms.length;\nmsg.resolvedAlarms = resolvedAlarms;\nmsg.alarms = alarms;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 776,
        "wires": [
            [
                "84b917302ce31758"
            ]
        ]
    },
    {
        "id": "84b917302ce31758",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (1) Get resolved failures",
        "links": [
            "c87aff05d514e788"
        ],
        "x": 795,
        "y": 776,
        "wires": []
    },
    {
        "id": "c87aff05d514e788",
        "type": "link in",
        "z": "1ce1485ad608bc7a",
        "name": "IN (1) Finish alarm in historic table",
        "links": [
            "84b917302ce31758"
        ],
        "x": 55,
        "y": 998,
        "wires": [
            [
                "a984131ddc862c3e"
            ]
        ]
    },
    {
        "id": "f088a50fbcf52cfc",
        "type": "comment",
        "z": "1ce1485ad608bc7a",
        "name": "########## Finish alarm in historic table",
        "info": "",
        "x": 200,
        "y": 916,
        "wires": []
    },
    {
        "id": "a984131ddc862c3e",
        "type": "switch",
        "z": "1ce1485ad608bc7a",
        "name": "Found resolved alarms?",
        "property": "resolvedAlarms.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 210,
        "y": 998,
        "wires": [
            [
                "f21b90b43a031e9a"
            ],
            [
                "d35a8f8c9689b968"
            ]
        ]
    },
    {
        "id": "f21b90b43a031e9a",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Set clear time in resolved alarms",
        "func": "const alarms = msg.resolvedAlarms;\n\nconst ids = alarms.map(alarm => alarm.id).join(',');\n\nconst currentDate = new Date();\n\nmsg.payload = `UPDATE ALARMS\n               SET CLEAR_TIME = TO_TIMESTAMP(${Math.round(currentDate.getTime()/1000)})\n               WHERE ID IN (${ids})`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 976,
        "wires": [
            [
                "fb0863bb8377f03c"
            ]
        ]
    },
    {
        "id": "fb0863bb8377f03c",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "1ce1485ad608bc7a",
        "name": "",
        "x": 700,
        "y": 976,
        "wires": [
            [
                "455d87c337cbecac"
            ]
        ]
    },
    {
        "id": "46bbec51c1845bc2",
        "type": "debug",
        "z": "1ce1485ad608bc7a",
        "name": "[EXIT 1] Update alarms list",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 1218,
        "wires": []
    },
    {
        "id": "d9aee65cde3b444d",
        "type": "link in",
        "z": "1ce1485ad608bc7a",
        "name": "IN (1) Update alarms list",
        "links": [
            "e0d43ea5683417d0",
            "e786deccc89bf279",
            "455d87c337cbecac",
            "d35a8f8c9689b968"
        ],
        "x": 55,
        "y": 1197,
        "wires": [
            [
                "b89e1b2327a1279f"
            ]
        ]
    },
    {
        "id": "3d38d1e54993ad8c",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Insert new alarms list",
        "func": "const alarms = msg.alarms.map(alarm => JSON.stringify(alarm));\n\nmsg.payload = {\n    db: 1,\n    command: 'LPUSH',\n    querys: [{ key: msg.device.id, params: alarms }]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1318,
        "wires": [
            [
                "88976d8bdbdeccfb"
            ]
        ]
    },
    {
        "id": "88976d8bdbdeccfb",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "1ce1485ad608bc7a",
        "name": "",
        "x": 580,
        "y": 1318,
        "wires": [
            [
                "830b2b3e664aecbd"
            ],
            [
                "1f85e78821b1c53e"
            ]
        ]
    },
    {
        "id": "1f85e78821b1c53e",
        "type": "debug",
        "z": "1ce1485ad608bc7a",
        "name": "[EXIT 4] Update alarms list",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1339,
        "wires": []
    },
    {
        "id": "830b2b3e664aecbd",
        "type": "debug",
        "z": "1ce1485ad608bc7a",
        "name": "[EXIT 3] Update alarms list",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1296,
        "wires": []
    },
    {
        "id": "117b30d7dd9e4667",
        "type": "catch",
        "z": "1ce1485ad608bc7a",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 1576,
        "wires": [
            [
                "20e2bb4192bab23f"
            ]
        ]
    },
    {
        "id": "14ca10eb1390baa4",
        "type": "comment",
        "z": "1ce1485ad608bc7a",
        "name": "########## Exceptions Treatment",
        "info": "",
        "x": 179,
        "y": 1515,
        "wires": []
    },
    {
        "id": "20e2bb4192bab23f",
        "type": "debug",
        "z": "1ce1485ad608bc7a",
        "name": "Exception",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 250,
        "y": 1576,
        "wires": []
    },
    {
        "id": "fb8994c311d75eb2",
        "type": "comment",
        "z": "1ce1485ad608bc7a",
        "name": "########## Update alarms list",
        "info": "",
        "x": 170,
        "y": 1115,
        "wires": []
    },
    {
        "id": "2112cb721aef7fa5",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "1ce1485ad608bc7a",
        "name": "",
        "x": 420,
        "y": 1197,
        "wires": [
            [
                "8c16d74e5c87fa44"
            ],
            [
                "46bbec51c1845bc2"
            ]
        ]
    },
    {
        "id": "b89e1b2327a1279f",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Delete current alarms list",
        "func": "msg.payload = {\n    db: 1,\n    command: 'LPOP',\n    querys: [{ key: msg.device.id, params: [msg.total] }]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1197,
        "wires": [
            [
                "2112cb721aef7fa5"
            ]
        ]
    },
    {
        "id": "cf67aacc68164b4f",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Get failures rules",
        "func": "msg.payload = 'SELECT * FROM ALARMS_LIST ORDER BY ID';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 275,
        "wires": [
            [
                "0e4b70d0dd4314d2"
            ]
        ]
    },
    {
        "id": "0e4b70d0dd4314d2",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "a716829fd201f4fd",
        "name": "",
        "x": 360,
        "y": 275,
        "wires": [
            [
                "d0a5b16d59230622"
            ]
        ]
    },
    {
        "id": "d0a5b16d59230622",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Parse result",
        "func": "const failures = msg.payload;\n\nfailures.forEach(failure => {\n    if (failure.rele_state !== null) {\n        const state = {};\n        \n        state.value = failure.rele_state;\n        state.threshold = { begin: failure.interval_begin , end: failure.interval_end };\n        \n        failure.rele_state = state;\n    }\n    \n    if (failure.look_for !== null) {\n        failure.look_for = failure.look_for.split(',').map(id => parseInt(id));\n    } else {\n        failure.look_for = [];\n    }\n    \n    delete failure.interval_begin;\n    delete failure.interval_end;\n});\n\nmsg.failures = failures;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 275,
        "wires": [
            [
                "478979063431a377"
            ]
        ]
    },
    {
        "id": "a778e665bd2949fd",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Get failures rules",
        "func": "msg.payload = 'SELECT * FROM ALARMS_LIST ORDER BY ID';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 274,
        "wires": [
            [
                "7bce9583437a84ac"
            ]
        ]
    },
    {
        "id": "7bce9583437a84ac",
        "type": "subflow:bab6ffe5b7ae3a28",
        "z": "1ce1485ad608bc7a",
        "name": "",
        "x": 360,
        "y": 274,
        "wires": [
            [
                "93b5025afe6c3209"
            ]
        ]
    },
    {
        "id": "93b5025afe6c3209",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Parse result",
        "func": "const failures = msg.payload;\n\nfailures.forEach(failure => {\n    if (failure.rele_state !== null) {\n        const state = {};\n        \n        state.value = failure.rele_state;\n        state.threshold = { begin: failure.interval_begin , end: failure.interval_end };\n        \n        failure.rele_state = state;\n    }\n    \n    if (failure.look_for !== null) {\n        failure.look_for = failure.look_for.split(',').map(id => parseInt(id));\n    } else {\n        failure.look_for = [];\n    }\n    \n    delete failure.interval_begin;\n    delete failure.interval_end;\n});\n\nmsg.failures = failures;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 274,
        "wires": [
            [
                "f6a2e4e634b990fa"
            ]
        ]
    },
    {
        "id": "14075ea953c0fac3",
        "type": "switch",
        "z": "1ce1485ad608bc7a",
        "name": "Left alarms?",
        "property": "alarms.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 1339,
        "wires": [
            [
                "3d38d1e54993ad8c"
            ],
            [
                "e349c6da73052ef9"
            ]
        ]
    },
    {
        "id": "e349c6da73052ef9",
        "type": "debug",
        "z": "1ce1485ad608bc7a",
        "name": "[EXIT 2] Update alarms list",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 1361,
        "wires": []
    },
    {
        "id": "8c16d74e5c87fa44",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (1) Update alarms list",
        "links": [
            "71887d69ecbccb90"
        ],
        "x": 555,
        "y": 1176,
        "wires": []
    },
    {
        "id": "71887d69ecbccb90",
        "type": "link in",
        "z": "1ce1485ad608bc7a",
        "name": "IN (2) Update alarms list",
        "links": [
            "8c16d74e5c87fa44"
        ],
        "x": 55,
        "y": 1339,
        "wires": [
            [
                "14075ea953c0fac3"
            ]
        ]
    },
    {
        "id": "0ebb6748382350a1",
        "type": "comment",
        "z": "4a674aaa9e667dd6",
        "name": "########## Get alarms of device",
        "info": "",
        "x": 170,
        "y": 1216,
        "wires": []
    },
    {
        "id": "ac7d4375f61cbffc",
        "type": "http in",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "url": "/devices/info/alarms",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 1297,
        "wires": [
            [
                "73ec4cc75728f245"
            ]
        ]
    },
    {
        "id": "73ec4cc75728f245",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Search for alarms",
        "func": "const deviceId = msg.payload.device_id;\n\nmsg.payload = {\n    db: 1,\n    command: 'LRANGE',\n    querys: [{ key: deviceId, params: [0, -1] }]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1297,
        "wires": [
            [
                "909d876e8a218e4f"
            ]
        ]
    },
    {
        "id": "909d876e8a218e4f",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "4a674aaa9e667dd6",
        "name": "",
        "x": 560,
        "y": 1297,
        "wires": [
            [
                "dc283aa3dce143dc"
            ],
            [
                "61d3a096afcf7543"
            ]
        ]
    },
    {
        "id": "070dae8fb52096d4",
        "type": "debug",
        "z": "4a674aaa9e667dd6",
        "name": "[EXIT] Get alarms of device",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 1276,
        "wires": []
    },
    {
        "id": "dc283aa3dce143dc",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Parse result",
        "func": "function formatDate (timestamp) {\n    const date = new Date(timestamp);\n    \n    const day   = `0${date.getDate()}`.slice(-2); \n    const month = `0${date.getMonth()+1}`.slice(-2);\n    const year  = date.getFullYear();\n    const hour  = `0${date.getHours()}`.slice(-2);\n    const min   = `0${date.getMinutes()}`.slice(-2);\n    const sec   = `0${date.getSeconds()}`.slice(-2);\n    \n    return `${day}/${month}/${year} ${hour}:${min}:${sec}`;\n}\n\nconst alarms = msg.payload.map(alarm => alarm.result);\n\nalarms.forEach(alarm => {\n    alarm.creation_time = formatDate(alarm.creation_time);\n    \n    delete alarm.type;\n    delete alarm.device_id;\n});\n\nmsg.payload = alarms;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1275,
        "wires": [
            [
                "070dae8fb52096d4",
                "cf05803867f3abd4"
            ]
        ]
    },
    {
        "id": "cf05803867f3abd4",
        "type": "http response",
        "z": "4a674aaa9e667dd6",
        "name": "Send response",
        "statusCode": "",
        "headers": {},
        "x": 920,
        "y": 1275,
        "wires": []
    },
    {
        "id": "85a48ca071771654",
        "type": "mqtt in",
        "z": "8813ec2835daae18",
        "name": "[PUBLIC BROKER] Sensors Output",
        "topic": "pgc_ufabc/devices/measures",
        "qos": "0",
        "datatype": "json",
        "broker": "1278b67130dc94fa",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 180,
        "y": 176,
        "wires": [
            [
                "408897a4c356ccee"
            ]
        ]
    },
    {
        "id": "9daeb4c690348a8b",
        "type": "switch",
        "z": "e27b09cd4ecd866a",
        "name": "What is device ID?",
        "property": "deviceId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 190,
        "wires": [
            [
                "7ada6d2a89919aee"
            ],
            [
                "2baad984afc85eae"
            ]
        ]
    },
    {
        "id": "8424f1c292375f5a",
        "type": "switch",
        "z": "e27b09cd4ecd866a",
        "name": "What is device ID?",
        "property": "deviceId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 402,
        "wires": [
            [
                "10b9534d381f31d9"
            ],
            [
                "4bc37b961a472284"
            ]
        ]
    },
    {
        "id": "10b9534d381f31d9",
        "type": "mqtt out",
        "z": "e27b09cd4ecd866a",
        "name": "Sensors Input Public",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "1278b67130dc94fa",
        "x": 960,
        "y": 375,
        "wires": []
    },
    {
        "id": "7ada6d2a89919aee",
        "type": "mqtt out",
        "z": "e27b09cd4ecd866a",
        "name": "Sensors Input Public",
        "topic": "",
        "qos": "0",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "1278b67130dc94fa",
        "x": 820,
        "y": 163,
        "wires": []
    },
    {
        "id": "a9b5679456086136",
        "type": "link out",
        "z": "4a674aaa9e667dd6",
        "name": "OUT (1) Get informations of a device",
        "links": [
            "68f2fc6c7a7b41a7"
        ],
        "x": 1175,
        "y": 115,
        "wires": []
    },
    {
        "id": "68f2fc6c7a7b41a7",
        "type": "link in",
        "z": "4a674aaa9e667dd6",
        "name": "IN (1) Get informations of a device",
        "links": [
            "a9b5679456086136",
            "c45fe0bb68869e47"
        ],
        "x": 55,
        "y": 256,
        "wires": [
            [
                "90d54881cbd1f94c"
            ]
        ]
    },
    {
        "id": "8540c014f294007d",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Get alarms of device",
        "func": "const pos = msg.counter-1;\nconst device = msg.devices[pos];\n\nmsg.payload = { device_id: device.id };\n\nmsg.counter = pos;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 235,
        "wires": [
            [
                "4675435db46b5c0b"
            ]
        ]
    },
    {
        "id": "4675435db46b5c0b",
        "type": "http request",
        "z": "4a674aaa9e667dd6",
        "name": "Request alarms",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "query",
        "url": "localhost:1880/devices/info/alarms",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 619,
        "y": 235,
        "wires": [
            [
                "9ef9e2743961bebb"
            ]
        ]
    },
    {
        "id": "9ef9e2743961bebb",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Parse result",
        "func": "const pos = msg.counter;\nconst device = msg.devices[pos];\nconst alarms = msg.payload;\n\ndevice.has_alarms = alarms.length > 0 ? true : false;\n\nmsg.devices[pos] = device;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 235,
        "wires": [
            [
                "c45fe0bb68869e47"
            ]
        ]
    },
    {
        "id": "c45fe0bb68869e47",
        "type": "link out",
        "z": "4a674aaa9e667dd6",
        "name": "OUT (2) Get informations of a device",
        "links": [
            "68f2fc6c7a7b41a7"
        ],
        "x": 895,
        "y": 235,
        "wires": []
    },
    {
        "id": "90d54881cbd1f94c",
        "type": "switch",
        "z": "4a674aaa9e667dd6",
        "name": "Search all devices?",
        "property": "counter",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 190,
        "y": 256,
        "wires": [
            [
                "8540c014f294007d"
            ],
            [
                "ef14c156e2993b31"
            ]
        ]
    },
    {
        "id": "ef14c156e2993b31",
        "type": "function",
        "z": "4a674aaa9e667dd6",
        "name": "Prepare response",
        "func": "msg.payload = msg.devices;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 278,
        "wires": [
            [
                "cb6bcc25b4569647",
                "5e01cf1a6a9c08e8"
            ]
        ]
    },
    {
        "id": "a176ecc87e0d6a8e",
        "type": "function",
        "z": "7bfe80d199363eac",
        "name": "Filter data",
        "func": "msg.payload = msg.payload.filter(data => data.voltage !== 835 && data.current !== 37.5);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 295,
        "wires": [
            [
                "bc47812a82cb85c3"
            ]
        ]
    },
    {
        "id": "e8f7520c726dd036",
        "type": "switch",
        "z": "ef1e9babe146a753",
        "name": "Choose db",
        "property": "db",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 77,
        "wires": [
            [
                "ff37f53bd37a0cb7"
            ],
            [
                "1d8833446a641015"
            ]
        ]
    },
    {
        "id": "a4fed50abee7fd30",
        "type": "function",
        "z": "ef1e9babe146a753",
        "name": "Prepare query",
        "func": "msg.db      = msg.payload.db;\nmsg.command = msg.payload.command;\nmsg.topic   = msg.payload.key;\nmsg.payload = msg.payload.params;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 77,
        "wires": [
            [
                "e8f7520c726dd036"
            ]
        ]
    },
    {
        "id": "fd0c501dc4034fa2",
        "type": "switch",
        "z": "ef1e9babe146a753",
        "name": "Choose command",
        "property": "command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "MULTI",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXEC",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "JSON.GET",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "JSON.INSERT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "JSON.UPDATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "KEYS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "JSON.ARRAPPEND",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "JSON.ARRPOP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "LRANGE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "LPOP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "LPUSH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ZADD",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ZRANGE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ZREMRANGEBYSCORE",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 14,
        "x": 190,
        "y": 522,
        "wires": [
            [
                "66a0ccf965d427af"
            ],
            [
                "80dff5aa04333d20"
            ],
            [
                "94b7833bf6df343f"
            ],
            [
                "9b1d13a86b0f4730"
            ],
            [
                "5b765a2321d2723a"
            ],
            [
                "5526b5564c4720c7"
            ],
            [
                "0885c47fc31e40a5"
            ],
            [
                "8c84fe433442a881"
            ],
            [
                "532fedeb998f4368"
            ],
            [
                "5d0b279c3f0a40d9"
            ],
            [
                "c030712d73f4abf5"
            ],
            [
                "6264c3440d12421c"
            ],
            [
                "c44b21badbaf4f74"
            ],
            [
                "1f841ceee7baf213"
            ]
        ]
    },
    {
        "id": "ff37f53bd37a0cb7",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (1) Choose db",
        "links": [
            "702c37b6bd60f4b3"
        ],
        "x": 475,
        "y": 55,
        "wires": []
    },
    {
        "id": "1d8833446a641015",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (2) Choose db",
        "links": [
            "6f8967b833d0cc65"
        ],
        "x": 475,
        "y": 98,
        "wires": []
    },
    {
        "id": "702c37b6bd60f4b3",
        "type": "link in",
        "z": "ef1e9babe146a753",
        "name": "IN Measures Database",
        "links": [
            "ff37f53bd37a0cb7"
        ],
        "x": 55,
        "y": 522,
        "wires": [
            [
                "fd0c501dc4034fa2"
            ]
        ]
    },
    {
        "id": "532fedeb998f4368",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "a7cb2a42ddfd0d99",
        "command": "LRANGE",
        "name": "LRANGE",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 460,
        "y": 575,
        "wires": [
            [
                "452cb8def69dbde4"
            ]
        ]
    },
    {
        "id": "5d0b279c3f0a40d9",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "a7cb2a42ddfd0d99",
        "command": "LPOP",
        "name": "LPOP",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 450,
        "y": 615,
        "wires": [
            [
                "8e2996447024efdf"
            ]
        ]
    },
    {
        "id": "c030712d73f4abf5",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "a7cb2a42ddfd0d99",
        "command": "LPUSH",
        "name": "LPUSH",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 460,
        "y": 655,
        "wires": [
            [
                "b58cd1739c6cae3d"
            ]
        ]
    },
    {
        "id": "6264c3440d12421c",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "a7cb2a42ddfd0d99",
        "command": "ZADD",
        "name": "ZADD",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 450,
        "y": 695,
        "wires": [
            [
                "d52f2b100b22f3f1"
            ]
        ]
    },
    {
        "id": "c44b21badbaf4f74",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "a7cb2a42ddfd0d99",
        "command": "ZRANGE",
        "name": "ZRANGE",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 460,
        "y": 735,
        "wires": [
            [
                "8ae69a5d9a11246a"
            ]
        ]
    },
    {
        "id": "1f841ceee7baf213",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "a7cb2a42ddfd0d99",
        "command": "ZREMRANGEBYSCORE",
        "name": "ZREMRANGEBYSCORE",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 510,
        "y": 775,
        "wires": [
            [
                "4142eb7a7e1783ba"
            ]
        ]
    },
    {
        "id": "0885c47fc31e40a5",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "a7cb2a42ddfd0d99",
        "command": "JSON.ARRAPPEND",
        "name": "JSON.ARRAPPEND",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 500,
        "y": 496,
        "wires": [
            [
                "5eb04cf77a341870"
            ]
        ]
    },
    {
        "id": "5526b5564c4720c7",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "a7cb2a42ddfd0d99",
        "command": "KEYS",
        "name": "KEYS",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 450,
        "y": 456,
        "wires": [
            [
                "90d515def9183f0d"
            ]
        ]
    },
    {
        "id": "5b765a2321d2723a",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "a7cb2a42ddfd0d99",
        "command": "JSON.SET",
        "name": "JSON.UPDATE",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 480,
        "y": 416,
        "wires": [
            [
                "30fe5f4748de5fd2"
            ]
        ]
    },
    {
        "id": "9b1d13a86b0f4730",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "a7cb2a42ddfd0d99",
        "command": "JSON.SET",
        "name": "JSON.INSERT",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 480,
        "y": 376,
        "wires": [
            [
                "22556dce22f5fb4c"
            ]
        ]
    },
    {
        "id": "8c84fe433442a881",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "a7cb2a42ddfd0d99",
        "command": "JSON.ARRPOP",
        "name": "JSON.ARRPOP",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 480,
        "y": 536,
        "wires": [
            [
                "1c2f0b83eccf9829"
            ]
        ]
    },
    {
        "id": "94b7833bf6df343f",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "a7cb2a42ddfd0d99",
        "command": "JSON.GET",
        "name": "JSON.GET",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 470,
        "y": 336,
        "wires": [
            [
                "a85713486a700478"
            ]
        ]
    },
    {
        "id": "a85713486a700478",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (1) JSON.GET",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 575,
        "y": 336,
        "wires": []
    },
    {
        "id": "22556dce22f5fb4c",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (1) JSON.INSERT",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 595,
        "y": 376,
        "wires": []
    },
    {
        "id": "30fe5f4748de5fd2",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (1) JSON.UPDATE",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 595,
        "y": 416,
        "wires": []
    },
    {
        "id": "90d515def9183f0d",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (1) KEYS",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 535,
        "y": 456,
        "wires": []
    },
    {
        "id": "5eb04cf77a341870",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (1) JSON.ARRAPPEND",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 635,
        "y": 496,
        "wires": []
    },
    {
        "id": "1c2f0b83eccf9829",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (1) JSON.ARRPOP",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 595,
        "y": 536,
        "wires": []
    },
    {
        "id": "452cb8def69dbde4",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (1) LRANGE",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 555,
        "y": 575,
        "wires": []
    },
    {
        "id": "8e2996447024efdf",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (1) LPOP",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 535,
        "y": 615,
        "wires": []
    },
    {
        "id": "b58cd1739c6cae3d",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (1) LPUSH",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 555,
        "y": 655,
        "wires": []
    },
    {
        "id": "d52f2b100b22f3f1",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (1) ZADD",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 535,
        "y": 695,
        "wires": []
    },
    {
        "id": "8ae69a5d9a11246a",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (1) ZRANGE",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 555,
        "y": 735,
        "wires": []
    },
    {
        "id": "4142eb7a7e1783ba",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (1) ZREMRANGEBYSCORE",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 655,
        "y": 775,
        "wires": []
    },
    {
        "id": "bd78cf2af74da454",
        "type": "switch",
        "z": "ef1e9babe146a753",
        "name": "Choose command",
        "property": "command",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "MULTI",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "EXEC",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "JSON.GET",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "JSON.INSERT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "JSON.UPDATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "KEYS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "JSON.ARRAPPEND",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "JSON.ARRPOP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "LRANGE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "LPOP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "LPUSH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ZADD",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ZRANGE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ZREMRANGEBYSCORE",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 14,
        "x": 950,
        "y": 520,
        "wires": [
            [
                "5bc8c9ac1bfec3e2"
            ],
            [
                "d258928c3a0e4315"
            ],
            [
                "3e1e97a30e3c3762"
            ],
            [
                "9ba1b53b0e7509df"
            ],
            [
                "f23135f03369da2f"
            ],
            [
                "03c3464d232b9d6e"
            ],
            [
                "d41d6e43768667f4"
            ],
            [
                "3275407b61c8fe4f"
            ],
            [
                "2505a56b327ec5c5"
            ],
            [
                "70f3a929e71b98d0"
            ],
            [
                "dfda458b117e8c0c"
            ],
            [
                "e8919967a530a8c3"
            ],
            [
                "2d8cdc6bfb4dc19a"
            ],
            [
                "d5f025c44db40dcb"
            ]
        ]
    },
    {
        "id": "6f8967b833d0cc65",
        "type": "link in",
        "z": "ef1e9babe146a753",
        "name": "IN Alarms Database",
        "links": [
            "1d8833446a641015"
        ],
        "x": 815,
        "y": 520,
        "wires": [
            [
                "bd78cf2af74da454"
            ]
        ]
    },
    {
        "id": "2505a56b327ec5c5",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "e6174ffe2df6871a",
        "command": "LRANGE",
        "name": "LRANGE",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1220,
        "y": 574,
        "wires": [
            [
                "96eefe5ef6044c44"
            ]
        ]
    },
    {
        "id": "70f3a929e71b98d0",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "e6174ffe2df6871a",
        "command": "LPOP",
        "name": "LPOP",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1210,
        "y": 614,
        "wires": [
            [
                "fd7d10b182fdb87a"
            ]
        ]
    },
    {
        "id": "dfda458b117e8c0c",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "e6174ffe2df6871a",
        "command": "LPUSH",
        "name": "LPUSH",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1220,
        "y": 654,
        "wires": [
            [
                "d42a1d3932166230"
            ]
        ]
    },
    {
        "id": "e8919967a530a8c3",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "e6174ffe2df6871a",
        "command": "ZADD",
        "name": "ZADD",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1210,
        "y": 694,
        "wires": [
            [
                "112be8755ce42ace"
            ]
        ]
    },
    {
        "id": "2d8cdc6bfb4dc19a",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "e6174ffe2df6871a",
        "command": "ZRANGE",
        "name": "ZRANGE",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1220,
        "y": 734,
        "wires": [
            [
                "063a465e3a363471"
            ]
        ]
    },
    {
        "id": "d5f025c44db40dcb",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "e6174ffe2df6871a",
        "command": "ZREMRANGEBYSCORE",
        "name": "ZREMRANGEBYSCORE",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1270,
        "y": 774,
        "wires": [
            [
                "8facc0765095054d"
            ]
        ]
    },
    {
        "id": "d41d6e43768667f4",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "e6174ffe2df6871a",
        "command": "JSON.ARRAPPEND",
        "name": "JSON.ARRAPPEND",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1260,
        "y": 494,
        "wires": [
            [
                "8934f178f6122b98"
            ]
        ]
    },
    {
        "id": "03c3464d232b9d6e",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "e6174ffe2df6871a",
        "command": "KEYS",
        "name": "KEYS",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1210,
        "y": 454,
        "wires": [
            [
                "5fe0c297492443ac"
            ]
        ]
    },
    {
        "id": "f23135f03369da2f",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "e6174ffe2df6871a",
        "command": "JSON.SET",
        "name": "JSON.UPDATE",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1240,
        "y": 414,
        "wires": [
            [
                "0e9871b49c3029e1"
            ]
        ]
    },
    {
        "id": "9ba1b53b0e7509df",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "e6174ffe2df6871a",
        "command": "JSON.SET",
        "name": "JSON.INSERT",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1240,
        "y": 374,
        "wires": [
            [
                "d4640c828d8ca80f"
            ]
        ]
    },
    {
        "id": "3275407b61c8fe4f",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "e6174ffe2df6871a",
        "command": "JSON.ARRPOP",
        "name": "JSON.ARRPOP",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1240,
        "y": 534,
        "wires": [
            [
                "e567cb19a4b2214e"
            ]
        ]
    },
    {
        "id": "3e1e97a30e3c3762",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "e6174ffe2df6871a",
        "command": "JSON.GET",
        "name": "JSON.GET",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1230,
        "y": 334,
        "wires": [
            [
                "5886247d5cf225e5"
            ]
        ]
    },
    {
        "id": "5886247d5cf225e5",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (2) JSON.GET",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 1335,
        "y": 334,
        "wires": []
    },
    {
        "id": "d4640c828d8ca80f",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (2) JSON.INSERT",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 1355,
        "y": 374,
        "wires": []
    },
    {
        "id": "0e9871b49c3029e1",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (2) JSON.UPDATE",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 1355,
        "y": 414,
        "wires": []
    },
    {
        "id": "5fe0c297492443ac",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (2) KEYS",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 1295,
        "y": 454,
        "wires": []
    },
    {
        "id": "8934f178f6122b98",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (2) JSON.ARRAPPEND",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 1395,
        "y": 494,
        "wires": []
    },
    {
        "id": "e567cb19a4b2214e",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (2) JSON.ARRPOP",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 1355,
        "y": 534,
        "wires": []
    },
    {
        "id": "96eefe5ef6044c44",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (2) LRANGE",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 1315,
        "y": 574,
        "wires": []
    },
    {
        "id": "fd7d10b182fdb87a",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (2) LPOP",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 1295,
        "y": 614,
        "wires": []
    },
    {
        "id": "d42a1d3932166230",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (2) LPUSH",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 1315,
        "y": 654,
        "wires": []
    },
    {
        "id": "112be8755ce42ace",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (2) ZADD",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 1295,
        "y": 694,
        "wires": []
    },
    {
        "id": "063a465e3a363471",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (2) ZRANGE",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 1315,
        "y": 734,
        "wires": []
    },
    {
        "id": "8facc0765095054d",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (2) ZREMRANGEBYSCORE",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 1415,
        "y": 774,
        "wires": []
    },
    {
        "id": "c90f12a661f1cb1b",
        "type": "comment",
        "z": "ef1e9babe146a753",
        "name": "Measures Database",
        "info": "",
        "x": 130,
        "y": 196,
        "wires": []
    },
    {
        "id": "16e7ad7b2191a277",
        "type": "comment",
        "z": "ef1e9babe146a753",
        "name": "Alarms Database",
        "info": "",
        "x": 880,
        "y": 195,
        "wires": []
    },
    {
        "id": "bb414e3de0942f9a",
        "type": "catch",
        "z": "ef1e9babe146a753",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 1000,
        "wires": [
            [
                "8f07ee526f13587c"
            ]
        ]
    },
    {
        "id": "83ff903c858af9a3",
        "type": "link in",
        "z": "ef1e9babe146a753",
        "name": "",
        "links": [
            "063a465e3a363471",
            "0e9871b49c3029e1",
            "112be8755ce42ace",
            "1c2f0b83eccf9829",
            "22556dce22f5fb4c",
            "30fe5f4748de5fd2",
            "4142eb7a7e1783ba",
            "452cb8def69dbde4",
            "5886247d5cf225e5",
            "5c707cd64cdc3481",
            "5eb04cf77a341870",
            "5fe0c297492443ac",
            "8934f178f6122b98",
            "8ae69a5d9a11246a",
            "8e2996447024efdf",
            "8facc0765095054d",
            "90d515def9183f0d",
            "96eefe5ef6044c44",
            "a85713486a700478",
            "ac00047cc3aaffdd",
            "b58cd1739c6cae3d",
            "d42a1d3932166230",
            "d4640c828d8ca80f",
            "d52f2b100b22f3f1",
            "e567cb19a4b2214e",
            "fd7d10b182fdb87a",
            "caad3e67ff92796f",
            "6b354d85dbd1647a"
        ],
        "x": 55,
        "y": 940,
        "wires": [
            [
                "fecff98d4f469ec2"
            ]
        ]
    },
    {
        "id": "fecff98d4f469ec2",
        "type": "function",
        "z": "ef1e9babe146a753",
        "name": "Prepare response",
        "func": "delete msg.db;\ndelete msg.command;\ndelete msg.topic;\ndelete msg.params;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "8f07ee526f13587c",
        "type": "function",
        "z": "ef1e9babe146a753",
        "name": "Prepare response",
        "func": "delete msg.db;\ndelete msg.command;\ndelete msg.topic;\ndelete msg.params;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 1000,
        "wires": [
            []
        ]
    },
    {
        "id": "f5c3e5407a3aaa52",
        "type": "subflow:ef1e9babe146a753",
        "z": "185bd0a8b5a4b916",
        "name": "",
        "env": [],
        "x": 570,
        "y": 437,
        "wires": [
            [
                "5309a1aeeb5c3fa3"
            ],
            [
                "7f7e243187b3543a"
            ]
        ]
    },
    {
        "id": "5309a1aeeb5c3fa3",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT (2) Commands",
        "links": [
            "0aad452318b271e8"
        ],
        "x": 716,
        "y": 415,
        "wires": []
    },
    {
        "id": "7f7e243187b3543a",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT (3) Commands",
        "links": [
            "ab7425eb7c0d4676"
        ],
        "x": 716,
        "y": 458,
        "wires": []
    },
    {
        "id": "66a0ccf965d427af",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "a7cb2a42ddfd0d99",
        "command": "MULTI",
        "name": "MULTI",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 450,
        "y": 256,
        "wires": [
            [
                "5c707cd64cdc3481"
            ]
        ]
    },
    {
        "id": "80dff5aa04333d20",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "a7cb2a42ddfd0d99",
        "command": "EXEC",
        "name": "EXEC",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 450,
        "y": 296,
        "wires": [
            [
                "ac00047cc3aaffdd"
            ]
        ]
    },
    {
        "id": "5c707cd64cdc3481",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (1) MULTI",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 535,
        "y": 256,
        "wires": []
    },
    {
        "id": "ac00047cc3aaffdd",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (1) EXEC",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 535,
        "y": 296,
        "wires": []
    },
    {
        "id": "5bc8c9ac1bfec3e2",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "e6174ffe2df6871a",
        "command": "MULTI",
        "name": "MULTI",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1210,
        "y": 255,
        "wires": [
            [
                "caad3e67ff92796f"
            ]
        ]
    },
    {
        "id": "d258928c3a0e4315",
        "type": "redis-command",
        "z": "ef1e9babe146a753",
        "server": "e6174ffe2df6871a",
        "command": "EXEC",
        "name": "EXEC",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1210,
        "y": 295,
        "wires": [
            [
                "6b354d85dbd1647a"
            ]
        ]
    },
    {
        "id": "caad3e67ff92796f",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (2) MULTI",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 1295,
        "y": 255,
        "wires": []
    },
    {
        "id": "6b354d85dbd1647a",
        "type": "link out",
        "z": "ef1e9babe146a753",
        "name": "OUT (2) EXEC",
        "links": [
            "83ff903c858af9a3"
        ],
        "x": 1295,
        "y": 295,
        "wires": []
    },
    {
        "id": "e68dd621209b2d66",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN (1) Begin",
        "links": [
            "af42ac8cd82faf37",
            "f846ecd2bda124a3"
        ],
        "x": 55,
        "y": 256,
        "wires": [
            [
                "7a1c9d83a3613f33"
            ]
        ]
    },
    {
        "id": "2b77f7f45b3222ed",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT (3) Begin",
        "links": [
            "ab7425eb7c0d4676"
        ],
        "x": 935,
        "y": 158,
        "wires": []
    },
    {
        "id": "af42ac8cd82faf37",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT (2) Begin",
        "links": [
            "e68dd621209b2d66"
        ],
        "x": 935,
        "y": 115,
        "wires": []
    },
    {
        "id": "f846ecd2bda124a3",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT (1) Begin",
        "links": [
            "e68dd621209b2d66"
        ],
        "x": 495,
        "y": 181,
        "wires": []
    },
    {
        "id": "513a6d8b15b09235",
        "type": "subflow:ef1e9babe146a753",
        "z": "185bd0a8b5a4b916",
        "name": "",
        "env": [],
        "x": 790,
        "y": 137,
        "wires": [
            [
                "af42ac8cd82faf37"
            ],
            [
                "2b77f7f45b3222ed"
            ]
        ]
    },
    {
        "id": "84ad2818468743c6",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT (3) End",
        "links": [
            "ab7425eb7c0d4676"
        ],
        "x": 735,
        "y": 679,
        "wires": []
    },
    {
        "id": "45e306574517685a",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT (2) End",
        "links": [
            "b89110edd7e9a809"
        ],
        "x": 735,
        "y": 636,
        "wires": []
    },
    {
        "id": "6d5dcc5b88ece111",
        "type": "subflow:ef1e9babe146a753",
        "z": "185bd0a8b5a4b916",
        "name": "",
        "env": [],
        "x": 590,
        "y": 658,
        "wires": [
            [
                "45e306574517685a"
            ],
            [
                "84ad2818468743c6"
            ]
        ]
    },
    {
        "id": "9c20f8370a64c5b7",
        "type": "link out",
        "z": "185bd0a8b5a4b916",
        "name": "OUT (1) End",
        "links": [
            "b89110edd7e9a809"
        ],
        "x": 335,
        "y": 702,
        "wires": []
    },
    {
        "id": "b89110edd7e9a809",
        "type": "link in",
        "z": "185bd0a8b5a4b916",
        "name": "IN (2) End",
        "links": [
            "45e306574517685a",
            "9c20f8370a64c5b7"
        ],
        "x": 55,
        "y": 781,
        "wires": [
            [
                "071eddf0112438e8"
            ]
        ]
    },
    {
        "id": "95fbf9069438666b",
        "type": "function",
        "z": "185bd0a8b5a4b916",
        "name": "Prepare query",
        "func": "msg.payload = { \n    db:      msg.entry.db, \n    command: msg.entry.command, \n    key:     msg.entry.querys[msg.counter].key, \n    params:  msg.entry.querys[msg.counter].params\n};\n\nmsg.counter += 1;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 437,
        "wires": [
            [
                "f5c3e5407a3aaa52"
            ]
        ]
    },
    {
        "id": "0b4b5f20178a0cf7",
        "type": "comment",
        "z": "8813ec2835daae18",
        "name": "########## Store data in Postgres",
        "info": "",
        "x": 180,
        "y": 296,
        "wires": []
    },
    {
        "id": "ebb366080da8abd9",
        "type": "comment",
        "z": "8813ec2835daae18",
        "name": "########## Store data in Redis",
        "info": "",
        "x": 170,
        "y": 456,
        "wires": []
    },
    {
        "id": "03d137c95e4ea47e",
        "type": "link in",
        "z": "8813ec2835daae18",
        "name": "IN (1) Store data in Postgres",
        "links": [
            "e7955b86088aae8a"
        ],
        "x": 55,
        "y": 356,
        "wires": [
            [
                "96803667e593d0dc"
            ]
        ]
    },
    {
        "id": "e7955b86088aae8a",
        "type": "link out",
        "z": "8813ec2835daae18",
        "name": "OUT (1) Receive sensors data",
        "links": [
            "03d137c95e4ea47e"
        ],
        "x": 595,
        "y": 145,
        "wires": []
    },
    {
        "id": "4ce9c5ef67b89b49",
        "type": "link in",
        "z": "8813ec2835daae18",
        "name": "IN (1) Store data in Redis",
        "links": [
            "a8196a45cdacfe85"
        ],
        "x": 55,
        "y": 537,
        "wires": [
            [
                "83c1a0d6ab54292f"
            ]
        ]
    },
    {
        "id": "83c1a0d6ab54292f",
        "type": "function",
        "z": "8813ec2835daae18",
        "name": "Set query",
        "func": "const measures = msg.measures;\n\nmeasures.id = msg.payload[0].id;\nmeasures.insertion_time = msg.timestamp;\n\nmsg.payload = {\n    db: 0,\n    command: 'ZADD',\n    querys: [{ key: measures.device_id, params: [measures.insertion_time, JSON.stringify(measures)] }]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 537,
        "wires": [
            [
                "f9bacad2fe4dba61"
            ]
        ]
    },
    {
        "id": "408897a4c356ccee",
        "type": "function",
        "z": "8813ec2835daae18",
        "name": "Get current timestamp",
        "func": "const timestamp = new Date();\n\nmsg.timestamp = timestamp.getTime();\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 145,
        "wires": [
            [
                "e7955b86088aae8a",
                "6f4265374f4592f0"
            ]
        ]
    },
    {
        "id": "6f4265374f4592f0",
        "type": "debug",
        "z": "8813ec2835daae18",
        "name": "[EXIT] Receive sensors data",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 146,
        "wires": []
    },
    {
        "id": "f9bacad2fe4dba61",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "8813ec2835daae18",
        "name": "",
        "x": 320,
        "y": 537,
        "wires": [
            [
                "f639a057d81ccbf2"
            ],
            [
                "b973a34f73e75f3e"
            ]
        ]
    },
    {
        "id": "f639a057d81ccbf2",
        "type": "debug",
        "z": "8813ec2835daae18",
        "name": "[EXIT 1] Store data in Redis",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 516,
        "wires": []
    },
    {
        "id": "b973a34f73e75f3e",
        "type": "debug",
        "z": "8813ec2835daae18",
        "name": "[EXIT 2] Store data in Redis",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 560,
        "y": 558,
        "wires": []
    },
    {
        "id": "a8196a45cdacfe85",
        "type": "link out",
        "z": "8813ec2835daae18",
        "name": "OUT (1) Store data in Postgres",
        "links": [
            "4ce9c5ef67b89b49"
        ],
        "x": 395,
        "y": 356,
        "wires": []
    },
    {
        "id": "71485c598184f655",
        "type": "comment",
        "z": "7f5557aca01f4737",
        "name": "########## Delete data in Redis from more than a hour",
        "info": "",
        "x": 240,
        "y": 796,
        "wires": []
    },
    {
        "id": "1e772b4d862f5cb6",
        "type": "inject",
        "z": "7f5557aca01f4737",
        "name": "[TRIGGER] Execute every 1 hour",
        "props": [
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "",
        "crontab": "0 0-23 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "str",
        "x": 205,
        "y": 858,
        "wires": [
            [
                "cccf83242b43c6f9"
            ]
        ]
    },
    {
        "id": "cccf83242b43c6f9",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Get devices IDs",
        "func": "msg.payload = {\n    db: 0,\n    command: 'KEYS',\n    querys: [{ key: '*', params: [] }]\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 858,
        "wires": [
            [
                "815b9c5245d1e2ae"
            ]
        ]
    },
    {
        "id": "ed8cdef253b56006",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Parse result",
        "func": "const timestamp = new Date(msg.timestamp);\nmsg.timestamp = timestamp.getTime();\n\nconst devices = msg.payload; \nmsg.payload = devices.map(device => device.result);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 836,
        "wires": [
            [
                "43c90b6e755638cc"
            ]
        ]
    },
    {
        "id": "43c90b6e755638cc",
        "type": "split",
        "z": "7f5557aca01f4737",
        "name": "Split devices",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 990,
        "y": 836,
        "wires": [
            [
                "4466b68e60fbc008"
            ]
        ]
    },
    {
        "id": "4466b68e60fbc008",
        "type": "link out",
        "z": "7f5557aca01f4737",
        "name": "OUT (1) Delete data from more than a hour in Redis",
        "links": [
            "f9c5ee87dba17333"
        ],
        "x": 1095,
        "y": 836,
        "wires": []
    },
    {
        "id": "f9c5ee87dba17333",
        "type": "link in",
        "z": "7f5557aca01f4737",
        "name": "IN (1) Delete data from more than a hour in Redis",
        "links": [
            "4466b68e60fbc008",
            "496e638e5e33fe24"
        ],
        "x": 55,
        "y": 978,
        "wires": [
            [
                "4b2331cbfa3d3be8"
            ]
        ]
    },
    {
        "id": "4b2331cbfa3d3be8",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Set query",
        "func": "const deviceId = msg.payload;\nconst timestamp = msg.timestamp;\n\nconst min = '-inf';\nconst max = `(${timestamp - 1000*60*60}`;\n\nmsg.payload = {\n    db:      0,\n    command: 'ZREMRANGEBYSCORE',\n    querys:  [{ key: deviceId, params: [min, max]}]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 978,
        "wires": [
            [
                "14ef632550983258"
            ]
        ]
    },
    {
        "id": "77c4864437bda107",
        "type": "debug",
        "z": "7f5557aca01f4737",
        "name": "[EXIT 2] Delete data from more than a hour in Redis",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 956,
        "wires": []
    },
    {
        "id": "14ef632550983258",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "7f5557aca01f4737",
        "name": "",
        "x": 320,
        "y": 978,
        "wires": [
            [
                "77c4864437bda107"
            ],
            [
                "a312b8870ce256eb"
            ]
        ]
    },
    {
        "id": "3696f7783c3c5708",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Get last measure",
        "func": "const deviceId = msg.payload.device_id;\n\nmsg.payload = {\n    db: 0,\n    command: 'ZRANGE',\n    querys: [{ key: deviceId, params: [0, 0, 'REV'] }]\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 137,
        "wires": [
            [
                "846ea5b3c008f3d1"
            ]
        ]
    },
    {
        "id": "846ea5b3c008f3d1",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "7f5557aca01f4737",
        "name": "",
        "x": 580,
        "y": 137,
        "wires": [
            [
                "269b6f17aa90ca43"
            ],
            [
                "856a8b5bb337fed6"
            ]
        ]
    },
    {
        "id": "ca334a44ec34ea7f",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "7f5557aca01f4737",
        "name": "",
        "x": 560,
        "y": 418,
        "wires": [
            [
                "0cbdbe45f8ccae69"
            ],
            [
                "db58fee248f177ca"
            ]
        ]
    },
    {
        "id": "91c83481ac4f1610",
        "type": "link out",
        "z": "7f5557aca01f4737",
        "name": "OUT (1) Get measures of device in specific interval",
        "links": [
            "ed6756d5836e6482"
        ],
        "x": 735,
        "y": 316,
        "wires": []
    },
    {
        "id": "ed6756d5836e6482",
        "type": "link in",
        "z": "7f5557aca01f4737",
        "name": "IN (1) Get measures of device in specific interval",
        "links": [
            "91c83481ac4f1610"
        ],
        "x": 55,
        "y": 456,
        "wires": [
            [
                "1a6d28956a0d6589"
            ]
        ]
    },
    {
        "id": "dacc1dbd08c5db6d",
        "type": "link out",
        "z": "7f5557aca01f4737",
        "name": "OUT (2) Get measures of device in specific interval",
        "links": [
            "2d413cccf4985d24"
        ],
        "x": 855,
        "y": 396,
        "wires": []
    },
    {
        "id": "0cbdbe45f8ccae69",
        "type": "function",
        "z": "7f5557aca01f4737",
        "name": "Parse result",
        "func": "msg.payload = msg.payload.map(data => data.result);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 396,
        "wires": [
            [
                "dacc1dbd08c5db6d"
            ]
        ]
    },
    {
        "id": "a312b8870ce256eb",
        "type": "debug",
        "z": "7f5557aca01f4737",
        "name": "[EXIT 3] Delete data from more than a hour in Redis",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 999,
        "wires": []
    },
    {
        "id": "856a8b5bb337fed6",
        "type": "link out",
        "z": "7f5557aca01f4737",
        "name": "OUT (1) Get last measures of device",
        "links": [
            "838b9ecc0d02c9ab"
        ],
        "x": 715,
        "y": 158,
        "wires": []
    },
    {
        "id": "838b9ecc0d02c9ab",
        "type": "link in",
        "z": "7f5557aca01f4737",
        "name": "IN Exceptions Treatment",
        "links": [
            "856a8b5bb337fed6",
            "db58fee248f177ca"
        ],
        "x": 145,
        "y": 1216,
        "wires": [
            [
                "a961e1ec20451721"
            ]
        ]
    },
    {
        "id": "db58fee248f177ca",
        "type": "link out",
        "z": "7f5557aca01f4737",
        "name": "OUT (3) Get measures of device in specific interval",
        "links": [
            "838b9ecc0d02c9ab"
        ],
        "x": 695,
        "y": 440,
        "wires": []
    },
    {
        "id": "61d3a096afcf7543",
        "type": "link out",
        "z": "4a674aaa9e667dd6",
        "name": "OUT (1) Get alarms of device",
        "links": [
            "be5acaf5ea5ff004"
        ],
        "x": 695,
        "y": 1319,
        "wires": []
    },
    {
        "id": "be5acaf5ea5ff004",
        "type": "link in",
        "z": "4a674aaa9e667dd6",
        "name": "IN Exceptions Treatment",
        "links": [
            "61d3a096afcf7543"
        ],
        "x": 145,
        "y": 1536,
        "wires": [
            [
                "d1e16d213602f942"
            ]
        ]
    },
    {
        "id": "2f1493e37e263f60",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "a716829fd201f4fd",
        "name": "",
        "x": 360,
        "y": 480,
        "wires": [
            [
                "bfa141f4777b4d9b"
            ],
            [
                "0e6f86e1df89c759"
            ]
        ]
    },
    {
        "id": "0e6f86e1df89c759",
        "type": "debug",
        "z": "a716829fd201f4fd",
        "name": "[EXIT 1] Search for alarms in devices",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 501,
        "wires": []
    },
    {
        "id": "646217ca55a43fdf",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Get measures",
        "func": "const device = msg.payload;\nconst interval = msg.interval;\n\nconst timestamp = new Date();\nconst start = timestamp.getTime() - 1000 * 60 * interval;\n\nmsg.payload = {\n    db: 0,\n    command: 'ZRANGE',\n    querys: [{ key: device.id, params: [start, `+inf`, 'BYSCORE'] }]\n};\n\nmsg.device = device;\n\ndelete msg.interval;\n               \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 480,
        "wires": [
            [
                "973f24a3acfe456b"
            ]
        ]
    },
    {
        "id": "51a9932d59f5b0cd",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Parse result",
        "func": "msg.device.measures = msg.payload.map(measure => measure.result);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 458,
        "wires": [
            [
                "712f89822e9704e4"
            ]
        ]
    },
    {
        "id": "973f24a3acfe456b",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "1ce1485ad608bc7a",
        "name": "",
        "x": 360,
        "y": 480,
        "wires": [
            [
                "51a9932d59f5b0cd"
            ],
            [
                "51f1ae3967a3185c"
            ]
        ]
    },
    {
        "id": "51f1ae3967a3185c",
        "type": "debug",
        "z": "1ce1485ad608bc7a",
        "name": "[EXIT 1] Search for alarms in devices",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 501,
        "wires": []
    },
    {
        "id": "3459dc27340db6b6",
        "type": "function",
        "z": "1ce1485ad608bc7a",
        "name": "Parse result",
        "func": "msg.devices = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 195,
        "wires": [
            [
                "3c9e9e1e65d0d901"
            ]
        ]
    },
    {
        "id": "153697f042197c3f",
        "type": "function",
        "z": "a716829fd201f4fd",
        "name": "Parse result",
        "func": "msg.devices = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 196,
        "wires": [
            [
                "5a4b5eba1eec0cdb"
            ]
        ]
    },
    {
        "id": "815b9c5245d1e2ae",
        "type": "subflow:185bd0a8b5a4b916",
        "z": "7f5557aca01f4737",
        "name": "",
        "x": 640,
        "y": 858,
        "wires": [
            [
                "ed8cdef253b56006"
            ],
            [
                "b8a89e6b02037995"
            ]
        ]
    },
    {
        "id": "b8a89e6b02037995",
        "type": "debug",
        "z": "7f5557aca01f4737",
        "name": "[EXIT 1] Delete data from more than a hour in Redis",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 880,
        "wires": []
    },
    {
        "id": "66bcfb89b4a8b0e1",
        "type": "switch",
        "z": "a716829fd201f4fd",
        "name": "Found new alarms?",
        "property": "newAlarms.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 803,
        "wires": [
            [
                "2689c430be5bfd2f"
            ],
            [
                "06aca3a99019af51"
            ]
        ]
    },
    {
        "id": "06aca3a99019af51",
        "type": "debug",
        "z": "a716829fd201f4fd",
        "name": "[EXIT 2] Create new alarms",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1100,
        "y": 824,
        "wires": []
    },
    {
        "id": "455d87c337cbecac",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (1) Finish alarm in historic table",
        "links": [
            "d9aee65cde3b444d"
        ],
        "x": 795,
        "y": 976,
        "wires": []
    },
    {
        "id": "d35a8f8c9689b968",
        "type": "link out",
        "z": "1ce1485ad608bc7a",
        "name": "OUT (2) Finish alarm in historic table",
        "links": [
            "d9aee65cde3b444d"
        ],
        "x": 375,
        "y": 1020,
        "wires": []
    }
]